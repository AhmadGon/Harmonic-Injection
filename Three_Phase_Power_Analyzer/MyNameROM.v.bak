module MyNameROM(
	input VGA_CLK,
	input [5:0] address,
	output reg [63:0] data
);
always @(posedge VGA_CLK)
	begin
	case(address)
	//Ahmad
	00: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	01: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	02: data <= 64'b0000000000000000000000001000011100000000000000000000000011100000;
	03: data <= 64'b0000000000000000000000011100001100000000000000000000000001100000;
	04: data <= 64'b0000000000000000000000110110001100000000000000000000000001100000;
	05: data <= 64'b0000000000000000000001100011001101100111001100011110000111100000;
	06: data <= 64'b0000000000000000000001100011001110110111111110000011001101100000;
	07: data <= 64'b0000000000000000000001111111001100110110110110011111011001100000;
	08: data <= 64'b0000000000000000000001100011001100110110110110110011011001100000;
	09: data <= 64'b0000000000000000000001100011001100110110110110110011011001100000;
	10: data <= 64'b0000000000000000000001100011001100110110110110110011011001100000;
	11: data <= 64'b0000000000000000000001100011011100110110110110011101101110110000;
	12: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	13: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	14: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	15: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	//Alastal   
	16: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	17: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	18: data <= 64'b0001000011100000000000000000010000000000001110000000000000000000;
	19: data <= 64'b0011100001100000000000000000110000000000000110000000000000000000;
	20: data <= 64'b0110110001100000000000000000110000000000000110000000000000000000;
	21: data <= 64'b1100011001100111100011111011111100011110000110000000000000000000;
	22: data <= 64'b1100011001100000110110001100110000000011000110000000000000000000;
	23: data <= 64'b1111111001100111110011000000110000011111000110000000000000000000;
	24: data <= 64'b1100011001101100110001110000110000110011000110000000000000000000;
	25: data <= 64'b1100011001101100110000011000110000110011000110000000000000000000;
	26: data <= 64'b1100011001101100110110001100110110110011000110000000000000000000;
	27: data <= 64'b1100011011110111011011111000011100011101101111000000000000000000;
	28: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	29: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	30: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	31: data <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
	default: data <= 64'b0;
	endcase
	end
endmodule 