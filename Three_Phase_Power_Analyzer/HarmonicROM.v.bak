module HarmonicROM(
	input VGA_CLK,
	input [5:0] address,
	output reg [31:0] data
);
always @(posedge VGA_CLK)
	begin
	case(address)
	//M
	00: data <= 32'b00000000000000000000000000000000;
	01: data <= 32'b00000000000000000000000000000000;
	02: data <= 32'b11000011000000000000000000000000;
	03: data <= 32'b11100111000000000000000000000000;
	04: data <= 32'b11111111000000000000000000000000;
	05: data <= 32'b11111111000000000000000000000000;
	06: data <= 32'b11011011000000000000000000000000;
	07: data <= 32'b11000011000000000000000000000000;
	08: data <= 32'b11000011000000000000000000000000;
	09: data <= 32'b11000011000000000000000000000000;
	10: data <= 32'b11000011000000000000000000000000;
	11: data <= 32'b11000011000000000000000000000000;
	12: data <= 32'b00000000000000000000000000000000;
	13: data <= 32'b00000000000000000000000000000000;
	14: data <= 32'b00000000000000000000000000000000;
	15: data <= 32'b00000000000000000000000000000000;
	//3rd 32
	16: data <= 32'b00000000000000000000000000000000;
	17: data <= 32'b00000000000000000000000000000000;
	18: data <= 32'b01111100000000000001110000000000;
	19: data <= 32'b11000110000000000000110000000000;
	20: data <= 32'b00000110000000000000110000000000;
	21: data <= 32'b00000110110111000011110000000000;
	22: data <= 32'b00111100011101100110110000000000;
	23: data <= 32'b00000110011001101100110000000000;
	24: data <= 32'b00000110011000001100110000000000;
	25: data <= 32'b00000110011000001100110000000000;
	26: data <= 32'b11000110011000001100110000000000;
	27: data <= 32'b01111100111100000111011000000000;
	28: data <= 32'b00000000000000000000000000000000;
	29: data <= 32'b00000000000000000000000000000000;
	30: data <= 32'b00000000000000000000000000000000;
	31: data <= 32'b00000000000000000000000000000000;
	//9th
	16: data <= 32'b00000000000000000000000000000000;
	17: data <= 32'b00000000000000000000000000000000;
	18: data <= 32'b01111100000100001110000000000000;
	19: data <= 32'b11000110001100000110000000000000;
	20: data <= 32'b11000110001100000110000000000000;
	21: data <= 32'b11000110111111000110110000000000;
	22: data <= 32'b01111110001100000111011000000000;
	23: data <= 32'b00000110001100000110011000000000;
	24: data <= 32'b00000110001100000110011000000000;
	25: data <= 32'b00000110001100000110011000000000;
	26: data <= 32'b00001100001101100110011000000000;
	27: data <= 32'b01111000000111001110011000000000;
	28: data <= 32'b00000000000000000000000000000000;
	29: data <= 32'b00000000000000000000000000000000;
	30: data <= 32'b00000000000000000000000000000000;
	31: data <= 32'b00000000000000000000000000000000;
	//15th
	16: data <= 32'b00000000000000000000000000000000;
	17: data <= 32'b00000000000000000000000000000000;
	18: data <= 32'b00011000111111100001000011100000;
	19: data <= 32'b00111000110000000011000001100000;
	20: data <= 32'b01111000110000000011000001100000;
	21: data <= 32'b00011000110000001111110001101100;
	22: data <= 32'b00011000111111000011000001110110;
	23: data <= 32'b00011000000001100011000001100110;
	24: data <= 32'b00011000000001100011000001100110;
	25: data <= 32'b00011000000001100011000001100110;
	26: data <= 32'b00011000110001100011011001100110;
	27: data <= 32'b01111110011111000001110011100110;
	28: data <= 32'b00000000000000000000000000000000;
	29: data <= 32'b00000000000000000000000000000000;
	30: data <= 32'b00000000000000000000000000000000;
	31: data <= 32'b00000000000000000000000000000000;
	default: data <= 64'b0;
	endcase
	end
endmodule 