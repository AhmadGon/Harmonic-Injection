-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ThreeSines_DrSaher\Sines.vhd
-- Created: 2021-03-10 22:43:26
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.22222e-08
-- Target subsystem base rate: 2.22222e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.22222e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- CLK_1                         ce_out        2.22222e-08
-- Sync_n                        ce_out        2.22222e-08
-- Blank_n                       ce_out        2.22222e-08
-- HEX0_O                        ce_out        2.22222e-08
-- HEX1_O                        ce_out        2.22222e-08
-- HEX2_O                        ce_out        2.22222e-08
-- HEX3_O                        ce_out        2.22222e-08
-- Phase_A                       ce_out        2.22222e-08
-- Phase_A_1                     ce_out        2.22222e-08
-- Phase_B                       ce_out        2.22222e-08
-- Phase_B_1                     ce_out        2.22222e-08
-- Phase_C                       ce_out        2.22222e-08
-- Phase_C_1                     ce_out        2.22222e-08
-- PhaseB_Analog                 ce_out        2.22222e-08
-- PhaseC_Tri_Analog             ce_out        2.22222e-08
-- LEDG0                         ce_out        2.22222e-08
-- LEDG1                         ce_out        2.22222e-08
-- LEDG2                         ce_out        2.22222e-08
-- HEX5                          ce_out        2.22222e-08
-- HEX4                          ce_out        2.22222e-08
-- PhaseA_Analog                 ce_out        2.22222e-08
-- Sample_Pulse                  ce_out        2.22222e-08
-- PhaseA_PWM                    ce_out        2.22222e-08
-- PhaseB_PWM                    ce_out        2.22222e-08
-- PhaseC_PWM                    ce_out        2.22222e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Sines
-- Source Path: ThreeSines_DrSaher/Sines 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Sines_pkg.ALL;

ENTITY Sines IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Push_3                            :   IN    std_logic;
        Push_2                            :   IN    std_logic;
        Push_0                            :   IN    std_logic;
        SW1                               :   IN    std_logic;
        SW0                               :   IN    std_logic;
        Push_1                            :   IN    std_logic;
        SW2                               :   IN    std_logic;
        Reload                            :   IN    std_logic;
        SW7                               :   IN    std_logic;
        SW8                               :   IN    std_logic;
        SW9                               :   IN    std_logic;
        SW10                              :   IN    std_logic;
        SW15                              :   IN    std_logic;
        reset_1                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        CLK_1                             :   OUT   std_logic;
        Sync_n                            :   OUT   std_logic;
        Blank_n                           :   OUT   std_logic;
        HEX0_O                            :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        HEX1_O                            :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        HEX2_O                            :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        HEX3_O                            :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        Phase_A                           :   OUT   std_logic;
        Phase_A_1                         :   OUT   std_logic;
        Phase_B                           :   OUT   std_logic;
        Phase_B_1                         :   OUT   std_logic;
        Phase_C                           :   OUT   std_logic;
        Phase_C_1                         :   OUT   std_logic;
        PhaseB_Analog                     :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        PhaseC_Tri_Analog                 :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        LEDG0                             :   OUT   std_logic;
        LEDG1                             :   OUT   std_logic;
        LEDG2                             :   OUT   std_logic;
        HEX5                              :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        HEX4                              :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        PhaseA_Analog                     :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        Sample_Pulse                      :   OUT   std_logic;
        PhaseA_PWM                        :   OUT   std_logic;
        PhaseB_PWM                        :   OUT   std_logic;
        PhaseC_PWM                        :   OUT   std_logic
        );
END Sines;


ARCHITECTURE rtl OF Sines IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT DAC_Control
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          CLK_1                           :   OUT   std_logic;
          Sync_n                          :   OUT   std_logic;
          Blank_n                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT HEX0
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Push_0                          :   IN    std_logic;
          HEX0_1                          :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          Out2                            :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En15
          );
  END COMPONENT;

  COMPONENT HEX1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Push_1                          :   IN    std_logic;
          HEX1_1                          :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          Out2                            :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En15
          );
  END COMPONENT;

  COMPONENT HEX2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Push_2                          :   IN    std_logic;
          HEX2_1                          :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          out2                            :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En15
          );
  END COMPONENT;

  COMPONENT HEX3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Push_3                          :   IN    std_logic;
          HEX3_1                          :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          Out2                            :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En15
          );
  END COMPONENT;

  COMPONENT aPA_Save
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          MulNumber                       :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En15
          Enable                          :   IN    std_logic;
          MulResult                       :   OUT   std_logic_vector(21 DOWNTO 0)  -- sfix22_En15
          );
  END COMPONENT;

  COMPONENT Subsystem11_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Subsystem12_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Subsystem13_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DAC_Control
    USE ENTITY work.DAC_Control(rtl);

  FOR ALL : HEX0
    USE ENTITY work.HEX0(rtl);

  FOR ALL : HEX1
    USE ENTITY work.HEX1(rtl);

  FOR ALL : HEX2
    USE ENTITY work.HEX2(rtl);

  FOR ALL : HEX3
    USE ENTITY work.HEX3(rtl);

  FOR ALL : aPA_Save
    USE ENTITY work.aPA_Save(rtl);

  FOR ALL : Subsystem11_block3
    USE ENTITY work.Subsystem11_block3(rtl);

  FOR ALL : Subsystem12_block3
    USE ENTITY work.Subsystem12_block3(rtl);

  FOR ALL : Subsystem13_block3
    USE ENTITY work.Subsystem13_block3(rtl);

  -- Constants
  CONSTANT nc                             : vector_of_signed16(0 TO 399) := 
    (to_signed(16#2000#, 16), to_signed(16#2740#, 16), to_signed(16#2E40#, 16), to_signed(16#3480#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3D40#, 16), to_signed(16#3F40#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3B00#, 16), to_signed(16#3680#, 16), to_signed(16#3080#, 16),
     to_signed(16#29C0#, 16), to_signed(16#2280#, 16), to_signed(16#1B00#, 16), to_signed(16#13C0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#07C0#, 16), to_signed(16#0380#, 16), to_signed(16#0100#, 16),
     to_signed(16#0000#, 16), to_signed(16#0100#, 16), to_signed(16#0380#, 16), to_signed(16#07C0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#13C0#, 16), to_signed(16#1B00#, 16), to_signed(16#2280#, 16),
     to_signed(16#29C0#, 16), to_signed(16#3080#, 16), to_signed(16#3680#, 16), to_signed(16#3B00#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F40#, 16), to_signed(16#3D40#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3480#, 16), to_signed(16#2E40#, 16), to_signed(16#2740#, 16),
     to_signed(16#2000#, 16), to_signed(16#1880#, 16), to_signed(16#1180#, 16), to_signed(16#0B40#, 16),
     to_signed(16#0600#, 16), to_signed(16#0280#, 16), to_signed(16#0080#, 16), to_signed(16#0000#, 16),
     to_signed(16#0180#, 16), to_signed(16#04C0#, 16), to_signed(16#0940#, 16), to_signed(16#0F40#, 16),
     to_signed(16#1600#, 16), to_signed(16#1D40#, 16), to_signed(16#24C0#, 16), to_signed(16#2C00#, 16),
     to_signed(16#3280#, 16), to_signed(16#3800#, 16), to_signed(16#3C40#, 16), to_signed(16#3EC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3EC0#, 16), to_signed(16#3C40#, 16), to_signed(16#3800#, 16),
     to_signed(16#3280#, 16), to_signed(16#2C00#, 16), to_signed(16#24C0#, 16), to_signed(16#1D40#, 16),
     to_signed(16#1600#, 16), to_signed(16#0F40#, 16), to_signed(16#0940#, 16), to_signed(16#04C0#, 16),
     to_signed(16#0180#, 16), to_signed(16#0000#, 16), to_signed(16#0080#, 16), to_signed(16#0280#, 16),
     to_signed(16#0600#, 16), to_signed(16#0B40#, 16), to_signed(16#1180#, 16), to_signed(16#1880#, 16),
     to_signed(16#1FC0#, 16), to_signed(16#2740#, 16), to_signed(16#2E40#, 16), to_signed(16#3480#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3D40#, 16), to_signed(16#3F40#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3B00#, 16), to_signed(16#3680#, 16), to_signed(16#3080#, 16),
     to_signed(16#29C0#, 16), to_signed(16#2280#, 16), to_signed(16#1B00#, 16), to_signed(16#13C0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#07C0#, 16), to_signed(16#0380#, 16), to_signed(16#0100#, 16),
     to_signed(16#0000#, 16), to_signed(16#0100#, 16), to_signed(16#0380#, 16), to_signed(16#07C0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#13C0#, 16), to_signed(16#1B00#, 16), to_signed(16#2280#, 16),
     to_signed(16#29C0#, 16), to_signed(16#3080#, 16), to_signed(16#3680#, 16), to_signed(16#3B00#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F40#, 16), to_signed(16#3D40#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3480#, 16), to_signed(16#2E40#, 16), to_signed(16#2740#, 16),
     to_signed(16#2000#, 16), to_signed(16#1880#, 16), to_signed(16#1180#, 16), to_signed(16#0B40#, 16),
     to_signed(16#0600#, 16), to_signed(16#0280#, 16), to_signed(16#0080#, 16), to_signed(16#0000#, 16),
     to_signed(16#0180#, 16), to_signed(16#04C0#, 16), to_signed(16#0940#, 16), to_signed(16#0F40#, 16),
     to_signed(16#1600#, 16), to_signed(16#1D40#, 16), to_signed(16#24C0#, 16), to_signed(16#2C00#, 16),
     to_signed(16#3280#, 16), to_signed(16#3800#, 16), to_signed(16#3C40#, 16), to_signed(16#3EC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3EC0#, 16), to_signed(16#3C40#, 16), to_signed(16#3800#, 16),
     to_signed(16#3280#, 16), to_signed(16#2C00#, 16), to_signed(16#24C0#, 16), to_signed(16#1D40#, 16),
     to_signed(16#1600#, 16), to_signed(16#0F40#, 16), to_signed(16#0940#, 16), to_signed(16#04C0#, 16),
     to_signed(16#0180#, 16), to_signed(16#0000#, 16), to_signed(16#0080#, 16), to_signed(16#0280#, 16),
     to_signed(16#0600#, 16), to_signed(16#0B40#, 16), to_signed(16#1180#, 16), to_signed(16#1880#, 16),
     to_signed(16#1FC0#, 16), to_signed(16#2740#, 16), to_signed(16#2E40#, 16), to_signed(16#3480#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3D40#, 16), to_signed(16#3F40#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3B00#, 16), to_signed(16#3680#, 16), to_signed(16#3080#, 16),
     to_signed(16#29C0#, 16), to_signed(16#2280#, 16), to_signed(16#1B00#, 16), to_signed(16#13C0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#07C0#, 16), to_signed(16#0380#, 16), to_signed(16#0100#, 16),
     to_signed(16#0000#, 16), to_signed(16#0100#, 16), to_signed(16#0380#, 16), to_signed(16#07C0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#13C0#, 16), to_signed(16#1B00#, 16), to_signed(16#2280#, 16),
     to_signed(16#29C0#, 16), to_signed(16#3080#, 16), to_signed(16#3680#, 16), to_signed(16#3B00#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F40#, 16), to_signed(16#3D40#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3480#, 16), to_signed(16#2E40#, 16), to_signed(16#2740#, 16),
     to_signed(16#1FC0#, 16), to_signed(16#1880#, 16), to_signed(16#1180#, 16), to_signed(16#0B40#, 16),
     to_signed(16#0600#, 16), to_signed(16#0280#, 16), to_signed(16#0080#, 16), to_signed(16#0000#, 16),
     to_signed(16#0180#, 16), to_signed(16#04C0#, 16), to_signed(16#0940#, 16), to_signed(16#0F40#, 16),
     to_signed(16#1600#, 16), to_signed(16#1D40#, 16), to_signed(16#24C0#, 16), to_signed(16#2C00#, 16),
     to_signed(16#3280#, 16), to_signed(16#3800#, 16), to_signed(16#3C40#, 16), to_signed(16#3EC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3EC0#, 16), to_signed(16#3C40#, 16), to_signed(16#3800#, 16),
     to_signed(16#3280#, 16), to_signed(16#2C00#, 16), to_signed(16#24C0#, 16), to_signed(16#1D40#, 16),
     to_signed(16#1600#, 16), to_signed(16#0F40#, 16), to_signed(16#0940#, 16), to_signed(16#04C0#, 16),
     to_signed(16#0180#, 16), to_signed(16#0000#, 16), to_signed(16#0080#, 16), to_signed(16#0280#, 16),
     to_signed(16#0600#, 16), to_signed(16#0B40#, 16), to_signed(16#1180#, 16), to_signed(16#1880#, 16),
     to_signed(16#1FC0#, 16), to_signed(16#2740#, 16), to_signed(16#2E40#, 16), to_signed(16#3480#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3D40#, 16), to_signed(16#3F40#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3B00#, 16), to_signed(16#3680#, 16), to_signed(16#3080#, 16),
     to_signed(16#29C0#, 16), to_signed(16#2280#, 16), to_signed(16#1B00#, 16), to_signed(16#13C0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#07C0#, 16), to_signed(16#0380#, 16), to_signed(16#0100#, 16),
     to_signed(16#0000#, 16), to_signed(16#0100#, 16), to_signed(16#0380#, 16), to_signed(16#07C0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#13C0#, 16), to_signed(16#1B00#, 16), to_signed(16#2280#, 16),
     to_signed(16#29C0#, 16), to_signed(16#3080#, 16), to_signed(16#3680#, 16), to_signed(16#3B00#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F40#, 16), to_signed(16#3D40#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3480#, 16), to_signed(16#2E40#, 16), to_signed(16#2740#, 16),
     to_signed(16#1FC0#, 16), to_signed(16#1880#, 16), to_signed(16#1180#, 16), to_signed(16#0B40#, 16),
     to_signed(16#0600#, 16), to_signed(16#0280#, 16), to_signed(16#0080#, 16), to_signed(16#0000#, 16),
     to_signed(16#0180#, 16), to_signed(16#04C0#, 16), to_signed(16#0940#, 16), to_signed(16#0F40#, 16),
     to_signed(16#1600#, 16), to_signed(16#1D40#, 16), to_signed(16#24C0#, 16), to_signed(16#2C00#, 16),
     to_signed(16#3280#, 16), to_signed(16#3800#, 16), to_signed(16#3C40#, 16), to_signed(16#3EC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3EC0#, 16), to_signed(16#3C40#, 16), to_signed(16#3800#, 16),
     to_signed(16#3280#, 16), to_signed(16#2C00#, 16), to_signed(16#24C0#, 16), to_signed(16#1D40#, 16),
     to_signed(16#1600#, 16), to_signed(16#0F40#, 16), to_signed(16#0940#, 16), to_signed(16#04C0#, 16),
     to_signed(16#0180#, 16), to_signed(16#0000#, 16), to_signed(16#0080#, 16), to_signed(16#0280#, 16),
     to_signed(16#0600#, 16), to_signed(16#0B40#, 16), to_signed(16#1180#, 16), to_signed(16#1880#, 16),
     to_signed(16#1FC0#, 16), to_signed(16#2740#, 16), to_signed(16#2E40#, 16), to_signed(16#3480#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3D40#, 16), to_signed(16#3F40#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3B00#, 16), to_signed(16#3680#, 16), to_signed(16#3080#, 16),
     to_signed(16#29C0#, 16), to_signed(16#2280#, 16), to_signed(16#1B00#, 16), to_signed(16#13C0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#07C0#, 16), to_signed(16#0380#, 16), to_signed(16#0100#, 16),
     to_signed(16#0000#, 16), to_signed(16#0100#, 16), to_signed(16#0380#, 16), to_signed(16#07C0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#13C0#, 16), to_signed(16#1B00#, 16), to_signed(16#2280#, 16),
     to_signed(16#29C0#, 16), to_signed(16#3080#, 16), to_signed(16#3680#, 16), to_signed(16#3B00#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F40#, 16), to_signed(16#3D40#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3480#, 16), to_signed(16#2E40#, 16), to_signed(16#2740#, 16),
     to_signed(16#1FC0#, 16), to_signed(16#1880#, 16), to_signed(16#1180#, 16), to_signed(16#0B40#, 16),
     to_signed(16#0600#, 16), to_signed(16#0280#, 16), to_signed(16#0080#, 16), to_signed(16#0000#, 16),
     to_signed(16#0180#, 16), to_signed(16#04C0#, 16), to_signed(16#0940#, 16), to_signed(16#0F40#, 16),
     to_signed(16#1600#, 16), to_signed(16#1D40#, 16), to_signed(16#24C0#, 16), to_signed(16#2C00#, 16),
     to_signed(16#3280#, 16), to_signed(16#3800#, 16), to_signed(16#3C40#, 16), to_signed(16#3EC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3EC0#, 16), to_signed(16#3C40#, 16), to_signed(16#3800#, 16),
     to_signed(16#3280#, 16), to_signed(16#2C00#, 16), to_signed(16#24C0#, 16), to_signed(16#1D40#, 16),
     to_signed(16#1600#, 16), to_signed(16#0F40#, 16), to_signed(16#0940#, 16), to_signed(16#04C0#, 16),
     to_signed(16#0180#, 16), to_signed(16#0000#, 16), to_signed(16#0080#, 16), to_signed(16#0280#, 16),
     to_signed(16#0600#, 16), to_signed(16#0B40#, 16), to_signed(16#1180#, 16), to_signed(16#1880#, 16));  -- sfix16 [400]
  CONSTANT nc_2                           : vector_of_signed16(0 TO 399) := 
    (to_signed(16#2000#, 16), to_signed(16#2440#, 16), to_signed(16#28C0#, 16), to_signed(16#2D00#, 16),
     to_signed(16#3100#, 16), to_signed(16#3480#, 16), to_signed(16#37C0#, 16), to_signed(16#3A80#, 16),
     to_signed(16#3CC0#, 16), to_signed(16#3E40#, 16), to_signed(16#3F40#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3F80#, 16), to_signed(16#3E80#, 16), to_signed(16#3D40#, 16), to_signed(16#3B00#, 16),
     to_signed(16#3880#, 16), to_signed(16#3540#, 16), to_signed(16#31C0#, 16), to_signed(16#2E00#, 16),
     to_signed(16#29C0#, 16), to_signed(16#2540#, 16), to_signed(16#2100#, 16), to_signed(16#1C80#, 16),
     to_signed(16#1800#, 16), to_signed(16#13C0#, 16), to_signed(16#0FC0#, 16), to_signed(16#0C00#, 16),
     to_signed(16#08C0#, 16), to_signed(16#05C0#, 16), to_signed(16#0380#, 16), to_signed(16#01C0#, 16),
     to_signed(16#0080#, 16), to_signed(16#0000#, 16), to_signed(16#0040#, 16), to_signed(16#0100#, 16),
     to_signed(16#0240#, 16), to_signed(16#0440#, 16), to_signed(16#06C0#, 16), to_signed(16#09C0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#1100#, 16), to_signed(16#1500#, 16), to_signed(16#1980#, 16),
     to_signed(16#1DC0#, 16), to_signed(16#2280#, 16), to_signed(16#26C0#, 16), to_signed(16#2B40#, 16),
     to_signed(16#2F40#, 16), to_signed(16#3300#, 16), to_signed(16#3680#, 16), to_signed(16#3940#, 16),
     to_signed(16#3BC0#, 16), to_signed(16#3DC0#, 16), to_signed(16#3F00#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3F00#, 16), to_signed(16#3DC0#, 16), to_signed(16#3C00#, 16),
     to_signed(16#39C0#, 16), to_signed(16#36C0#, 16), to_signed(16#3380#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2B80#, 16), to_signed(16#2740#, 16), to_signed(16#22C0#, 16), to_signed(16#1E40#, 16),
     to_signed(16#1A00#, 16), to_signed(16#1580#, 16), to_signed(16#1180#, 16), to_signed(16#0D80#, 16),
     to_signed(16#0A00#, 16), to_signed(16#0700#, 16), to_signed(16#0480#, 16), to_signed(16#0280#, 16),
     to_signed(16#0100#, 16), to_signed(16#0040#, 16), to_signed(16#0000#, 16), to_signed(16#0080#, 16),
     to_signed(16#0180#, 16), to_signed(16#0340#, 16), to_signed(16#0580#, 16), to_signed(16#0840#, 16),
     to_signed(16#0B80#, 16), to_signed(16#0F40#, 16), to_signed(16#1340#, 16), to_signed(16#1780#, 16),
     to_signed(16#1C00#, 16), to_signed(16#2080#, 16), to_signed(16#24C0#, 16), to_signed(16#2940#, 16),
     to_signed(16#2D80#, 16), to_signed(16#3180#, 16), to_signed(16#3500#, 16), to_signed(16#3800#, 16),
     to_signed(16#3AC0#, 16), to_signed(16#3D00#, 16), to_signed(16#3E80#, 16), to_signed(16#3F80#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3F80#, 16), to_signed(16#3E80#, 16), to_signed(16#3D00#, 16),
     to_signed(16#3AC0#, 16), to_signed(16#3800#, 16), to_signed(16#3500#, 16), to_signed(16#3180#, 16),
     to_signed(16#2D80#, 16), to_signed(16#2940#, 16), to_signed(16#24C0#, 16), to_signed(16#2080#, 16),
     to_signed(16#1C00#, 16), to_signed(16#1780#, 16), to_signed(16#1340#, 16), to_signed(16#0F40#, 16),
     to_signed(16#0B80#, 16), to_signed(16#0840#, 16), to_signed(16#0580#, 16), to_signed(16#0340#, 16),
     to_signed(16#0180#, 16), to_signed(16#0080#, 16), to_signed(16#0000#, 16), to_signed(16#0040#, 16),
     to_signed(16#0100#, 16), to_signed(16#0280#, 16), to_signed(16#0480#, 16), to_signed(16#0700#, 16),
     to_signed(16#0A00#, 16), to_signed(16#0D80#, 16), to_signed(16#1180#, 16), to_signed(16#1580#, 16),
     to_signed(16#1A00#, 16), to_signed(16#1E40#, 16), to_signed(16#22C0#, 16), to_signed(16#2740#, 16),
     to_signed(16#2B80#, 16), to_signed(16#2FC0#, 16), to_signed(16#3380#, 16), to_signed(16#36C0#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3C00#, 16), to_signed(16#3DC0#, 16), to_signed(16#3F00#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F00#, 16), to_signed(16#3DC0#, 16),
     to_signed(16#3BC0#, 16), to_signed(16#3940#, 16), to_signed(16#3680#, 16), to_signed(16#3300#, 16),
     to_signed(16#2F40#, 16), to_signed(16#2B40#, 16), to_signed(16#26C0#, 16), to_signed(16#2280#, 16),
     to_signed(16#1DC0#, 16), to_signed(16#1980#, 16), to_signed(16#1500#, 16), to_signed(16#1100#, 16),
     to_signed(16#0D40#, 16), to_signed(16#09C0#, 16), to_signed(16#06C0#, 16), to_signed(16#0440#, 16),
     to_signed(16#0240#, 16), to_signed(16#0100#, 16), to_signed(16#0040#, 16), to_signed(16#0000#, 16),
     to_signed(16#0080#, 16), to_signed(16#01C0#, 16), to_signed(16#0380#, 16), to_signed(16#05C0#, 16),
     to_signed(16#08C0#, 16), to_signed(16#0C00#, 16), to_signed(16#0FC0#, 16), to_signed(16#13C0#, 16),
     to_signed(16#1800#, 16), to_signed(16#1C80#, 16), to_signed(16#2100#, 16), to_signed(16#2540#, 16),
     to_signed(16#29C0#, 16), to_signed(16#2E00#, 16), to_signed(16#31C0#, 16), to_signed(16#3540#, 16),
     to_signed(16#3880#, 16), to_signed(16#3B00#, 16), to_signed(16#3D40#, 16), to_signed(16#3E80#, 16),
     to_signed(16#3F80#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F40#, 16), to_signed(16#3E40#, 16),
     to_signed(16#3CC0#, 16), to_signed(16#3A80#, 16), to_signed(16#37C0#, 16), to_signed(16#3480#, 16),
     to_signed(16#3100#, 16), to_signed(16#2D00#, 16), to_signed(16#28C0#, 16), to_signed(16#2440#, 16),
     to_signed(16#2000#, 16), to_signed(16#1B80#, 16), to_signed(16#1700#, 16), to_signed(16#12C0#, 16),
     to_signed(16#0EC0#, 16), to_signed(16#0B40#, 16), to_signed(16#0800#, 16), to_signed(16#0540#, 16),
     to_signed(16#0300#, 16), to_signed(16#0180#, 16), to_signed(16#0080#, 16), to_signed(16#0000#, 16),
     to_signed(16#0040#, 16), to_signed(16#0140#, 16), to_signed(16#0280#, 16), to_signed(16#04C0#, 16),
     to_signed(16#0740#, 16), to_signed(16#0A80#, 16), to_signed(16#0E00#, 16), to_signed(16#11C0#, 16),
     to_signed(16#1600#, 16), to_signed(16#1A80#, 16), to_signed(16#1EC0#, 16), to_signed(16#2340#, 16),
     to_signed(16#27C0#, 16), to_signed(16#2C00#, 16), to_signed(16#3000#, 16), to_signed(16#33C0#, 16),
     to_signed(16#3700#, 16), to_signed(16#3A00#, 16), to_signed(16#3C40#, 16), to_signed(16#3E00#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F80#, 16), to_signed(16#3EC0#, 16),
     to_signed(16#3D80#, 16), to_signed(16#3B80#, 16), to_signed(16#3900#, 16), to_signed(16#3600#, 16),
     to_signed(16#3280#, 16), to_signed(16#2EC0#, 16), to_signed(16#2AC0#, 16), to_signed(16#2640#, 16),
     to_signed(16#2200#, 16), to_signed(16#1D40#, 16), to_signed(16#1900#, 16), to_signed(16#1480#, 16),
     to_signed(16#1080#, 16), to_signed(16#0CC0#, 16), to_signed(16#0940#, 16), to_signed(16#0680#, 16),
     to_signed(16#0400#, 16), to_signed(16#0200#, 16), to_signed(16#00C0#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#00C0#, 16), to_signed(16#0200#, 16), to_signed(16#03C0#, 16),
     to_signed(16#0600#, 16), to_signed(16#0900#, 16), to_signed(16#0C40#, 16), to_signed(16#1000#, 16),
     to_signed(16#1440#, 16), to_signed(16#1880#, 16), to_signed(16#1D00#, 16), to_signed(16#2180#, 16),
     to_signed(16#25C0#, 16), to_signed(16#2A40#, 16), to_signed(16#2E40#, 16), to_signed(16#3240#, 16),
     to_signed(16#35C0#, 16), to_signed(16#38C0#, 16), to_signed(16#3B40#, 16), to_signed(16#3D40#, 16),
     to_signed(16#3EC0#, 16), to_signed(16#3F80#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F40#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3C80#, 16), to_signed(16#3A40#, 16), to_signed(16#3780#, 16),
     to_signed(16#3440#, 16), to_signed(16#3080#, 16), to_signed(16#2C80#, 16), to_signed(16#2840#, 16),
     to_signed(16#23C0#, 16), to_signed(16#1F40#, 16), to_signed(16#1B00#, 16), to_signed(16#1680#, 16),
     to_signed(16#1240#, 16), to_signed(16#0E40#, 16), to_signed(16#0AC0#, 16), to_signed(16#07C0#, 16),
     to_signed(16#0500#, 16), to_signed(16#02C0#, 16), to_signed(16#0140#, 16), to_signed(16#0040#, 16),
     to_signed(16#0000#, 16), to_signed(16#0040#, 16), to_signed(16#0140#, 16), to_signed(16#02C0#, 16),
     to_signed(16#0500#, 16), to_signed(16#07C0#, 16), to_signed(16#0AC0#, 16), to_signed(16#0E40#, 16),
     to_signed(16#1240#, 16), to_signed(16#1680#, 16), to_signed(16#1B00#, 16), to_signed(16#1F40#, 16),
     to_signed(16#23C0#, 16), to_signed(16#2840#, 16), to_signed(16#2C80#, 16), to_signed(16#3080#, 16),
     to_signed(16#3440#, 16), to_signed(16#3780#, 16), to_signed(16#3A40#, 16), to_signed(16#3C80#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3F40#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F80#, 16),
     to_signed(16#3EC0#, 16), to_signed(16#3D40#, 16), to_signed(16#3B40#, 16), to_signed(16#38C0#, 16),
     to_signed(16#35C0#, 16), to_signed(16#3240#, 16), to_signed(16#2E40#, 16), to_signed(16#2A40#, 16),
     to_signed(16#25C0#, 16), to_signed(16#2180#, 16), to_signed(16#1D00#, 16), to_signed(16#1880#, 16),
     to_signed(16#1440#, 16), to_signed(16#1000#, 16), to_signed(16#0C40#, 16), to_signed(16#0900#, 16),
     to_signed(16#0600#, 16), to_signed(16#03C0#, 16), to_signed(16#0200#, 16), to_signed(16#00C0#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#00C0#, 16), to_signed(16#0200#, 16),
     to_signed(16#0400#, 16), to_signed(16#0680#, 16), to_signed(16#0940#, 16), to_signed(16#0CC0#, 16),
     to_signed(16#1080#, 16), to_signed(16#1480#, 16), to_signed(16#1900#, 16), to_signed(16#1D40#, 16),
     to_signed(16#2200#, 16), to_signed(16#2640#, 16), to_signed(16#2AC0#, 16), to_signed(16#2EC0#, 16),
     to_signed(16#3280#, 16), to_signed(16#3600#, 16), to_signed(16#3900#, 16), to_signed(16#3B80#, 16),
     to_signed(16#3D80#, 16), to_signed(16#3EC0#, 16), to_signed(16#3F80#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3E00#, 16), to_signed(16#3C40#, 16), to_signed(16#3A00#, 16),
     to_signed(16#3700#, 16), to_signed(16#33C0#, 16), to_signed(16#3000#, 16), to_signed(16#2C00#, 16),
     to_signed(16#27C0#, 16), to_signed(16#2340#, 16), to_signed(16#1EC0#, 16), to_signed(16#1A80#, 16),
     to_signed(16#1600#, 16), to_signed(16#11C0#, 16), to_signed(16#0E00#, 16), to_signed(16#0A80#, 16),
     to_signed(16#0740#, 16), to_signed(16#04C0#, 16), to_signed(16#0280#, 16), to_signed(16#0140#, 16),
     to_signed(16#0040#, 16), to_signed(16#0000#, 16), to_signed(16#0080#, 16), to_signed(16#0180#, 16),
     to_signed(16#0300#, 16), to_signed(16#0540#, 16), to_signed(16#0800#, 16), to_signed(16#0B40#, 16),
     to_signed(16#0EC0#, 16), to_signed(16#12C0#, 16), to_signed(16#1700#, 16), to_signed(16#1B80#, 16));  -- sfix16 [400]
  CONSTANT nc_4                           : vector_of_signed16(0 TO 399) := 
    (to_signed(16#2000#, 16), to_signed(16#2180#, 16), to_signed(16#22C0#, 16), to_signed(16#2440#, 16),
     to_signed(16#25C0#, 16), to_signed(16#2740#, 16), to_signed(16#28C0#, 16), to_signed(16#2A40#, 16),
     to_signed(16#2B80#, 16), to_signed(16#2D00#, 16), to_signed(16#2E40#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#3100#, 16), to_signed(16#3240#, 16), to_signed(16#3380#, 16), to_signed(16#3480#, 16),
     to_signed(16#35C0#, 16), to_signed(16#36C0#, 16), to_signed(16#37C0#, 16), to_signed(16#38C0#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3A80#, 16), to_signed(16#3B40#, 16), to_signed(16#3C00#, 16),
     to_signed(16#3CC0#, 16), to_signed(16#3D40#, 16), to_signed(16#3DC0#, 16), to_signed(16#3E40#, 16),
     to_signed(16#3EC0#, 16), to_signed(16#3F00#, 16), to_signed(16#3F40#, 16), to_signed(16#3F80#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3F80#, 16), to_signed(16#3F40#, 16), to_signed(16#3F00#, 16), to_signed(16#3E80#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3DC0#, 16), to_signed(16#3D40#, 16), to_signed(16#3C80#, 16),
     to_signed(16#3BC0#, 16), to_signed(16#3B00#, 16), to_signed(16#3A40#, 16), to_signed(16#3940#, 16),
     to_signed(16#3880#, 16), to_signed(16#3780#, 16), to_signed(16#3680#, 16), to_signed(16#3540#, 16),
     to_signed(16#3440#, 16), to_signed(16#3300#, 16), to_signed(16#31C0#, 16), to_signed(16#3080#, 16),
     to_signed(16#2F40#, 16), to_signed(16#2E00#, 16), to_signed(16#2C80#, 16), to_signed(16#2B40#, 16),
     to_signed(16#29C0#, 16), to_signed(16#2840#, 16), to_signed(16#26C0#, 16), to_signed(16#2540#, 16),
     to_signed(16#23C0#, 16), to_signed(16#2280#, 16), to_signed(16#2100#, 16), to_signed(16#1F40#, 16),
     to_signed(16#1DC0#, 16), to_signed(16#1C80#, 16), to_signed(16#1B00#, 16), to_signed(16#1980#, 16),
     to_signed(16#1800#, 16), to_signed(16#1680#, 16), to_signed(16#1500#, 16), to_signed(16#13C0#, 16),
     to_signed(16#1240#, 16), to_signed(16#1100#, 16), to_signed(16#0FC0#, 16), to_signed(16#0E40#, 16),
     to_signed(16#0D40#, 16), to_signed(16#0C00#, 16), to_signed(16#0AC0#, 16), to_signed(16#09C0#, 16),
     to_signed(16#08C0#, 16), to_signed(16#07C0#, 16), to_signed(16#06C0#, 16), to_signed(16#05C0#, 16),
     to_signed(16#0500#, 16), to_signed(16#0440#, 16), to_signed(16#0380#, 16), to_signed(16#02C0#, 16),
     to_signed(16#0240#, 16), to_signed(16#01C0#, 16), to_signed(16#0140#, 16), to_signed(16#0100#, 16),
     to_signed(16#0080#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16),
     to_signed(16#0080#, 16), to_signed(16#0100#, 16), to_signed(16#0140#, 16), to_signed(16#01C0#, 16),
     to_signed(16#0240#, 16), to_signed(16#02C0#, 16), to_signed(16#0380#, 16), to_signed(16#0440#, 16),
     to_signed(16#0500#, 16), to_signed(16#05C0#, 16), to_signed(16#06C0#, 16), to_signed(16#07C0#, 16),
     to_signed(16#08C0#, 16), to_signed(16#09C0#, 16), to_signed(16#0AC0#, 16), to_signed(16#0C00#, 16),
     to_signed(16#0D40#, 16), to_signed(16#0E40#, 16), to_signed(16#0FC0#, 16), to_signed(16#1100#, 16),
     to_signed(16#1240#, 16), to_signed(16#13C0#, 16), to_signed(16#1500#, 16), to_signed(16#1680#, 16),
     to_signed(16#1800#, 16), to_signed(16#1980#, 16), to_signed(16#1B00#, 16), to_signed(16#1C80#, 16),
     to_signed(16#1DC0#, 16), to_signed(16#1F40#, 16), to_signed(16#2100#, 16), to_signed(16#2280#, 16),
     to_signed(16#23C0#, 16), to_signed(16#2540#, 16), to_signed(16#26C0#, 16), to_signed(16#2840#, 16),
     to_signed(16#29C0#, 16), to_signed(16#2B40#, 16), to_signed(16#2C80#, 16), to_signed(16#2E00#, 16),
     to_signed(16#2F40#, 16), to_signed(16#3080#, 16), to_signed(16#31C0#, 16), to_signed(16#3300#, 16),
     to_signed(16#3440#, 16), to_signed(16#3540#, 16), to_signed(16#3680#, 16), to_signed(16#3780#, 16),
     to_signed(16#3880#, 16), to_signed(16#3940#, 16), to_signed(16#3A40#, 16), to_signed(16#3B00#, 16),
     to_signed(16#3BC0#, 16), to_signed(16#3C80#, 16), to_signed(16#3D40#, 16), to_signed(16#3DC0#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3E80#, 16), to_signed(16#3F00#, 16), to_signed(16#3F40#, 16),
     to_signed(16#3F80#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3F80#, 16), to_signed(16#3F40#, 16), to_signed(16#3F00#, 16),
     to_signed(16#3EC0#, 16), to_signed(16#3E40#, 16), to_signed(16#3DC0#, 16), to_signed(16#3D40#, 16),
     to_signed(16#3CC0#, 16), to_signed(16#3C00#, 16), to_signed(16#3B40#, 16), to_signed(16#3A80#, 16),
     to_signed(16#39C0#, 16), to_signed(16#38C0#, 16), to_signed(16#37C0#, 16), to_signed(16#36C0#, 16),
     to_signed(16#35C0#, 16), to_signed(16#3480#, 16), to_signed(16#3380#, 16), to_signed(16#3240#, 16),
     to_signed(16#3100#, 16), to_signed(16#2FC0#, 16), to_signed(16#2E40#, 16), to_signed(16#2D00#, 16),
     to_signed(16#2B80#, 16), to_signed(16#2A40#, 16), to_signed(16#28C0#, 16), to_signed(16#2740#, 16),
     to_signed(16#25C0#, 16), to_signed(16#2440#, 16), to_signed(16#22C0#, 16), to_signed(16#2180#, 16),
     to_signed(16#2000#, 16), to_signed(16#1E40#, 16), to_signed(16#1D00#, 16), to_signed(16#1B80#, 16),
     to_signed(16#1A00#, 16), to_signed(16#1880#, 16), to_signed(16#1700#, 16), to_signed(16#1580#, 16),
     to_signed(16#1440#, 16), to_signed(16#12C0#, 16), to_signed(16#1180#, 16), to_signed(16#1000#, 16),
     to_signed(16#0EC0#, 16), to_signed(16#0D80#, 16), to_signed(16#0C40#, 16), to_signed(16#0B40#, 16),
     to_signed(16#0A00#, 16), to_signed(16#0900#, 16), to_signed(16#0800#, 16), to_signed(16#0700#, 16),
     to_signed(16#0600#, 16), to_signed(16#0540#, 16), to_signed(16#0480#, 16), to_signed(16#03C0#, 16),
     to_signed(16#0300#, 16), to_signed(16#0280#, 16), to_signed(16#0200#, 16), to_signed(16#0180#, 16),
     to_signed(16#0100#, 16), to_signed(16#00C0#, 16), to_signed(16#0080#, 16), to_signed(16#0040#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0040#, 16), to_signed(16#0080#, 16), to_signed(16#00C0#, 16), to_signed(16#0140#, 16),
     to_signed(16#0180#, 16), to_signed(16#0200#, 16), to_signed(16#0280#, 16), to_signed(16#0340#, 16),
     to_signed(16#0400#, 16), to_signed(16#04C0#, 16), to_signed(16#0580#, 16), to_signed(16#0680#, 16),
     to_signed(16#0740#, 16), to_signed(16#0840#, 16), to_signed(16#0940#, 16), to_signed(16#0A80#, 16),
     to_signed(16#0B80#, 16), to_signed(16#0CC0#, 16), to_signed(16#0E00#, 16), to_signed(16#0F40#, 16),
     to_signed(16#1080#, 16), to_signed(16#11C0#, 16), to_signed(16#1340#, 16), to_signed(16#1480#, 16),
     to_signed(16#1600#, 16), to_signed(16#1780#, 16), to_signed(16#1900#, 16), to_signed(16#1A80#, 16),
     to_signed(16#1C00#, 16), to_signed(16#1D40#, 16), to_signed(16#1EC0#, 16), to_signed(16#2080#, 16),
     to_signed(16#2200#, 16), to_signed(16#2340#, 16), to_signed(16#24C0#, 16), to_signed(16#2640#, 16),
     to_signed(16#27C0#, 16), to_signed(16#2940#, 16), to_signed(16#2AC0#, 16), to_signed(16#2C00#, 16),
     to_signed(16#2D80#, 16), to_signed(16#2EC0#, 16), to_signed(16#3000#, 16), to_signed(16#3180#, 16),
     to_signed(16#3280#, 16), to_signed(16#33C0#, 16), to_signed(16#3500#, 16), to_signed(16#3600#, 16),
     to_signed(16#3700#, 16), to_signed(16#3800#, 16), to_signed(16#3900#, 16), to_signed(16#3A00#, 16),
     to_signed(16#3AC0#, 16), to_signed(16#3B80#, 16), to_signed(16#3C40#, 16), to_signed(16#3D00#, 16),
     to_signed(16#3D80#, 16), to_signed(16#3E00#, 16), to_signed(16#3E80#, 16), to_signed(16#3EC0#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3EC0#, 16), to_signed(16#3E80#, 16), to_signed(16#3E00#, 16),
     to_signed(16#3D80#, 16), to_signed(16#3D00#, 16), to_signed(16#3C40#, 16), to_signed(16#3B80#, 16),
     to_signed(16#3AC0#, 16), to_signed(16#3A00#, 16), to_signed(16#3900#, 16), to_signed(16#3800#, 16),
     to_signed(16#3700#, 16), to_signed(16#3600#, 16), to_signed(16#3500#, 16), to_signed(16#33C0#, 16),
     to_signed(16#3280#, 16), to_signed(16#3180#, 16), to_signed(16#3000#, 16), to_signed(16#2EC0#, 16),
     to_signed(16#2D80#, 16), to_signed(16#2C00#, 16), to_signed(16#2AC0#, 16), to_signed(16#2940#, 16),
     to_signed(16#27C0#, 16), to_signed(16#2640#, 16), to_signed(16#24C0#, 16), to_signed(16#2340#, 16),
     to_signed(16#2200#, 16), to_signed(16#2080#, 16), to_signed(16#1EC0#, 16), to_signed(16#1D40#, 16),
     to_signed(16#1C00#, 16), to_signed(16#1A80#, 16), to_signed(16#1900#, 16), to_signed(16#1780#, 16),
     to_signed(16#1600#, 16), to_signed(16#1480#, 16), to_signed(16#1340#, 16), to_signed(16#11C0#, 16),
     to_signed(16#1080#, 16), to_signed(16#0F40#, 16), to_signed(16#0E00#, 16), to_signed(16#0CC0#, 16),
     to_signed(16#0B80#, 16), to_signed(16#0A80#, 16), to_signed(16#0940#, 16), to_signed(16#0840#, 16),
     to_signed(16#0740#, 16), to_signed(16#0680#, 16), to_signed(16#0580#, 16), to_signed(16#04C0#, 16),
     to_signed(16#0400#, 16), to_signed(16#0340#, 16), to_signed(16#0280#, 16), to_signed(16#0200#, 16),
     to_signed(16#0180#, 16), to_signed(16#0140#, 16), to_signed(16#00C0#, 16), to_signed(16#0080#, 16),
     to_signed(16#0040#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0040#, 16), to_signed(16#0080#, 16), to_signed(16#00C0#, 16),
     to_signed(16#0100#, 16), to_signed(16#0180#, 16), to_signed(16#0200#, 16), to_signed(16#0280#, 16),
     to_signed(16#0300#, 16), to_signed(16#03C0#, 16), to_signed(16#0480#, 16), to_signed(16#0540#, 16),
     to_signed(16#0600#, 16), to_signed(16#0700#, 16), to_signed(16#0800#, 16), to_signed(16#0900#, 16),
     to_signed(16#0A00#, 16), to_signed(16#0B40#, 16), to_signed(16#0C40#, 16), to_signed(16#0D80#, 16),
     to_signed(16#0EC0#, 16), to_signed(16#1000#, 16), to_signed(16#1180#, 16), to_signed(16#12C0#, 16),
     to_signed(16#1440#, 16), to_signed(16#1580#, 16), to_signed(16#1700#, 16), to_signed(16#1880#, 16),
     to_signed(16#1A00#, 16), to_signed(16#1B80#, 16), to_signed(16#1D00#, 16), to_signed(16#1E40#, 16));  -- sfix16 [400]
  CONSTANT nc_6                           : vector_of_signed16(0 TO 399) := 
    (to_signed(16#2000#, 16), to_signed(16#2080#, 16), to_signed(16#2100#, 16), to_signed(16#2180#, 16),
     to_signed(16#2200#, 16), to_signed(16#2280#, 16), to_signed(16#22C0#, 16), to_signed(16#2340#, 16),
     to_signed(16#23C0#, 16), to_signed(16#2440#, 16), to_signed(16#24C0#, 16), to_signed(16#2540#, 16),
     to_signed(16#25C0#, 16), to_signed(16#2640#, 16), to_signed(16#26C0#, 16), to_signed(16#2740#, 16),
     to_signed(16#27C0#, 16), to_signed(16#2840#, 16), to_signed(16#28C0#, 16), to_signed(16#2940#, 16),
     to_signed(16#29C0#, 16), to_signed(16#2A40#, 16), to_signed(16#2AC0#, 16), to_signed(16#2B40#, 16),
     to_signed(16#2B80#, 16), to_signed(16#2C00#, 16), to_signed(16#2C80#, 16), to_signed(16#2D00#, 16),
     to_signed(16#2D80#, 16), to_signed(16#2E00#, 16), to_signed(16#2E40#, 16), to_signed(16#2EC0#, 16),
     to_signed(16#2F40#, 16), to_signed(16#2FC0#, 16), to_signed(16#3000#, 16), to_signed(16#3080#, 16),
     to_signed(16#3100#, 16), to_signed(16#3180#, 16), to_signed(16#31C0#, 16), to_signed(16#3240#, 16),
     to_signed(16#3280#, 16), to_signed(16#3300#, 16), to_signed(16#3380#, 16), to_signed(16#33C0#, 16),
     to_signed(16#3440#, 16), to_signed(16#3480#, 16), to_signed(16#3500#, 16), to_signed(16#3540#, 16),
     to_signed(16#35C0#, 16), to_signed(16#3600#, 16), to_signed(16#3680#, 16), to_signed(16#36C0#, 16),
     to_signed(16#3700#, 16), to_signed(16#3780#, 16), to_signed(16#37C0#, 16), to_signed(16#3800#, 16),
     to_signed(16#3880#, 16), to_signed(16#38C0#, 16), to_signed(16#3900#, 16), to_signed(16#3940#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3A00#, 16), to_signed(16#3A40#, 16), to_signed(16#3A80#, 16),
     to_signed(16#3AC0#, 16), to_signed(16#3B00#, 16), to_signed(16#3B40#, 16), to_signed(16#3B80#, 16),
     to_signed(16#3BC0#, 16), to_signed(16#3C00#, 16), to_signed(16#3C40#, 16), to_signed(16#3C80#, 16),
     to_signed(16#3CC0#, 16), to_signed(16#3D00#, 16), to_signed(16#3D40#, 16), to_signed(16#3D40#, 16),
     to_signed(16#3D80#, 16), to_signed(16#3DC0#, 16), to_signed(16#3DC0#, 16), to_signed(16#3E00#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3E40#, 16), to_signed(16#3E80#, 16), to_signed(16#3E80#, 16),
     to_signed(16#3EC0#, 16), to_signed(16#3EC0#, 16), to_signed(16#3F00#, 16), to_signed(16#3F00#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F40#, 16), to_signed(16#3F40#, 16), to_signed(16#3F80#, 16),
     to_signed(16#3F80#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16),
     to_signed(16#3F80#, 16), to_signed(16#3F80#, 16), to_signed(16#3F40#, 16), to_signed(16#3F40#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F00#, 16), to_signed(16#3F00#, 16), to_signed(16#3EC0#, 16),
     to_signed(16#3EC0#, 16), to_signed(16#3E80#, 16), to_signed(16#3E80#, 16), to_signed(16#3E40#, 16),
     to_signed(16#3E40#, 16), to_signed(16#3E00#, 16), to_signed(16#3DC0#, 16), to_signed(16#3DC0#, 16),
     to_signed(16#3D80#, 16), to_signed(16#3D40#, 16), to_signed(16#3D40#, 16), to_signed(16#3D00#, 16),
     to_signed(16#3CC0#, 16), to_signed(16#3C80#, 16), to_signed(16#3C40#, 16), to_signed(16#3C00#, 16),
     to_signed(16#3BC0#, 16), to_signed(16#3B80#, 16), to_signed(16#3B40#, 16), to_signed(16#3B00#, 16),
     to_signed(16#3AC0#, 16), to_signed(16#3A80#, 16), to_signed(16#3A40#, 16), to_signed(16#3A00#, 16),
     to_signed(16#39C0#, 16), to_signed(16#3940#, 16), to_signed(16#3900#, 16), to_signed(16#38C0#, 16),
     to_signed(16#3880#, 16), to_signed(16#3800#, 16), to_signed(16#37C0#, 16), to_signed(16#3780#, 16),
     to_signed(16#3700#, 16), to_signed(16#36C0#, 16), to_signed(16#3680#, 16), to_signed(16#3600#, 16),
     to_signed(16#35C0#, 16), to_signed(16#3540#, 16), to_signed(16#3500#, 16), to_signed(16#3480#, 16),
     to_signed(16#3440#, 16), to_signed(16#33C0#, 16), to_signed(16#3380#, 16), to_signed(16#3300#, 16),
     to_signed(16#3280#, 16), to_signed(16#3240#, 16), to_signed(16#31C0#, 16), to_signed(16#3180#, 16),
     to_signed(16#3100#, 16), to_signed(16#3080#, 16), to_signed(16#3000#, 16), to_signed(16#2FC0#, 16),
     to_signed(16#2F40#, 16), to_signed(16#2EC0#, 16), to_signed(16#2E40#, 16), to_signed(16#2E00#, 16),
     to_signed(16#2D80#, 16), to_signed(16#2D00#, 16), to_signed(16#2C80#, 16), to_signed(16#2C00#, 16),
     to_signed(16#2B80#, 16), to_signed(16#2B40#, 16), to_signed(16#2AC0#, 16), to_signed(16#2A40#, 16),
     to_signed(16#29C0#, 16), to_signed(16#2940#, 16), to_signed(16#28C0#, 16), to_signed(16#2840#, 16),
     to_signed(16#27C0#, 16), to_signed(16#2740#, 16), to_signed(16#26C0#, 16), to_signed(16#2640#, 16),
     to_signed(16#25C0#, 16), to_signed(16#2540#, 16), to_signed(16#24C0#, 16), to_signed(16#2440#, 16),
     to_signed(16#23C0#, 16), to_signed(16#2340#, 16), to_signed(16#22C0#, 16), to_signed(16#2280#, 16),
     to_signed(16#2200#, 16), to_signed(16#2180#, 16), to_signed(16#2100#, 16), to_signed(16#2080#, 16),
     to_signed(16#2000#, 16), to_signed(16#1F40#, 16), to_signed(16#1EC0#, 16), to_signed(16#1E40#, 16),
     to_signed(16#1DC0#, 16), to_signed(16#1D40#, 16), to_signed(16#1D00#, 16), to_signed(16#1C80#, 16),
     to_signed(16#1C00#, 16), to_signed(16#1B80#, 16), to_signed(16#1B00#, 16), to_signed(16#1A80#, 16),
     to_signed(16#1A00#, 16), to_signed(16#1980#, 16), to_signed(16#1900#, 16), to_signed(16#1880#, 16),
     to_signed(16#1800#, 16), to_signed(16#1780#, 16), to_signed(16#1700#, 16), to_signed(16#1680#, 16),
     to_signed(16#1600#, 16), to_signed(16#1580#, 16), to_signed(16#1500#, 16), to_signed(16#1480#, 16),
     to_signed(16#1440#, 16), to_signed(16#13C0#, 16), to_signed(16#1340#, 16), to_signed(16#12C0#, 16),
     to_signed(16#1240#, 16), to_signed(16#11C0#, 16), to_signed(16#1180#, 16), to_signed(16#1100#, 16),
     to_signed(16#1080#, 16), to_signed(16#1000#, 16), to_signed(16#0FC0#, 16), to_signed(16#0F40#, 16),
     to_signed(16#0EC0#, 16), to_signed(16#0E40#, 16), to_signed(16#0E00#, 16), to_signed(16#0D80#, 16),
     to_signed(16#0D40#, 16), to_signed(16#0CC0#, 16), to_signed(16#0C40#, 16), to_signed(16#0C00#, 16),
     to_signed(16#0B80#, 16), to_signed(16#0B40#, 16), to_signed(16#0AC0#, 16), to_signed(16#0A80#, 16),
     to_signed(16#0A00#, 16), to_signed(16#09C0#, 16), to_signed(16#0940#, 16), to_signed(16#0900#, 16),
     to_signed(16#08C0#, 16), to_signed(16#0840#, 16), to_signed(16#0800#, 16), to_signed(16#07C0#, 16),
     to_signed(16#0740#, 16), to_signed(16#0700#, 16), to_signed(16#06C0#, 16), to_signed(16#0680#, 16),
     to_signed(16#0600#, 16), to_signed(16#05C0#, 16), to_signed(16#0580#, 16), to_signed(16#0540#, 16),
     to_signed(16#0500#, 16), to_signed(16#04C0#, 16), to_signed(16#0480#, 16), to_signed(16#0440#, 16),
     to_signed(16#0400#, 16), to_signed(16#03C0#, 16), to_signed(16#0380#, 16), to_signed(16#0340#, 16),
     to_signed(16#0300#, 16), to_signed(16#02C0#, 16), to_signed(16#0280#, 16), to_signed(16#0280#, 16),
     to_signed(16#0240#, 16), to_signed(16#0200#, 16), to_signed(16#0200#, 16), to_signed(16#01C0#, 16),
     to_signed(16#0180#, 16), to_signed(16#0180#, 16), to_signed(16#0140#, 16), to_signed(16#0140#, 16),
     to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#00C0#, 16), to_signed(16#00C0#, 16),
     to_signed(16#0080#, 16), to_signed(16#0080#, 16), to_signed(16#0080#, 16), to_signed(16#0040#, 16),
     to_signed(16#0040#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16),
     to_signed(16#0040#, 16), to_signed(16#0040#, 16), to_signed(16#0080#, 16), to_signed(16#0080#, 16),
     to_signed(16#0080#, 16), to_signed(16#00C0#, 16), to_signed(16#00C0#, 16), to_signed(16#0100#, 16),
     to_signed(16#0100#, 16), to_signed(16#0140#, 16), to_signed(16#0140#, 16), to_signed(16#0180#, 16),
     to_signed(16#0180#, 16), to_signed(16#01C0#, 16), to_signed(16#0200#, 16), to_signed(16#0200#, 16),
     to_signed(16#0240#, 16), to_signed(16#0280#, 16), to_signed(16#0280#, 16), to_signed(16#02C0#, 16),
     to_signed(16#0300#, 16), to_signed(16#0340#, 16), to_signed(16#0380#, 16), to_signed(16#03C0#, 16),
     to_signed(16#0400#, 16), to_signed(16#0440#, 16), to_signed(16#0480#, 16), to_signed(16#04C0#, 16),
     to_signed(16#0500#, 16), to_signed(16#0540#, 16), to_signed(16#0580#, 16), to_signed(16#05C0#, 16),
     to_signed(16#0600#, 16), to_signed(16#0680#, 16), to_signed(16#06C0#, 16), to_signed(16#0700#, 16),
     to_signed(16#0740#, 16), to_signed(16#07C0#, 16), to_signed(16#0800#, 16), to_signed(16#0840#, 16),
     to_signed(16#08C0#, 16), to_signed(16#0900#, 16), to_signed(16#0940#, 16), to_signed(16#09C0#, 16),
     to_signed(16#0A00#, 16), to_signed(16#0A80#, 16), to_signed(16#0AC0#, 16), to_signed(16#0B40#, 16),
     to_signed(16#0B80#, 16), to_signed(16#0C00#, 16), to_signed(16#0C40#, 16), to_signed(16#0CC0#, 16),
     to_signed(16#0D40#, 16), to_signed(16#0D80#, 16), to_signed(16#0E00#, 16), to_signed(16#0E40#, 16),
     to_signed(16#0EC0#, 16), to_signed(16#0F40#, 16), to_signed(16#0FC0#, 16), to_signed(16#1000#, 16),
     to_signed(16#1080#, 16), to_signed(16#1100#, 16), to_signed(16#1180#, 16), to_signed(16#11C0#, 16),
     to_signed(16#1240#, 16), to_signed(16#12C0#, 16), to_signed(16#1340#, 16), to_signed(16#13C0#, 16),
     to_signed(16#1440#, 16), to_signed(16#1480#, 16), to_signed(16#1500#, 16), to_signed(16#1580#, 16),
     to_signed(16#1600#, 16), to_signed(16#1680#, 16), to_signed(16#1700#, 16), to_signed(16#1780#, 16),
     to_signed(16#1800#, 16), to_signed(16#1880#, 16), to_signed(16#1900#, 16), to_signed(16#1980#, 16),
     to_signed(16#1A00#, 16), to_signed(16#1A80#, 16), to_signed(16#1B00#, 16), to_signed(16#1B80#, 16),
     to_signed(16#1C00#, 16), to_signed(16#1C80#, 16), to_signed(16#1D00#, 16), to_signed(16#1D40#, 16),
     to_signed(16#1DC0#, 16), to_signed(16#1E40#, 16), to_signed(16#1EC0#, 16), to_signed(16#1F40#, 16));  -- sfix16 [400]
  CONSTANT nc_8                           : vector_of_signed16(0 TO 399) := 
    (to_signed(16#3B80#, 16), to_signed(16#3B40#, 16), to_signed(16#3B00#, 16), to_signed(16#3AC0#, 16),
     to_signed(16#3A80#, 16), to_signed(16#3A40#, 16), to_signed(16#39C0#, 16), to_signed(16#3980#, 16),
     to_signed(16#3940#, 16), to_signed(16#3900#, 16), to_signed(16#38C0#, 16), to_signed(16#3840#, 16),
     to_signed(16#3800#, 16), to_signed(16#37C0#, 16), to_signed(16#3740#, 16), to_signed(16#3700#, 16),
     to_signed(16#36C0#, 16), to_signed(16#3640#, 16), to_signed(16#3600#, 16), to_signed(16#3580#, 16),
     to_signed(16#3540#, 16), to_signed(16#34C0#, 16), to_signed(16#3480#, 16), to_signed(16#3400#, 16),
     to_signed(16#33C0#, 16), to_signed(16#3340#, 16), to_signed(16#3300#, 16), to_signed(16#3280#, 16),
     to_signed(16#3200#, 16), to_signed(16#31C0#, 16), to_signed(16#3140#, 16), to_signed(16#30C0#, 16),
     to_signed(16#3080#, 16), to_signed(16#3000#, 16), to_signed(16#2F80#, 16), to_signed(16#2F00#, 16),
     to_signed(16#2EC0#, 16), to_signed(16#2E40#, 16), to_signed(16#2DC0#, 16), to_signed(16#2D40#, 16),
     to_signed(16#2CC0#, 16), to_signed(16#2C80#, 16), to_signed(16#2C00#, 16), to_signed(16#2B80#, 16),
     to_signed(16#2B00#, 16), to_signed(16#2A80#, 16), to_signed(16#2A00#, 16), to_signed(16#2980#, 16),
     to_signed(16#2900#, 16), to_signed(16#2880#, 16), to_signed(16#2800#, 16), to_signed(16#27C0#, 16),
     to_signed(16#2740#, 16), to_signed(16#26C0#, 16), to_signed(16#2640#, 16), to_signed(16#25C0#, 16),
     to_signed(16#2540#, 16), to_signed(16#24C0#, 16), to_signed(16#2440#, 16), to_signed(16#23C0#, 16),
     to_signed(16#2340#, 16), to_signed(16#22C0#, 16), to_signed(16#2240#, 16), to_signed(16#21C0#, 16),
     to_signed(16#2140#, 16), to_signed(16#20C0#, 16), to_signed(16#2040#, 16), to_signed(16#1FC0#, 16),
     to_signed(16#1F40#, 16), to_signed(16#1EC0#, 16), to_signed(16#1E40#, 16), to_signed(16#1DC0#, 16),
     to_signed(16#1D40#, 16), to_signed(16#1CC0#, 16), to_signed(16#1C40#, 16), to_signed(16#1BC0#, 16),
     to_signed(16#1B40#, 16), to_signed(16#1AC0#, 16), to_signed(16#1A40#, 16), to_signed(16#19C0#, 16),
     to_signed(16#1940#, 16), to_signed(16#18C0#, 16), to_signed(16#1840#, 16), to_signed(16#17C0#, 16),
     to_signed(16#1740#, 16), to_signed(16#16C0#, 16), to_signed(16#1640#, 16), to_signed(16#15C0#, 16),
     to_signed(16#1580#, 16), to_signed(16#1500#, 16), to_signed(16#1480#, 16), to_signed(16#1400#, 16),
     to_signed(16#1380#, 16), to_signed(16#1300#, 16), to_signed(16#1280#, 16), to_signed(16#1240#, 16),
     to_signed(16#11C0#, 16), to_signed(16#1140#, 16), to_signed(16#10C0#, 16), to_signed(16#1040#, 16),
     to_signed(16#1000#, 16), to_signed(16#0F80#, 16), to_signed(16#0F00#, 16), to_signed(16#0EC0#, 16),
     to_signed(16#0E40#, 16), to_signed(16#0DC0#, 16), to_signed(16#0D80#, 16), to_signed(16#0D00#, 16),
     to_signed(16#0C80#, 16), to_signed(16#0C40#, 16), to_signed(16#0BC0#, 16), to_signed(16#0B80#, 16),
     to_signed(16#0B00#, 16), to_signed(16#0AC0#, 16), to_signed(16#0A40#, 16), to_signed(16#0A00#, 16),
     to_signed(16#0980#, 16), to_signed(16#0940#, 16), to_signed(16#08C0#, 16), to_signed(16#0880#, 16),
     to_signed(16#0840#, 16), to_signed(16#07C0#, 16), to_signed(16#0780#, 16), to_signed(16#0740#, 16),
     to_signed(16#0700#, 16), to_signed(16#0680#, 16), to_signed(16#0640#, 16), to_signed(16#0600#, 16),
     to_signed(16#05C0#, 16), to_signed(16#0580#, 16), to_signed(16#0540#, 16), to_signed(16#04C0#, 16),
     to_signed(16#0480#, 16), to_signed(16#0440#, 16), to_signed(16#0400#, 16), to_signed(16#03C0#, 16),
     to_signed(16#03C0#, 16), to_signed(16#0380#, 16), to_signed(16#0340#, 16), to_signed(16#0300#, 16),
     to_signed(16#02C0#, 16), to_signed(16#0280#, 16), to_signed(16#0240#, 16), to_signed(16#0240#, 16),
     to_signed(16#0200#, 16), to_signed(16#01C0#, 16), to_signed(16#01C0#, 16), to_signed(16#0180#, 16),
     to_signed(16#0140#, 16), to_signed(16#0140#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16),
     to_signed(16#00C0#, 16), to_signed(16#00C0#, 16), to_signed(16#00C0#, 16), to_signed(16#0080#, 16),
     to_signed(16#0080#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16),
     to_signed(16#0040#, 16), to_signed(16#0040#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16),
     to_signed(16#0040#, 16), to_signed(16#0080#, 16), to_signed(16#0080#, 16), to_signed(16#0080#, 16),
     to_signed(16#00C0#, 16), to_signed(16#00C0#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16),
     to_signed(16#0140#, 16), to_signed(16#0140#, 16), to_signed(16#0180#, 16), to_signed(16#0180#, 16),
     to_signed(16#01C0#, 16), to_signed(16#0200#, 16), to_signed(16#0200#, 16), to_signed(16#0240#, 16),
     to_signed(16#0280#, 16), to_signed(16#02C0#, 16), to_signed(16#0300#, 16), to_signed(16#0300#, 16),
     to_signed(16#0340#, 16), to_signed(16#0380#, 16), to_signed(16#03C0#, 16), to_signed(16#0400#, 16),
     to_signed(16#0440#, 16), to_signed(16#0480#, 16), to_signed(16#04C0#, 16), to_signed(16#0500#, 16),
     to_signed(16#0540#, 16), to_signed(16#0580#, 16), to_signed(16#0600#, 16), to_signed(16#0640#, 16),
     to_signed(16#0680#, 16), to_signed(16#06C0#, 16), to_signed(16#0700#, 16), to_signed(16#0780#, 16),
     to_signed(16#07C0#, 16), to_signed(16#0800#, 16), to_signed(16#0880#, 16), to_signed(16#08C0#, 16),
     to_signed(16#0900#, 16), to_signed(16#0980#, 16), to_signed(16#09C0#, 16), to_signed(16#0A40#, 16),
     to_signed(16#0A80#, 16), to_signed(16#0B00#, 16), to_signed(16#0B40#, 16), to_signed(16#0BC0#, 16),
     to_signed(16#0C00#, 16), to_signed(16#0C80#, 16), to_signed(16#0CC0#, 16), to_signed(16#0D40#, 16),
     to_signed(16#0DC0#, 16), to_signed(16#0E00#, 16), to_signed(16#0E80#, 16), to_signed(16#0F00#, 16),
     to_signed(16#0F40#, 16), to_signed(16#0FC0#, 16), to_signed(16#1040#, 16), to_signed(16#10C0#, 16),
     to_signed(16#1100#, 16), to_signed(16#1180#, 16), to_signed(16#1200#, 16), to_signed(16#1280#, 16),
     to_signed(16#1300#, 16), to_signed(16#1340#, 16), to_signed(16#13C0#, 16), to_signed(16#1440#, 16),
     to_signed(16#14C0#, 16), to_signed(16#1540#, 16), to_signed(16#15C0#, 16), to_signed(16#1640#, 16),
     to_signed(16#16C0#, 16), to_signed(16#1740#, 16), to_signed(16#17C0#, 16), to_signed(16#1800#, 16),
     to_signed(16#1880#, 16), to_signed(16#1900#, 16), to_signed(16#1980#, 16), to_signed(16#1A00#, 16),
     to_signed(16#1A80#, 16), to_signed(16#1B00#, 16), to_signed(16#1B80#, 16), to_signed(16#1C00#, 16),
     to_signed(16#1C80#, 16), to_signed(16#1D00#, 16), to_signed(16#1D80#, 16), to_signed(16#1E00#, 16),
     to_signed(16#1E80#, 16), to_signed(16#1F00#, 16), to_signed(16#1F80#, 16), to_signed(16#2000#, 16),
     to_signed(16#2080#, 16), to_signed(16#2100#, 16), to_signed(16#2180#, 16), to_signed(16#2200#, 16),
     to_signed(16#2280#, 16), to_signed(16#2300#, 16), to_signed(16#2380#, 16), to_signed(16#2400#, 16),
     to_signed(16#2480#, 16), to_signed(16#2500#, 16), to_signed(16#2580#, 16), to_signed(16#2600#, 16),
     to_signed(16#2680#, 16), to_signed(16#2700#, 16), to_signed(16#2780#, 16), to_signed(16#2800#, 16),
     to_signed(16#2880#, 16), to_signed(16#2900#, 16), to_signed(16#2980#, 16), to_signed(16#2A00#, 16),
     to_signed(16#2A40#, 16), to_signed(16#2AC0#, 16), to_signed(16#2B40#, 16), to_signed(16#2BC0#, 16),
     to_signed(16#2C40#, 16), to_signed(16#2CC0#, 16), to_signed(16#2D40#, 16), to_signed(16#2D80#, 16),
     to_signed(16#2E00#, 16), to_signed(16#2E80#, 16), to_signed(16#2F00#, 16), to_signed(16#2F80#, 16),
     to_signed(16#2FC0#, 16), to_signed(16#3040#, 16), to_signed(16#30C0#, 16), to_signed(16#3100#, 16),
     to_signed(16#3180#, 16), to_signed(16#3200#, 16), to_signed(16#3240#, 16), to_signed(16#32C0#, 16),
     to_signed(16#3340#, 16), to_signed(16#3380#, 16), to_signed(16#3400#, 16), to_signed(16#3440#, 16),
     to_signed(16#34C0#, 16), to_signed(16#3500#, 16), to_signed(16#3580#, 16), to_signed(16#35C0#, 16),
     to_signed(16#3640#, 16), to_signed(16#3680#, 16), to_signed(16#3700#, 16), to_signed(16#3740#, 16),
     to_signed(16#3780#, 16), to_signed(16#3800#, 16), to_signed(16#3840#, 16), to_signed(16#3880#, 16),
     to_signed(16#38C0#, 16), to_signed(16#3940#, 16), to_signed(16#3980#, 16), to_signed(16#39C0#, 16),
     to_signed(16#3A00#, 16), to_signed(16#3A40#, 16), to_signed(16#3A80#, 16), to_signed(16#3B00#, 16),
     to_signed(16#3B40#, 16), to_signed(16#3B80#, 16), to_signed(16#3BC0#, 16), to_signed(16#3C00#, 16),
     to_signed(16#3C00#, 16), to_signed(16#3C40#, 16), to_signed(16#3C80#, 16), to_signed(16#3CC0#, 16),
     to_signed(16#3D00#, 16), to_signed(16#3D40#, 16), to_signed(16#3D80#, 16), to_signed(16#3D80#, 16),
     to_signed(16#3DC0#, 16), to_signed(16#3E00#, 16), to_signed(16#3E00#, 16), to_signed(16#3E40#, 16),
     to_signed(16#3E80#, 16), to_signed(16#3E80#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EC0#, 16),
     to_signed(16#3F00#, 16), to_signed(16#3F00#, 16), to_signed(16#3F00#, 16), to_signed(16#3F40#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16),
     to_signed(16#3F80#, 16), to_signed(16#3F80#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16),
     to_signed(16#3F80#, 16), to_signed(16#3F40#, 16), to_signed(16#3F40#, 16), to_signed(16#3F40#, 16),
     to_signed(16#3F00#, 16), to_signed(16#3F00#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EC0#, 16),
     to_signed(16#3E80#, 16), to_signed(16#3E80#, 16), to_signed(16#3E40#, 16), to_signed(16#3E40#, 16),
     to_signed(16#3E00#, 16), to_signed(16#3DC0#, 16), to_signed(16#3DC0#, 16), to_signed(16#3D80#, 16),
     to_signed(16#3D40#, 16), to_signed(16#3D00#, 16), to_signed(16#3CC0#, 16), to_signed(16#3CC0#, 16),
     to_signed(16#3C80#, 16), to_signed(16#3C40#, 16), to_signed(16#3C00#, 16), to_signed(16#3BC0#, 16));  -- sfix16 [400]
  CONSTANT nc_10                          : vector_of_signed16(0 TO 399) := 
    (to_signed(16#0440#, 16), to_signed(16#0400#, 16), to_signed(16#03C0#, 16), to_signed(16#0380#, 16),
     to_signed(16#0340#, 16), to_signed(16#0300#, 16), to_signed(16#0300#, 16), to_signed(16#02C0#, 16),
     to_signed(16#0280#, 16), to_signed(16#0240#, 16), to_signed(16#0200#, 16), to_signed(16#0200#, 16),
     to_signed(16#01C0#, 16), to_signed(16#0180#, 16), to_signed(16#0180#, 16), to_signed(16#0140#, 16),
     to_signed(16#0140#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#00C0#, 16),
     to_signed(16#00C0#, 16), to_signed(16#0080#, 16), to_signed(16#0080#, 16), to_signed(16#0080#, 16),
     to_signed(16#0040#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16),
     to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0000#, 16), to_signed(16#0040#, 16),
     to_signed(16#0040#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16), to_signed(16#0040#, 16),
     to_signed(16#0080#, 16), to_signed(16#0080#, 16), to_signed(16#00C0#, 16), to_signed(16#00C0#, 16),
     to_signed(16#00C0#, 16), to_signed(16#0100#, 16), to_signed(16#0100#, 16), to_signed(16#0140#, 16),
     to_signed(16#0140#, 16), to_signed(16#0180#, 16), to_signed(16#01C0#, 16), to_signed(16#01C0#, 16),
     to_signed(16#0200#, 16), to_signed(16#0240#, 16), to_signed(16#0240#, 16), to_signed(16#0280#, 16),
     to_signed(16#02C0#, 16), to_signed(16#0300#, 16), to_signed(16#0340#, 16), to_signed(16#0380#, 16),
     to_signed(16#03C0#, 16), to_signed(16#03C0#, 16), to_signed(16#0400#, 16), to_signed(16#0440#, 16),
     to_signed(16#0480#, 16), to_signed(16#04C0#, 16), to_signed(16#0540#, 16), to_signed(16#0580#, 16),
     to_signed(16#05C0#, 16), to_signed(16#0600#, 16), to_signed(16#0640#, 16), to_signed(16#0680#, 16),
     to_signed(16#0700#, 16), to_signed(16#0740#, 16), to_signed(16#0780#, 16), to_signed(16#07C0#, 16),
     to_signed(16#0840#, 16), to_signed(16#0880#, 16), to_signed(16#08C0#, 16), to_signed(16#0940#, 16),
     to_signed(16#0980#, 16), to_signed(16#0A00#, 16), to_signed(16#0A40#, 16), to_signed(16#0AC0#, 16),
     to_signed(16#0B00#, 16), to_signed(16#0B80#, 16), to_signed(16#0BC0#, 16), to_signed(16#0C40#, 16),
     to_signed(16#0C80#, 16), to_signed(16#0D00#, 16), to_signed(16#0D80#, 16), to_signed(16#0DC0#, 16),
     to_signed(16#0E40#, 16), to_signed(16#0EC0#, 16), to_signed(16#0F00#, 16), to_signed(16#0F80#, 16),
     to_signed(16#1000#, 16), to_signed(16#1040#, 16), to_signed(16#10C0#, 16), to_signed(16#1140#, 16),
     to_signed(16#11C0#, 16), to_signed(16#1240#, 16), to_signed(16#1280#, 16), to_signed(16#1300#, 16),
     to_signed(16#1380#, 16), to_signed(16#1400#, 16), to_signed(16#1480#, 16), to_signed(16#1500#, 16),
     to_signed(16#1580#, 16), to_signed(16#15C0#, 16), to_signed(16#1640#, 16), to_signed(16#16C0#, 16),
     to_signed(16#1740#, 16), to_signed(16#17C0#, 16), to_signed(16#1840#, 16), to_signed(16#18C0#, 16),
     to_signed(16#1940#, 16), to_signed(16#19C0#, 16), to_signed(16#1A40#, 16), to_signed(16#1AC0#, 16),
     to_signed(16#1B40#, 16), to_signed(16#1BC0#, 16), to_signed(16#1C40#, 16), to_signed(16#1CC0#, 16),
     to_signed(16#1D40#, 16), to_signed(16#1DC0#, 16), to_signed(16#1E40#, 16), to_signed(16#1EC0#, 16),
     to_signed(16#1F40#, 16), to_signed(16#1FC0#, 16), to_signed(16#2040#, 16), to_signed(16#20C0#, 16),
     to_signed(16#2140#, 16), to_signed(16#21C0#, 16), to_signed(16#2240#, 16), to_signed(16#22C0#, 16),
     to_signed(16#2340#, 16), to_signed(16#23C0#, 16), to_signed(16#2440#, 16), to_signed(16#24C0#, 16),
     to_signed(16#2540#, 16), to_signed(16#25C0#, 16), to_signed(16#2640#, 16), to_signed(16#26C0#, 16),
     to_signed(16#2740#, 16), to_signed(16#27C0#, 16), to_signed(16#2800#, 16), to_signed(16#2880#, 16),
     to_signed(16#2900#, 16), to_signed(16#2980#, 16), to_signed(16#2A00#, 16), to_signed(16#2A80#, 16),
     to_signed(16#2B00#, 16), to_signed(16#2B80#, 16), to_signed(16#2C00#, 16), to_signed(16#2C80#, 16),
     to_signed(16#2CC0#, 16), to_signed(16#2D40#, 16), to_signed(16#2DC0#, 16), to_signed(16#2E40#, 16),
     to_signed(16#2EC0#, 16), to_signed(16#2F00#, 16), to_signed(16#2F80#, 16), to_signed(16#3000#, 16),
     to_signed(16#3080#, 16), to_signed(16#30C0#, 16), to_signed(16#3140#, 16), to_signed(16#31C0#, 16),
     to_signed(16#3200#, 16), to_signed(16#3280#, 16), to_signed(16#3300#, 16), to_signed(16#3340#, 16),
     to_signed(16#33C0#, 16), to_signed(16#3400#, 16), to_signed(16#3480#, 16), to_signed(16#34C0#, 16),
     to_signed(16#3540#, 16), to_signed(16#3580#, 16), to_signed(16#3600#, 16), to_signed(16#3640#, 16),
     to_signed(16#36C0#, 16), to_signed(16#3700#, 16), to_signed(16#3740#, 16), to_signed(16#37C0#, 16),
     to_signed(16#3800#, 16), to_signed(16#3840#, 16), to_signed(16#38C0#, 16), to_signed(16#3900#, 16),
     to_signed(16#3940#, 16), to_signed(16#3980#, 16), to_signed(16#39C0#, 16), to_signed(16#3A40#, 16),
     to_signed(16#3A80#, 16), to_signed(16#3AC0#, 16), to_signed(16#3B00#, 16), to_signed(16#3B40#, 16),
     to_signed(16#3B80#, 16), to_signed(16#3BC0#, 16), to_signed(16#3C00#, 16), to_signed(16#3C40#, 16),
     to_signed(16#3C80#, 16), to_signed(16#3CC0#, 16), to_signed(16#3CC0#, 16), to_signed(16#3D00#, 16),
     to_signed(16#3D40#, 16), to_signed(16#3D80#, 16), to_signed(16#3DC0#, 16), to_signed(16#3DC0#, 16),
     to_signed(16#3E00#, 16), to_signed(16#3E40#, 16), to_signed(16#3E40#, 16), to_signed(16#3E80#, 16),
     to_signed(16#3E80#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EC0#, 16), to_signed(16#3F00#, 16),
     to_signed(16#3F00#, 16), to_signed(16#3F40#, 16), to_signed(16#3F40#, 16), to_signed(16#3F40#, 16),
     to_signed(16#3F80#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16),
     to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3FC0#, 16), to_signed(16#3F80#, 16),
     to_signed(16#3F80#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16), to_signed(16#3F80#, 16),
     to_signed(16#3F40#, 16), to_signed(16#3F40#, 16), to_signed(16#3F00#, 16), to_signed(16#3F00#, 16),
     to_signed(16#3F00#, 16), to_signed(16#3EC0#, 16), to_signed(16#3EC0#, 16), to_signed(16#3E80#, 16),
     to_signed(16#3E80#, 16), to_signed(16#3E40#, 16), to_signed(16#3E00#, 16), to_signed(16#3E00#, 16),
     to_signed(16#3DC0#, 16), to_signed(16#3D80#, 16), to_signed(16#3D80#, 16), to_signed(16#3D40#, 16),
     to_signed(16#3D00#, 16), to_signed(16#3CC0#, 16), to_signed(16#3C80#, 16), to_signed(16#3C40#, 16),
     to_signed(16#3C00#, 16), to_signed(16#3C00#, 16), to_signed(16#3BC0#, 16), to_signed(16#3B80#, 16),
     to_signed(16#3B40#, 16), to_signed(16#3B00#, 16), to_signed(16#3A80#, 16), to_signed(16#3A40#, 16),
     to_signed(16#3A00#, 16), to_signed(16#39C0#, 16), to_signed(16#3980#, 16), to_signed(16#3940#, 16),
     to_signed(16#38C0#, 16), to_signed(16#3880#, 16), to_signed(16#3840#, 16), to_signed(16#3800#, 16),
     to_signed(16#3780#, 16), to_signed(16#3740#, 16), to_signed(16#3700#, 16), to_signed(16#3680#, 16),
     to_signed(16#3640#, 16), to_signed(16#35C0#, 16), to_signed(16#3580#, 16), to_signed(16#3500#, 16),
     to_signed(16#34C0#, 16), to_signed(16#3440#, 16), to_signed(16#3400#, 16), to_signed(16#3380#, 16),
     to_signed(16#3340#, 16), to_signed(16#32C0#, 16), to_signed(16#3240#, 16), to_signed(16#3200#, 16),
     to_signed(16#3180#, 16), to_signed(16#3100#, 16), to_signed(16#30C0#, 16), to_signed(16#3040#, 16),
     to_signed(16#2FC0#, 16), to_signed(16#2F80#, 16), to_signed(16#2F00#, 16), to_signed(16#2E80#, 16),
     to_signed(16#2E00#, 16), to_signed(16#2D80#, 16), to_signed(16#2D40#, 16), to_signed(16#2CC0#, 16),
     to_signed(16#2C40#, 16), to_signed(16#2BC0#, 16), to_signed(16#2B40#, 16), to_signed(16#2AC0#, 16),
     to_signed(16#2A40#, 16), to_signed(16#2A00#, 16), to_signed(16#2980#, 16), to_signed(16#2900#, 16),
     to_signed(16#2880#, 16), to_signed(16#2800#, 16), to_signed(16#2780#, 16), to_signed(16#2700#, 16),
     to_signed(16#2680#, 16), to_signed(16#2600#, 16), to_signed(16#2580#, 16), to_signed(16#2500#, 16),
     to_signed(16#2480#, 16), to_signed(16#2400#, 16), to_signed(16#2380#, 16), to_signed(16#2300#, 16),
     to_signed(16#2280#, 16), to_signed(16#2200#, 16), to_signed(16#2180#, 16), to_signed(16#2100#, 16),
     to_signed(16#2080#, 16), to_signed(16#2000#, 16), to_signed(16#1F80#, 16), to_signed(16#1F00#, 16),
     to_signed(16#1E80#, 16), to_signed(16#1E00#, 16), to_signed(16#1D80#, 16), to_signed(16#1D00#, 16),
     to_signed(16#1C80#, 16), to_signed(16#1C00#, 16), to_signed(16#1B80#, 16), to_signed(16#1B00#, 16),
     to_signed(16#1A80#, 16), to_signed(16#1A00#, 16), to_signed(16#1980#, 16), to_signed(16#1900#, 16),
     to_signed(16#1880#, 16), to_signed(16#1800#, 16), to_signed(16#17C0#, 16), to_signed(16#1740#, 16),
     to_signed(16#16C0#, 16), to_signed(16#1640#, 16), to_signed(16#15C0#, 16), to_signed(16#1540#, 16),
     to_signed(16#14C0#, 16), to_signed(16#1440#, 16), to_signed(16#13C0#, 16), to_signed(16#1340#, 16),
     to_signed(16#1300#, 16), to_signed(16#1280#, 16), to_signed(16#1200#, 16), to_signed(16#1180#, 16),
     to_signed(16#1100#, 16), to_signed(16#10C0#, 16), to_signed(16#1040#, 16), to_signed(16#0FC0#, 16),
     to_signed(16#0F40#, 16), to_signed(16#0F00#, 16), to_signed(16#0E80#, 16), to_signed(16#0E00#, 16),
     to_signed(16#0DC0#, 16), to_signed(16#0D40#, 16), to_signed(16#0CC0#, 16), to_signed(16#0C80#, 16),
     to_signed(16#0C00#, 16), to_signed(16#0BC0#, 16), to_signed(16#0B40#, 16), to_signed(16#0B00#, 16),
     to_signed(16#0A80#, 16), to_signed(16#0A40#, 16), to_signed(16#09C0#, 16), to_signed(16#0980#, 16),
     to_signed(16#0900#, 16), to_signed(16#08C0#, 16), to_signed(16#0880#, 16), to_signed(16#0800#, 16),
     to_signed(16#07C0#, 16), to_signed(16#0780#, 16), to_signed(16#0700#, 16), to_signed(16#06C0#, 16),
     to_signed(16#0680#, 16), to_signed(16#0640#, 16), to_signed(16#0600#, 16), to_signed(16#0580#, 16),
     to_signed(16#0540#, 16), to_signed(16#0500#, 16), to_signed(16#04C0#, 16), to_signed(16#0480#, 16));  -- sfix16 [400]

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL DAC_Control_out1                 : std_logic;
  SIGNAL DAC_Control_out2                 : std_logic;
  SIGNAL DAC_Control_out3                 : std_logic;
  SIGNAL delayMatch49_reg                 : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL DAC_Control_out1_1               : std_logic;
  SIGNAL delayMatch50_reg                 : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL DAC_Control_out2_1               : std_logic;
  SIGNAL delayMatch51_reg                 : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL DAC_Control_out3_1               : std_logic;
  SIGNAL HEX0_out1                        : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX0_out2                        : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL HEX0_out1_unsigned               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch52_reg                 : vector_of_unsigned7(0 TO 13);  -- ufix7 [14]
  SIGNAL HEX0_out1_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX1_out1                        : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX1_out2                        : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL HEX1_out1_unsigned               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch53_reg                 : vector_of_unsigned7(0 TO 13);  -- ufix7 [14]
  SIGNAL HEX1_out1_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX2_out1                        : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX2_out2                        : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL HEX2_out1_unsigned               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch54_reg                 : vector_of_unsigned7(0 TO 13);  -- ufix7 [14]
  SIGNAL HEX2_out1_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX3_out1                        : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX3_out2                        : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL HEX3_out1_unsigned               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch55_reg                 : vector_of_unsigned7(0 TO 13);  -- ufix7 [14]
  SIGNAL HEX3_out1_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL kconst                           : signed(32 DOWNTO 0);  -- sfix33_En42
  SIGNAL kconst_1                         : signed(32 DOWNTO 0);  -- sfix33_En42
  SIGNAL Counter_Limited_out1             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant4_out1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Sum_sub_cast                     : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Sum_sub_cast_1                   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Sum_out1                         : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Counter_Limited_out1_dtc         : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Switch_out1                      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Switch_out1_1                    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Gain25_mul_temp                  : signed(65 DOWNTO 0);  -- sfix66_En42
  SIGNAL Gain25_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Gain25_out1_1                    : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Constant26_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Sum16_out1                       : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL delayMatch14_reg                 : vector_of_signed20(0 TO 9);  -- sfix20 [10]
  SIGNAL From17_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL kconst_2                         : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL kconst_3                         : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL Counter_Limited2_out1            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant11_out1                  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Relational_Operator9_relop1      : std_logic;
  SIGNAL HDL_Counter11_out1               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table9_k         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table9_out1      : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL alpha1_D_Lookup_Table9_out1_1    : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En6
  SIGNAL Constant32_out1                  : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Sum4_sub_cast                    : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum4_sub_cast_1                  : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum4_out1                        : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum4_out1_1                      : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Gain5_mul_temp                   : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Gain5_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Gain5_out1_1                     : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister_reg               : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL From8_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HEX3_out2_signed                 : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL delayMatch_reg                   : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL HEX3_out2_1                      : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL HEX2_out2_signed                 : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL HEX1_out2_signed                 : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL HEX0_out2_signed                 : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL Sum14_add_cast                   : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_add_cast_1                 : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_add_temp                   : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_add_cast_2                 : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_add_temp_1                 : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_add_cast_3                 : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum15_add_cast                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum15_add_cast_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum15_add_temp                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum15_add_cast_2                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum15_out1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Constant37_out1                  : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator15_1_cast     : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator15_1_cast_1   : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator15_relop1     : std_logic;
  SIGNAL Constant39_out1                  : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator17_1_cast     : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator17_1_cast_1   : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator17_relop1     : std_logic;
  SIGNAL Logical_Operator16_out1          : std_logic;
  SIGNAL Logical_Operator21_out1          : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator21_out1_1        : std_logic;
  SIGNAL aPA_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL aPA_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL aPA_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply_mul_temp                : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply_out1                    : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister46_reg             : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply_out1_1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant30_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Constant31_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Switch4_out1                     : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister47_reg             : vector_of_signed20(0 TO 6);  -- sfix20 [7]
  SIGNAL From56_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply5_mul_temp               : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply5_out1                   : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply5_out1_1                 : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL kconst_4                         : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL kconst_5                         : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL Constant5_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Relational_Operator7_relop1      : std_logic;
  SIGNAL HDL_Counter10_out1               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table6_k         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table6_out1      : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL alpha1_D_Lookup_Table6_out1_1    : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En6
  SIGNAL Constant29_out1                  : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Sum2_sub_cast                    : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum2_sub_cast_1                  : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum2_out1                        : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum2_out1_1                      : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Gain4_mul_temp                   : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Gain4_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Gain4_out1_1                     : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister2_reg              : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL From9_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Constant36_out1                  : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator14_1_cast     : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator14_1_cast_1   : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator14_relop1     : std_logic;
  SIGNAL Constant38_out1                  : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator16_1_cast     : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator16_1_cast_1   : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator16_relop1     : std_logic;
  SIGNAL Logical_Operator15_out1          : std_logic;
  SIGNAL Logical_Operator13_out1          : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator13_out1_1        : std_logic;
  SIGNAL bPA_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL bPA_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL bPA_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply1_mul_temp               : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply1_out1                   : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister48_reg             : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply1_out1_1                 : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Switch3_out1                     : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister49_reg             : vector_of_signed20(0 TO 6);  -- sfix20 [7]
  SIGNAL From55_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply6_mul_temp               : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply6_out1                   : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply6_out1_1                 : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL kconst_6                         : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL kconst_7                         : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL Constant3_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Relational_Operator6_relop1      : std_logic;
  SIGNAL HDL_Counter9_out1                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table3_k         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table3_out1      : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL alpha1_D_Lookup_Table3_out1_1    : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En6
  SIGNAL Constant16_out1                  : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Sum1_sub_cast                    : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum1_sub_cast_1                  : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum1_out1                        : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum1_out1_1                      : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Gain3_mul_temp                   : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Gain3_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Gain3_out1_1                     : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister24_reg             : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL From10_out1                      : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Constant35_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Relational_Operator13_1_cast     : signed(24 DOWNTO 0);  -- sfix25_En14
  SIGNAL Relational_Operator13_1_cast_1   : signed(24 DOWNTO 0);  -- sfix25_En14
  SIGNAL Relational_Operator13_relop1     : std_logic;
  SIGNAL Constant33_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Relational_Operator12_1_cast     : signed(24 DOWNTO 0);  -- sfix25_En14
  SIGNAL Relational_Operator12_1_cast_1   : signed(24 DOWNTO 0);  -- sfix25_En14
  SIGNAL Relational_Operator12_relop1     : std_logic;
  SIGNAL Logical_Operator12_out1          : std_logic;
  SIGNAL Logical_Operator14_out1          : std_logic;
  SIGNAL delayMatch7_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator14_out1_1        : std_logic;
  SIGNAL cPA_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL cPA_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL cPA_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply2_mul_temp               : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply2_out1                   : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister50_reg             : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply2_out1_1                 : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Switch2_out1                     : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister51_reg             : vector_of_signed20(0 TO 6);  -- sfix20 [7]
  SIGNAL From52_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply7_mul_temp               : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply7_out1                   : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply7_out1_1                 : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL kconst_8                         : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL kconst_9                         : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL Constant1_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Relational_Operator5_relop1      : std_logic;
  SIGNAL HDL_Counter8_out1                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table_k          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table_out1       : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL alpha1_D_Lookup_Table_out1_1     : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En6
  SIGNAL Constant2_out1                   : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Sum3_sub_cast                    : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum3_sub_cast_1                  : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum3_out1                        : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum3_out1_1                      : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Gain2_mul_temp                   : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Gain2_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Gain2_out1_1                     : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL delayMatch10_reg                 : vector_of_signed22(0 TO 4);  -- sfix22 [5]
  SIGNAL From11_out1                      : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum19_add_cast                   : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum19_add_cast_1                 : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum19_add_temp                   : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum19_add_cast_2                 : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum19_add_temp_1                 : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum19_add_cast_3                 : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum19_add_temp_2                 : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum19_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum19_out1_1                     : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Constant34_out1                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Relational_Operator20_1_cast     : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL Relational_Operator20_1_cast_1   : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL Relational_Operator20_relop1     : std_logic;
  SIGNAL Constant28_out1                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Relational_Operator18_1_cast     : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL Relational_Operator18_1_cast_1   : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL Relational_Operator18_relop1     : std_logic;
  SIGNAL Logical_Operator11_out1          : std_logic;
  SIGNAL Logical_Operator17_out1          : std_logic;
  SIGNAL delayMatch11_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator17_out1_1        : std_logic;
  SIGNAL dPA_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL dPA_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister41_reg             : vector_of_signed22(0 TO 4);  -- sfix22 [5]
  SIGNAL dPA_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply3_mul_temp               : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply3_out1                   : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister44_reg             : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply3_out1_1                 : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Switch1_out1                     : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister45_reg             : vector_of_signed20(0 TO 10);  -- sfix20 [11]
  SIGNAL From19_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply4_mul_temp               : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply4_out1                   : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply4_out1_1                 : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Phase_A_PWM_relop1               : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Logical_Operator8_out1           : std_logic;
  SIGNAL delayMatch56_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator8_out1_1         : std_logic;
  SIGNAL Logical_Operator9_out1           : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator10_out1          : std_logic;
  SIGNAL delayMatch57_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator10_out1_1        : std_logic;
  SIGNAL delayMatch28_reg                 : vector_of_signed20(0 TO 9);  -- sfix20 [10]
  SIGNAL From22_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister52_reg             : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL From_out1                        : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Logical_Operator23_out1          : std_logic;
  SIGNAL delayMatch15_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator23_out1_1        : std_logic;
  SIGNAL aPB_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL aPB_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL aPB_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply8_mul_temp               : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply8_out1                   : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister10_reg             : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply8_out1_1                 : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister11_reg             : vector_of_signed20(0 TO 6);  -- sfix20 [7]
  SIGNAL From46_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply13_mul_temp              : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply13_out1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply13_out1_1                : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister6_reg              : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL From6_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Logical_Operator19_out1          : std_logic;
  SIGNAL delayMatch18_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator19_out1_1        : std_logic;
  SIGNAL bPB_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL bPB_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL bPB_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply11_mul_temp              : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply11_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister12_reg             : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply11_out1_1                : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister13_reg             : vector_of_signed20(0 TO 6);  -- sfix20 [7]
  SIGNAL From44_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply14_mul_temp              : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply14_out1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply14_out1_1                : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister8_reg              : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL From14_out1                      : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Logical_Operator20_out1          : std_logic;
  SIGNAL delayMatch21_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator20_out1_1        : std_logic;
  SIGNAL cPB_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL cPB_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL cPB_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply12_mul_temp              : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply12_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister14_reg             : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply12_out1_1                : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister15_reg             : vector_of_signed20(0 TO 6);  -- sfix20 [7]
  SIGNAL From41_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply15_mul_temp              : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply15_out1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply15_out1_1                : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL kconst_10                        : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL kconst_11                        : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL Relational_Operator4_relop1      : std_logic;
  SIGNAL HDL_Counter1_out1                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table1_k         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table1_out1      : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL alpha1_D_Lookup_Table1_out1_1    : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En6
  SIGNAL Constant6_out1                   : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Sum5_sub_cast                    : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum5_sub_cast_1                  : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum5_out1                        : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum5_out1_1                      : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Gain6_mul_temp                   : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Gain6_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Gain6_out1_1                     : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL delayMatch24_reg                 : vector_of_signed22(0 TO 4);  -- sfix22 [5]
  SIGNAL From3_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum7_add_cast                    : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum7_add_cast_1                  : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum7_add_temp                    : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum7_add_cast_2                  : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum7_add_temp_1                  : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum7_add_cast_3                  : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum7_add_temp_2                  : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum7_out1                        : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum7_out1_1                      : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Logical_Operator22_out1          : std_logic;
  SIGNAL delayMatch25_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator22_out1_1        : std_logic;
  SIGNAL dPB_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL dPB_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister55_reg             : vector_of_signed22(0 TO 4);  -- sfix22 [5]
  SIGNAL dPB_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply9_mul_temp               : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply9_out1                   : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister4_reg              : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply9_out1_1                 : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister5_reg              : vector_of_signed20(0 TO 10);  -- sfix20 [11]
  SIGNAL From20_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply10_mul_temp              : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply10_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply10_out1_1                : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Phase_B_PWM_relop1               : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator24_out1          : std_logic;
  SIGNAL delayMatch58_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator24_out1_1        : std_logic;
  SIGNAL Logical_Operator25_out1          : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Logical_Operator18_out1          : std_logic;
  SIGNAL delayMatch59_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator18_out1_1        : std_logic;
  SIGNAL delayMatch42_reg                 : vector_of_signed20(0 TO 9);  -- sfix20 [10]
  SIGNAL From59_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister30_reg             : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL From28_out1                      : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Logical_Operator49_out1          : std_logic;
  SIGNAL delayMatch29_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator49_out1_1        : std_logic;
  SIGNAL aPC_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL aPC_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL aPC_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply22_mul_temp              : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply22_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister22_reg             : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply22_out1_1                : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister23_reg             : vector_of_signed20(0 TO 6);  -- sfix20 [7]
  SIGNAL From80_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply19_mul_temp              : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply19_out1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply19_out1_1                : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister18_reg             : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL From30_out1                      : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Logical_Operator41_out1          : std_logic;
  SIGNAL delayMatch32_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator41_out1_1        : std_logic;
  SIGNAL bPC_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL bPC_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL bPC_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply17_mul_temp              : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply17_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister26_reg             : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply17_out1_1                : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister27_reg             : vector_of_signed20(0 TO 6);  -- sfix20 [7]
  SIGNAL From65_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply20_mul_temp              : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply20_out1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply20_out1_1                : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister20_reg             : vector_of_signed22(0 TO 1);  -- sfix22 [2]
  SIGNAL From36_out1                      : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Logical_Operator42_out1          : std_logic;
  SIGNAL delayMatch35_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator42_out1_1        : std_logic;
  SIGNAL cPC_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL cPC_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL cPC_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply18_mul_temp              : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply18_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister28_reg             : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply18_out1_1                : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister29_reg             : vector_of_signed20(0 TO 6);  -- sfix20 [7]
  SIGNAL From63_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply21_mul_temp              : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply21_out1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply21_out1_1                : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL kconst_12                        : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL kconst_13                        : signed(16 DOWNTO 0);  -- sfix17_En22
  SIGNAL Relational_Operator8_relop1      : std_logic;
  SIGNAL HDL_Counter2_out1                : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table2_k         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL alpha1_D_Lookup_Table2_out1      : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL alpha1_D_Lookup_Table2_out1_1    : signed(15 DOWNTO 0) := to_signed(16#0000#, 16);  -- sfix16_En6
  SIGNAL Constant8_out1                   : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Sum6_sub_cast                    : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum6_sub_cast_1                  : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum6_out1                        : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Sum6_out1_1                      : signed(16 DOWNTO 0);  -- sfix17_En6
  SIGNAL Gain7_mul_temp                   : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL Gain7_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Gain7_out1_1                     : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL delayMatch38_reg                 : vector_of_signed22(0 TO 4);  -- sfix22 [5]
  SIGNAL From42_out1                      : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum8_add_cast                    : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum8_add_cast_1                  : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum8_add_temp                    : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum8_add_cast_2                  : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum8_add_temp_1                  : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum8_add_cast_3                  : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum8_add_temp_2                  : signed(23 DOWNTO 0);  -- sfix24_En15
  SIGNAL Sum8_out1                        : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum8_out1_1                      : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Logical_Operator45_out1          : std_logic;
  SIGNAL delayMatch39_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator45_out1_1        : std_logic;
  SIGNAL dPC_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL dPC_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister33_reg             : vector_of_signed22(0 TO 4);  -- sfix22 [5]
  SIGNAL dPC_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply23_mul_temp              : signed(43 DOWNTO 0);  -- sfix44_En30
  SIGNAL Multiply23_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister16_reg             : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL Multiply23_out1_1                : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL HwModeRegister17_reg             : vector_of_signed20(0 TO 10);  -- sfix20 [11]
  SIGNAL From53_out1                      : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply16_mul_temp              : signed(39 DOWNTO 0);  -- sfix40_En28
  SIGNAL Multiply16_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Multiply16_out1_1                : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Phase_C_PWM_relop1               : std_logic;
  SIGNAL Delay4_reg                       : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical_Operator51_out1          : std_logic;
  SIGNAL delayMatch60_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator51_out1_1        : std_logic;
  SIGNAL Logical_Operator52_out1          : std_logic;
  SIGNAL Delay5_reg                       : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Logical_Operator38_out1          : std_logic;
  SIGNAL delayMatch61_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator38_out1_1        : std_logic;
  SIGNAL kconst_14                        : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL kconst_15                        : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Constant10_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Sum13_add_cast                   : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Sum13_add_cast_1                 : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Sum13_out1                       : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Data_Type_Conversion1_out1       : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Data_Type_Conversion1_out1_1     : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Gain1_out1                       : signed(31 DOWNTO 0);  -- sfix32_En21
  SIGNAL Gain1_out1_1                     : signed(31 DOWNTO 0);  -- sfix32_En21
  SIGNAL Data_Type_Conversion3_out1       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL kconst_16                        : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL kconst_17                        : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Constant25_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Sum18_add_cast                   : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Sum18_add_cast_1                 : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Sum18_out1                       : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Data_Type_Conversion26_out1      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Data_Type_Conversion26_out1_1    : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Gain27_out1                      : signed(31 DOWNTO 0);  -- sfix32_En21
  SIGNAL delayMatch44_reg                 : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL SW15_1                           : std_logic;
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL Gain27_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En21
  SIGNAL Data_Type_Conversion27_out1      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL kconst_18                        : signed(32 DOWNTO 0);  -- sfix33_En35
  SIGNAL kconst_19                        : signed(32 DOWNTO 0);  -- sfix33_En35
  SIGNAL Gain_out1                        : signed(65 DOWNTO 0);  -- sfix66_En35
  SIGNAL Gain_out1_1                      : signed(65 DOWNTO 0);  -- sfix66_En35
  SIGNAL Data_Type_Conversion_out1        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL delayMatch43_reg                 : vector_of_unsigned8(0 TO 11);  -- ufix8 [12]
  SIGNAL From45_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch13_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant22_out1                  : std_logic;
  SIGNAL Constant23_out1                  : std_logic;
  SIGNAL Constant24_out1                  : std_logic;
  SIGNAL H_out1                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch45_reg                 : vector_of_unsigned10(0 TO 1);  -- ufix10 [2]
  SIGNAL From39_out1                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Constant82_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant82_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant78_out1                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Relational_Operator34_relop1     : std_logic;
  SIGNAL Relational_Operator34_out1       : std_logic;
  SIGNAL Multiply27_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Multiply27_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant83_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant83_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant79_out1                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Relational_Operator35_relop1     : std_logic;
  SIGNAL Relational_Operator35_out1       : std_logic;
  SIGNAL Multiply28_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Multiply28_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant84_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant84_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant80_out1                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Relational_Operator36_relop1     : std_logic;
  SIGNAL Relational_Operator36_out1       : std_logic;
  SIGNAL Multiply29_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Multiply29_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant85_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant85_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant81_out1                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Relational_Operator37_relop1     : std_logic;
  SIGNAL Relational_Operator37_out1       : std_logic;
  SIGNAL Multiply30_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Multiply30_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Multiport_Switch1_out1           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch62_reg                 : vector_of_unsigned7(0 TO 11);  -- ufix7 [12]
  SIGNAL Multiport_Switch1_out1_1         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL kconst_20                        : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL kconst_21                        : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Constant27_out1                  : signed(19 DOWNTO 0);  -- sfix20_En14
  SIGNAL Sum17_add_cast                   : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Sum17_add_cast_1                 : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Sum17_out1                       : signed(20 DOWNTO 0);  -- sfix21_En14
  SIGNAL Data_Type_Conversion25_out1      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Data_Type_Conversion25_out1_1    : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Gain26_out1                      : signed(31 DOWNTO 0);  -- sfix32_En21
  SIGNAL Gain26_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En21
  SIGNAL Data_Type_Conversion28_out1      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum24_add_cast                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_add_cast_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_add_temp                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_add_cast_2                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_add_temp_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_add_cast_3                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_out1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Logical_Operator28_out1          : std_logic;
  SIGNAL Constant15_out1                  : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Relational_Operator3_relop1      : std_logic;
  SIGNAL Logical_Operator29_out1          : std_logic;
  SIGNAL Logical_Operator34_out1          : std_logic;
  SIGNAL Counter_Limited1_out1            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant14_out1                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Constant12_out1                  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Logical_Operator27_out1          : std_logic;
  SIGNAL HDL_Counter12_out1               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL Logical_Operator26_out1          : std_logic;
  SIGNAL delayMatch63_reg                 : std_logic_vector(0 TO 13);  -- ufix1 [14]
  SIGNAL Logical_Operator27_out1_1        : std_logic;
  SIGNAL delayMatch46_reg                 : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL From18_out1                      : std_logic;
  SIGNAL Subsystem11_out1                 : std_logic;
  SIGNAL Subsystem11_out1_1               : std_logic;
  SIGNAL delayMatch47_reg                 : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL From51_out1                      : std_logic;
  SIGNAL Subsystem12_out1                 : std_logic;
  SIGNAL Subsystem12_out1_1               : std_logic;
  SIGNAL delayMatch48_reg                 : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL From57_out1                      : std_logic;
  SIGNAL Subsystem13_out1                 : std_logic;
  SIGNAL Subsystem13_out1_1               : std_logic;

BEGIN
  -- All Phases are active simultaneously
  -- 
  -- Ahmad Alastal
  -- 
  -- Phase A
  -- 
  -- Original Signal
  -- 
  -----------------------------------------------------------------------------------------------------------------------------------
  -- 
  -- Phase A
  -- 
  -- Triangular
  -- 
  -- DAC Control
  -- 
  -- Phase B
  -- 
  -- Phase C
  -- 
  -----------------------------------------------------------------------------------------------------------------------------------
  -- 
  -----------------------------------------------------------------------------------------------------------------------------------
  -- 
  -----------------------------------------------------------------------------------------------------------------------------------
  -- 
  -----------------------------------------------------------------------------------------------------------------------------------
  -- 
  -- 3rd Harmonic
  -- 
  -- 9th Harmonic
  -- 
  -- 15th Harmonic
  -- 
  -- Original Signal
  -- 
  -- Original Signal
  -- 
  -- Harmonic Selection
  -- 
  -- To specify harmonic multiplier follow these steps:Disable Reload pin.Enter some number [shown in HEX].Activate 
  -- Harmonic.Order is important, should follow these stepsfrom 1-3 without jump
  -- 
  -- The 50Hz harmonic is always activated, but not loaded
  -- with m value
  -- 
  -- Note:
  -- 
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- 
  -- Reload
  -- 
  -----------------------------------------------------------------
  -- 
  -- Harmonic Selection
  -- 
  -----------------------------------------------------------------
  -- 
  -- Note:
  -- 
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- 
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  -- 
  -- Phase B
  -- 
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- 
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  -- 
  -- Phase C
  -- 
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- 
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  -- 
  -- Demonstration HEX
  -- 
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |

  u_DAC_Control : DAC_Control
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              CLK_1 => DAC_Control_out1,
              Sync_n => DAC_Control_out2,
              Blank_n => DAC_Control_out3
              );

  u_HEX0 : HEX0
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Push_0 => Push_0,
              HEX0_1 => HEX0_out1,  -- ufix7
              Out2 => HEX0_out2  -- sfix20_En15
              );

  u_HEX1 : HEX1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Push_1 => Push_1,
              HEX1_1 => HEX1_out1,  -- ufix7
              Out2 => HEX1_out2  -- sfix20_En15
              );

  u_HEX2 : HEX2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Push_2 => Push_2,
              HEX2_1 => HEX2_out1,  -- ufix7
              out2 => HEX2_out2  -- sfix20_En15
              );

  u_HEX3 : HEX3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Push_3 => Push_3,
              HEX3_1 => HEX3_out1,  -- ufix7
              Out2 => HEX3_out2  -- sfix20_En15
              );

  u_aPA_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator21_out1_1,
              MulResult => aPA_Save_out1  -- sfix22_En15
              );

  u_bPA_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator13_out1_1,
              MulResult => bPA_Save_out1  -- sfix22_En15
              );

  u_cPA_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator14_out1_1,
              MulResult => cPA_Save_out1  -- sfix22_En15
              );

  u_dPA_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator17_out1_1,
              MulResult => dPA_Save_out1  -- sfix22_En15
              );

  u_aPB_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator23_out1_1,
              MulResult => aPB_Save_out1  -- sfix22_En15
              );

  u_bPB_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator19_out1_1,
              MulResult => bPB_Save_out1  -- sfix22_En15
              );

  u_cPB_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator20_out1_1,
              MulResult => cPB_Save_out1  -- sfix22_En15
              );

  u_dPB_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator22_out1_1,
              MulResult => dPB_Save_out1  -- sfix22_En15
              );

  u_aPC_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator49_out1_1,
              MulResult => aPC_Save_out1  -- sfix22_En15
              );

  u_bPC_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator41_out1_1,
              MulResult => bPC_Save_out1  -- sfix22_En15
              );

  u_cPC_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator42_out1_1,
              MulResult => cPC_Save_out1  -- sfix22_En15
              );

  u_dPC_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator45_out1_1,
              MulResult => dPC_Save_out1  -- sfix22_En15
              );

  u_Subsystem11 : Subsystem11_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Logical_Operator8_out1,
              Enable => From18_out1,
              Out1 => Subsystem11_out1
              );

  u_Subsystem12 : Subsystem12_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Logical_Operator24_out1,
              Enable => From51_out1,
              Out1 => Subsystem12_out1
              );

  u_Subsystem13 : Subsystem13_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Logical_Operator51_out1,
              Enable => From57_out1,
              Out1 => Subsystem13_out1
              );

  enb <= clk_enable;

  delayMatch49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch49_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch49_reg(0) <= DAC_Control_out1;
        delayMatch49_reg(1 TO 13) <= delayMatch49_reg(0 TO 12);
      END IF;
    END IF;
  END PROCESS delayMatch49_process;

  DAC_Control_out1_1 <= delayMatch49_reg(13);

  delayMatch50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch50_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch50_reg(0) <= DAC_Control_out2;
        delayMatch50_reg(1 TO 13) <= delayMatch50_reg(0 TO 12);
      END IF;
    END IF;
  END PROCESS delayMatch50_process;

  DAC_Control_out2_1 <= delayMatch50_reg(13);

  delayMatch51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch51_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch51_reg(0) <= DAC_Control_out3;
        delayMatch51_reg(1 TO 13) <= delayMatch51_reg(0 TO 12);
      END IF;
    END IF;
  END PROCESS delayMatch51_process;

  DAC_Control_out3_1 <= delayMatch51_reg(13);

  HEX0_out1_unsigned <= unsigned(HEX0_out1);

  delayMatch52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch52_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch52_reg(0) <= HEX0_out1_unsigned;
        delayMatch52_reg(1 TO 13) <= delayMatch52_reg(0 TO 12);
      END IF;
    END IF;
  END PROCESS delayMatch52_process;

  HEX0_out1_1 <= delayMatch52_reg(13);

  HEX0_O <= std_logic_vector(HEX0_out1_1);

  HEX1_out1_unsigned <= unsigned(HEX1_out1);

  delayMatch53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch53_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch53_reg(0) <= HEX1_out1_unsigned;
        delayMatch53_reg(1 TO 13) <= delayMatch53_reg(0 TO 12);
      END IF;
    END IF;
  END PROCESS delayMatch53_process;

  HEX1_out1_1 <= delayMatch53_reg(13);

  HEX1_O <= std_logic_vector(HEX1_out1_1);

  HEX2_out1_unsigned <= unsigned(HEX2_out1);

  delayMatch54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch54_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch54_reg(0) <= HEX2_out1_unsigned;
        delayMatch54_reg(1 TO 13) <= delayMatch54_reg(0 TO 12);
      END IF;
    END IF;
  END PROCESS delayMatch54_process;

  HEX2_out1_1 <= delayMatch54_reg(13);

  HEX2_O <= std_logic_vector(HEX2_out1_1);

  HEX3_out1_unsigned <= unsigned(HEX3_out1);

  delayMatch55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch55_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch55_reg(0) <= HEX3_out1_unsigned;
        delayMatch55_reg(1 TO 13) <= delayMatch55_reg(0 TO 12);
      END IF;
    END IF;
  END PROCESS delayMatch55_process;

  HEX3_out1_1 <= delayMatch55_reg(13);

  HEX3_O <= std_logic_vector(HEX3_out1_1);

  kconst <= signed'("011010001101101110001011101011001");

  HwModeRegister62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_1 <= kconst;
      END IF;
    END IF;
  END PROCESS HwModeRegister62_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 4999
  Counter_Limited_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_Limited_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Counter_Limited_out1 >= to_unsigned(16#1387#, 16) THEN 
          Counter_Limited_out1 <= to_unsigned(16#0000#, 16);
        ELSE 
          Counter_Limited_out1 <= Counter_Limited_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS Counter_Limited_process;


  Constant4_out1 <= to_unsigned(2499, 32);

  
  Relational_Operator_relop1 <= '1' WHEN resize(Counter_Limited_out1, 32) < Constant4_out1 ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN Relational_Operator_relop1 > '0' ELSE
      '0';

  Constant_out1 <= to_unsigned(4999, 32);

  Sum_sub_cast <= signed(resize(Constant_out1, 33));
  Sum_sub_cast_1 <= signed(resize(Counter_Limited_out1, 33));
  Sum_out1 <= Sum_sub_cast - Sum_sub_cast_1;

  Counter_Limited_out1_dtc <= signed(resize(Counter_Limited_out1, 33));

  
  Switch_out1 <= Sum_out1 WHEN switch_compare_1 = '0' ELSE
      Counter_Limited_out1_dtc;

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Switch_out1_1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Switch_out1_1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Gain25_mul_temp <= kconst_1 * Switch_out1_1;
  Gain25_out1 <= Gain25_mul_temp(47 DOWNTO 28);

  PipelineRegister37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain25_out1_1 <= to_signed(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain25_out1_1 <= Gain25_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister37_process;


  Constant26_out1 <= to_signed(16#04000#, 20);

  Sum16_out1 <= Gain25_out1_1 - Constant26_out1;

  delayMatch14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch14_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch14_reg(0) <= Sum16_out1;
        delayMatch14_reg(1 TO 9) <= delayMatch14_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  From17_out1 <= delayMatch14_reg(9);

  kconst_2 <= to_signed(16#08081#, 17);

  HwModeRegister72_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_3 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_3 <= kconst_2;
      END IF;
    END IF;
  END PROCESS HwModeRegister72_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2249
  Counter_Limited2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_Limited2_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Counter_Limited2_out1 >= to_unsigned(16#08C9#, 16) THEN 
          Counter_Limited2_out1 <= to_unsigned(16#0000#, 16);
        ELSE 
          Counter_Limited2_out1 <= Counter_Limited2_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS Counter_Limited2_process;


  Constant11_out1 <= to_unsigned(16#0095#, 16);

  
  Relational_Operator9_relop1 <= '1' WHEN Counter_Limited2_out1 = Constant11_out1 ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 399
  HDL_Counter11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter11_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Relational_Operator9_relop1 = '1' THEN 
          IF HDL_Counter11_out1 >= to_unsigned(16#18F#, 9) THEN 
            HDL_Counter11_out1 <= to_unsigned(16#000#, 9);
          ELSE 
            HDL_Counter11_out1 <= HDL_Counter11_out1 + to_unsigned(16#001#, 9);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter11_process;


  
  alpha1_D_Lookup_Table9_k <= to_unsigned(16#000#, 9) WHEN HDL_Counter11_out1 = to_unsigned(16#000#, 9) ELSE
      to_unsigned(16#18F#, 9) WHEN HDL_Counter11_out1 >= to_unsigned(16#18F#, 9) ELSE
      HDL_Counter11_out1;
  alpha1_D_Lookup_Table9_out1 <= nc(to_integer(alpha1_D_Lookup_Table9_k));

  PipelineRegister5_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha1_D_Lookup_Table9_out1_1 <= alpha1_D_Lookup_Table9_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister5_process;


  Constant32_out1 <= to_signed(16#1FE0#, 16);

  Sum4_sub_cast <= resize(alpha1_D_Lookup_Table9_out1_1, 17);
  Sum4_sub_cast_1 <= resize(Constant32_out1, 17);
  Sum4_out1 <= Sum4_sub_cast - Sum4_sub_cast_1;

  HwModeRegister73_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum4_out1_1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum4_out1_1 <= Sum4_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister73_process;


  Gain5_mul_temp <= kconst_3 * Sum4_out1_1;
  Gain5_out1 <= resize(Gain5_mul_temp(33 DOWNTO 13), 22);

  PipelineRegister42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain5_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain5_out1_1 <= Gain5_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister42_process;


  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister_reg(0) <= Gain5_out1_1;
        HwModeRegister_reg(1) <= HwModeRegister_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;

  From8_out1 <= HwModeRegister_reg(1);

  HEX3_out2_signed <= signed(HEX3_out2);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= HEX3_out2_signed;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  HEX3_out2_1 <= delayMatch_reg(1);

  HEX2_out2_signed <= signed(HEX2_out2);

  HEX1_out2_signed <= signed(HEX1_out2);

  HEX0_out2_signed <= signed(HEX0_out2);

  Sum14_add_cast <= resize(HEX3_out2_1, 22);
  Sum14_add_cast_1 <= resize(HEX2_out2_signed, 22);
  Sum14_add_temp <= Sum14_add_cast + Sum14_add_cast_1;
  Sum14_add_cast_2 <= resize(HEX1_out2_signed, 22);
  Sum14_add_temp_1 <= Sum14_add_temp + Sum14_add_cast_2;
  Sum14_add_cast_3 <= resize(HEX0_out2_signed, 22);
  Sum14_out1 <= Sum14_add_temp_1 + Sum14_add_cast_3;

  Sum15_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & SW0;
  Sum15_add_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & SW1;
  Sum15_add_temp <= Sum15_add_cast + Sum15_add_cast_1;
  Sum15_add_cast_2 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & SW2;
  Sum15_out1 <= Sum15_add_temp + Sum15_add_cast_2;

  Constant37_out1 <= to_signed(16#6000#, 16);

  Relational_Operator15_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  Relational_Operator15_1_cast_1 <= resize(Constant37_out1, 24);
  
  Relational_Operator15_relop1 <= '1' WHEN Relational_Operator15_1_cast = Relational_Operator15_1_cast_1 ELSE
      '0';

  Constant39_out1 <= to_signed(16#6000#, 16);

  Relational_Operator17_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  Relational_Operator17_1_cast_1 <= resize(Constant39_out1, 24);
  
  Relational_Operator17_relop1 <= '1' WHEN Relational_Operator17_1_cast = Relational_Operator17_1_cast_1 ELSE
      '0';

  Logical_Operator16_out1 <= Relational_Operator17_relop1 AND Reload;

  Logical_Operator21_out1 <= Relational_Operator15_relop1 AND Logical_Operator16_out1;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= Logical_Operator21_out1;
        delayMatch1_reg(1 TO 3) <= delayMatch1_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Logical_Operator21_out1_1 <= delayMatch1_reg(3);

  aPA_Save_out1_signed <= signed(aPA_Save_out1);

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      aPA_Save_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        aPA_Save_out1_1 <= aPA_Save_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;


  Multiply_mul_temp <= From8_out1 * aPA_Save_out1_1;
  Multiply_out1 <= Multiply_mul_temp(35 DOWNTO 16);

  HwModeRegister46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister46_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister46_reg(0) <= Multiply_out1;
        HwModeRegister46_reg(1) <= HwModeRegister46_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister46_process;

  Multiply_out1_1 <= HwModeRegister46_reg(1);

  
  switch_compare_1_1 <= '1' WHEN SW10 > '0' ELSE
      '0';

  Constant30_out1 <= to_signed(16#04000#, 20);

  Constant31_out1 <= to_signed(-16#04000#, 20);

  
  Switch4_out1 <= Constant30_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant31_out1;

  HwModeRegister47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister47_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister47_reg(0) <= Switch4_out1;
        HwModeRegister47_reg(1 TO 6) <= HwModeRegister47_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS HwModeRegister47_process;

  From56_out1 <= HwModeRegister47_reg(6);

  Multiply5_mul_temp <= Multiply_out1_1 * From56_out1;
  Multiply5_out1 <= Multiply5_mul_temp(34 DOWNTO 13);

  PipelineRegister29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply5_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply5_out1_1 <= Multiply5_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister29_process;


  kconst_4 <= to_signed(16#08081#, 17);

  HwModeRegister70_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_5 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_5 <= kconst_4;
      END IF;
    END IF;
  END PROCESS HwModeRegister70_process;


  Constant5_out1 <= to_unsigned(16#00F9#, 16);

  
  Relational_Operator7_relop1 <= '1' WHEN Counter_Limited2_out1 = Constant5_out1 ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 399
  HDL_Counter10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter10_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Relational_Operator7_relop1 = '1' THEN 
          IF HDL_Counter10_out1 >= to_unsigned(16#18F#, 9) THEN 
            HDL_Counter10_out1 <= to_unsigned(16#000#, 9);
          ELSE 
            HDL_Counter10_out1 <= HDL_Counter10_out1 + to_unsigned(16#001#, 9);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter10_process;


  
  alpha1_D_Lookup_Table6_k <= to_unsigned(16#000#, 9) WHEN HDL_Counter10_out1 = to_unsigned(16#000#, 9) ELSE
      to_unsigned(16#18F#, 9) WHEN HDL_Counter10_out1 >= to_unsigned(16#18F#, 9) ELSE
      HDL_Counter10_out1;
  alpha1_D_Lookup_Table6_out1 <= nc_2(to_integer(alpha1_D_Lookup_Table6_k));

  PipelineRegister4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha1_D_Lookup_Table6_out1_1 <= alpha1_D_Lookup_Table6_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  Constant29_out1 <= to_signed(16#1FE0#, 16);

  Sum2_sub_cast <= resize(alpha1_D_Lookup_Table6_out1_1, 17);
  Sum2_sub_cast_1 <= resize(Constant29_out1, 17);
  Sum2_out1 <= Sum2_sub_cast - Sum2_sub_cast_1;

  HwModeRegister71_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum2_out1_1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum2_out1_1 <= Sum2_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister71_process;


  Gain4_mul_temp <= kconst_5 * Sum2_out1_1;
  Gain4_out1 <= resize(Gain4_mul_temp(33 DOWNTO 13), 22);

  PipelineRegister41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain4_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain4_out1_1 <= Gain4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister41_process;


  HwModeRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister2_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister2_reg(0) <= Gain4_out1_1;
        HwModeRegister2_reg(1) <= HwModeRegister2_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;

  From9_out1 <= HwModeRegister2_reg(1);

  Constant36_out1 <= to_signed(16#4000#, 16);

  Relational_Operator14_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  Relational_Operator14_1_cast_1 <= resize(Constant36_out1, 24);
  
  Relational_Operator14_relop1 <= '1' WHEN Relational_Operator14_1_cast = Relational_Operator14_1_cast_1 ELSE
      '0';

  Constant38_out1 <= to_signed(16#4000#, 16);

  Relational_Operator16_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  Relational_Operator16_1_cast_1 <= resize(Constant38_out1, 24);
  
  Relational_Operator16_relop1 <= '1' WHEN Relational_Operator16_1_cast = Relational_Operator16_1_cast_1 ELSE
      '0';

  Logical_Operator15_out1 <= Relational_Operator16_relop1 AND Reload;

  Logical_Operator13_out1 <= Relational_Operator14_relop1 AND Logical_Operator15_out1;

  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch4_reg(0) <= Logical_Operator13_out1;
        delayMatch4_reg(1 TO 3) <= delayMatch4_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  Logical_Operator13_out1_1 <= delayMatch4_reg(3);

  bPA_Save_out1_signed <= signed(bPA_Save_out1);

  HwModeRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      bPA_Save_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        bPA_Save_out1_1 <= bPA_Save_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;


  Multiply1_mul_temp <= From9_out1 * bPA_Save_out1_1;
  Multiply1_out1 <= Multiply1_mul_temp(35 DOWNTO 16);

  HwModeRegister48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister48_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister48_reg(0) <= Multiply1_out1;
        HwModeRegister48_reg(1) <= HwModeRegister48_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister48_process;

  Multiply1_out1_1 <= HwModeRegister48_reg(1);

  
  switch_compare_1_2 <= '1' WHEN SW9 > '0' ELSE
      '0';

  
  Switch3_out1 <= Constant30_out1 WHEN switch_compare_1_2 = '0' ELSE
      Constant31_out1;

  HwModeRegister49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister49_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister49_reg(0) <= Switch3_out1;
        HwModeRegister49_reg(1 TO 6) <= HwModeRegister49_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS HwModeRegister49_process;

  From55_out1 <= HwModeRegister49_reg(6);

  Multiply6_mul_temp <= Multiply1_out1_1 * From55_out1;
  Multiply6_out1 <= Multiply6_mul_temp(34 DOWNTO 13);

  PipelineRegister30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply6_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply6_out1_1 <= Multiply6_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister30_process;


  kconst_6 <= to_signed(16#08081#, 17);

  HwModeRegister68_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_7 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_7 <= kconst_6;
      END IF;
    END IF;
  END PROCESS HwModeRegister68_process;


  Constant3_out1 <= to_unsigned(16#02ED#, 16);

  
  Relational_Operator6_relop1 <= '1' WHEN Counter_Limited2_out1 = Constant3_out1 ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 399
  HDL_Counter9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter9_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Relational_Operator6_relop1 = '1' THEN 
          IF HDL_Counter9_out1 >= to_unsigned(16#18F#, 9) THEN 
            HDL_Counter9_out1 <= to_unsigned(16#000#, 9);
          ELSE 
            HDL_Counter9_out1 <= HDL_Counter9_out1 + to_unsigned(16#001#, 9);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter9_process;


  
  alpha1_D_Lookup_Table3_k <= to_unsigned(16#000#, 9) WHEN HDL_Counter9_out1 = to_unsigned(16#000#, 9) ELSE
      to_unsigned(16#18F#, 9) WHEN HDL_Counter9_out1 >= to_unsigned(16#18F#, 9) ELSE
      HDL_Counter9_out1;
  alpha1_D_Lookup_Table3_out1 <= nc_4(to_integer(alpha1_D_Lookup_Table3_k));

  PipelineRegister3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha1_D_Lookup_Table3_out1_1 <= alpha1_D_Lookup_Table3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  Constant16_out1 <= to_signed(16#1FE0#, 16);

  Sum1_sub_cast <= resize(alpha1_D_Lookup_Table3_out1_1, 17);
  Sum1_sub_cast_1 <= resize(Constant16_out1, 17);
  Sum1_out1 <= Sum1_sub_cast - Sum1_sub_cast_1;

  HwModeRegister69_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum1_out1_1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum1_out1_1 <= Sum1_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister69_process;


  Gain3_mul_temp <= kconst_7 * Sum1_out1_1;
  Gain3_out1 <= resize(Gain3_mul_temp(33 DOWNTO 13), 22);

  PipelineRegister40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain3_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain3_out1_1 <= Gain3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister40_process;


  HwModeRegister24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister24_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister24_reg(0) <= Gain3_out1_1;
        HwModeRegister24_reg(1) <= HwModeRegister24_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister24_process;

  From10_out1 <= HwModeRegister24_reg(1);

  Constant35_out1 <= to_signed(16#4000#, 16);

  Relational_Operator13_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25));
  Relational_Operator13_1_cast_1 <= resize(Constant35_out1, 25);
  
  Relational_Operator13_relop1 <= '1' WHEN Relational_Operator13_1_cast = Relational_Operator13_1_cast_1 ELSE
      '0';

  Constant33_out1 <= to_signed(16#4000#, 16);

  Relational_Operator12_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25));
  Relational_Operator12_1_cast_1 <= resize(Constant33_out1, 25);
  
  Relational_Operator12_relop1 <= '1' WHEN Relational_Operator12_1_cast = Relational_Operator12_1_cast_1 ELSE
      '0';

  Logical_Operator12_out1 <= Relational_Operator12_relop1 AND Reload;

  Logical_Operator14_out1 <= Relational_Operator13_relop1 AND Logical_Operator12_out1;

  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch7_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch7_reg(0) <= Logical_Operator14_out1;
        delayMatch7_reg(1 TO 3) <= delayMatch7_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  Logical_Operator14_out1_1 <= delayMatch7_reg(3);

  cPA_Save_out1_signed <= signed(cPA_Save_out1);

  HwModeRegister25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cPA_Save_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        cPA_Save_out1_1 <= cPA_Save_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister25_process;


  Multiply2_mul_temp <= From10_out1 * cPA_Save_out1_1;
  Multiply2_out1 <= Multiply2_mul_temp(35 DOWNTO 16);

  HwModeRegister50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister50_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister50_reg(0) <= Multiply2_out1;
        HwModeRegister50_reg(1) <= HwModeRegister50_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister50_process;

  Multiply2_out1_1 <= HwModeRegister50_reg(1);

  
  switch_compare_1_3 <= '1' WHEN SW8 > '0' ELSE
      '0';

  
  Switch2_out1 <= Constant30_out1 WHEN switch_compare_1_3 = '0' ELSE
      Constant31_out1;

  HwModeRegister51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister51_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister51_reg(0) <= Switch2_out1;
        HwModeRegister51_reg(1 TO 6) <= HwModeRegister51_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS HwModeRegister51_process;

  From52_out1 <= HwModeRegister51_reg(6);

  Multiply7_mul_temp <= Multiply2_out1_1 * From52_out1;
  Multiply7_out1 <= Multiply7_mul_temp(34 DOWNTO 13);

  PipelineRegister31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply7_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply7_out1_1 <= Multiply7_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister31_process;


  kconst_8 <= to_signed(16#08081#, 17);

  HwModeRegister60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_9 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_9 <= kconst_8;
      END IF;
    END IF;
  END PROCESS HwModeRegister60_process;


  Constant1_out1 <= to_unsigned(16#08C9#, 16);

  
  Relational_Operator5_relop1 <= '1' WHEN Counter_Limited2_out1 = Constant1_out1 ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 399
  HDL_Counter8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter8_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Relational_Operator5_relop1 = '1' THEN 
          IF HDL_Counter8_out1 >= to_unsigned(16#18F#, 9) THEN 
            HDL_Counter8_out1 <= to_unsigned(16#000#, 9);
          ELSE 
            HDL_Counter8_out1 <= HDL_Counter8_out1 + to_unsigned(16#001#, 9);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter8_process;


  
  alpha1_D_Lookup_Table_k <= to_unsigned(16#000#, 9) WHEN HDL_Counter8_out1 = to_unsigned(16#000#, 9) ELSE
      to_unsigned(16#18F#, 9) WHEN HDL_Counter8_out1 >= to_unsigned(16#18F#, 9) ELSE
      HDL_Counter8_out1;
  alpha1_D_Lookup_Table_out1 <= nc_6(to_integer(alpha1_D_Lookup_Table_k));

  PipelineRegister_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha1_D_Lookup_Table_out1_1 <= alpha1_D_Lookup_Table_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Constant2_out1 <= to_signed(16#1FE0#, 16);

  Sum3_sub_cast <= resize(alpha1_D_Lookup_Table_out1_1, 17);
  Sum3_sub_cast_1 <= resize(Constant2_out1, 17);
  Sum3_out1 <= Sum3_sub_cast - Sum3_sub_cast_1;

  HwModeRegister61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum3_out1_1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum3_out1_1 <= Sum3_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister61_process;


  Gain2_mul_temp <= kconst_9 * Sum3_out1_1;
  Gain2_out1 <= resize(Gain2_mul_temp(33 DOWNTO 13), 22);

  PipelineRegister36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain2_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain2_out1_1 <= Gain2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister36_process;


  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch10_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch10_reg(0) <= Gain2_out1_1;
        delayMatch10_reg(1 TO 4) <= delayMatch10_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  From11_out1 <= delayMatch10_reg(4);

  Sum19_add_cast <= resize(Multiply5_out1_1, 24);
  Sum19_add_cast_1 <= resize(Multiply6_out1_1, 24);
  Sum19_add_temp <= Sum19_add_cast + Sum19_add_cast_1;
  Sum19_add_cast_2 <= resize(Multiply7_out1_1, 24);
  Sum19_add_temp_1 <= Sum19_add_temp + Sum19_add_cast_2;
  Sum19_add_cast_3 <= resize(From11_out1, 24);
  Sum19_add_temp_2 <= Sum19_add_temp_1 + Sum19_add_cast_3;
  Sum19_out1 <= Sum19_add_temp_2(21 DOWNTO 0);

  HwModeRegister40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum19_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum19_out1_1 <= Sum19_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister40_process;


  Constant34_out1 <= to_signed(16#0000#, 16);

  Relational_Operator20_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 21));
  Relational_Operator20_1_cast_1 <= resize(Constant34_out1, 21);
  
  Relational_Operator20_relop1 <= '1' WHEN Relational_Operator20_1_cast = Relational_Operator20_1_cast_1 ELSE
      '0';

  Constant28_out1 <= to_signed(16#0000#, 16);

  Relational_Operator18_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 21));
  Relational_Operator18_1_cast_1 <= resize(Constant28_out1, 21);
  
  Relational_Operator18_relop1 <= '1' WHEN Relational_Operator18_1_cast = Relational_Operator18_1_cast_1 ELSE
      '0';

  Logical_Operator11_out1 <= Relational_Operator18_relop1 AND Reload;

  Logical_Operator17_out1 <= Relational_Operator20_relop1 AND Logical_Operator11_out1;

  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch11_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch11_reg(0) <= Logical_Operator17_out1;
        delayMatch11_reg(1 TO 3) <= delayMatch11_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  Logical_Operator17_out1_1 <= delayMatch11_reg(3);

  dPA_Save_out1_signed <= signed(dPA_Save_out1);

  HwModeRegister41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister41_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister41_reg(0) <= dPA_Save_out1_signed;
        HwModeRegister41_reg(1 TO 4) <= HwModeRegister41_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS HwModeRegister41_process;

  dPA_Save_out1_1 <= HwModeRegister41_reg(4);

  Multiply3_mul_temp <= Sum19_out1_1 * dPA_Save_out1_1;
  Multiply3_out1 <= Multiply3_mul_temp(35 DOWNTO 16);

  HwModeRegister44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister44_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister44_reg(0) <= Multiply3_out1;
        HwModeRegister44_reg(1) <= HwModeRegister44_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister44_process;

  Multiply3_out1_1 <= HwModeRegister44_reg(1);

  
  switch_compare_1_4 <= '1' WHEN SW7 > '0' ELSE
      '0';

  
  Switch1_out1 <= Constant30_out1 WHEN switch_compare_1_4 = '0' ELSE
      Constant31_out1;

  HwModeRegister45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister45_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister45_reg(0) <= Switch1_out1;
        HwModeRegister45_reg(1 TO 10) <= HwModeRegister45_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister45_process;

  From19_out1 <= HwModeRegister45_reg(10);

  Multiply4_mul_temp <= Multiply3_out1_1 * From19_out1;
  Multiply4_out1 <= Multiply4_mul_temp(33 DOWNTO 14);

  PipelineRegister28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply4_out1_1 <= to_signed(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply4_out1_1 <= Multiply4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister28_process;


  
  Phase_A_PWM_relop1 <= '1' WHEN From17_out1 >= Multiply4_out1_1 ELSE
      '0';

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_reg(0) <= Phase_A_PWM_relop1;
        Delay_reg(1 TO 99) <= Delay_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(99);

  Logical_Operator8_out1 <= Phase_A_PWM_relop1 AND Delay_out1;

  delayMatch56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch56_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch56_reg(0) <= Logical_Operator8_out1;
        delayMatch56_reg(1) <= delayMatch56_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch56_process;

  Logical_Operator8_out1_1 <= delayMatch56_reg(1);

  Logical_Operator9_out1 <=  NOT Phase_A_PWM_relop1;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg(0) <= Logical_Operator9_out1;
        Delay1_reg(1 TO 99) <= Delay1_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(99);

  Logical_Operator10_out1 <= Logical_Operator9_out1 AND Delay1_out1;

  delayMatch57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch57_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch57_reg(0) <= Logical_Operator10_out1;
        delayMatch57_reg(1) <= delayMatch57_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch57_process;

  Logical_Operator10_out1_1 <= delayMatch57_reg(1);

  delayMatch28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch28_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch28_reg(0) <= Sum16_out1;
        delayMatch28_reg(1 TO 9) <= delayMatch28_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch28_process;

  From22_out1 <= delayMatch28_reg(9);

  HwModeRegister52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister52_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister52_reg(0) <= Gain5_out1_1;
        HwModeRegister52_reg(1) <= HwModeRegister52_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister52_process;

  From_out1 <= HwModeRegister52_reg(1);

  Logical_Operator23_out1 <= Relational_Operator15_relop1 AND Logical_Operator16_out1;

  delayMatch15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch15_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch15_reg(0) <= Logical_Operator23_out1;
        delayMatch15_reg(1 TO 3) <= delayMatch15_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  Logical_Operator23_out1_1 <= delayMatch15_reg(3);

  aPB_Save_out1_signed <= signed(aPB_Save_out1);

  HwModeRegister53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      aPB_Save_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        aPB_Save_out1_1 <= aPB_Save_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister53_process;


  Multiply8_mul_temp <= From_out1 * aPB_Save_out1_1;
  Multiply8_out1 <= Multiply8_mul_temp(35 DOWNTO 16);

  HwModeRegister10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister10_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister10_reg(0) <= Multiply8_out1;
        HwModeRegister10_reg(1) <= HwModeRegister10_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister10_process;

  Multiply8_out1_1 <= HwModeRegister10_reg(1);

  HwModeRegister11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister11_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister11_reg(0) <= Switch4_out1;
        HwModeRegister11_reg(1 TO 6) <= HwModeRegister11_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS HwModeRegister11_process;

  From46_out1 <= HwModeRegister11_reg(6);

  Multiply13_mul_temp <= Multiply8_out1_1 * From46_out1;
  Multiply13_out1 <= Multiply13_mul_temp(34 DOWNTO 13);

  PipelineRegister11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply13_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply13_out1_1 <= Multiply13_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister11_process;


  HwModeRegister6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister6_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister6_reg(0) <= Gain4_out1_1;
        HwModeRegister6_reg(1) <= HwModeRegister6_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister6_process;

  From6_out1 <= HwModeRegister6_reg(1);

  Logical_Operator19_out1 <= Relational_Operator14_relop1 AND Logical_Operator15_out1;

  delayMatch18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch18_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch18_reg(0) <= Logical_Operator19_out1;
        delayMatch18_reg(1 TO 3) <= delayMatch18_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  Logical_Operator19_out1_1 <= delayMatch18_reg(3);

  bPB_Save_out1_signed <= signed(bPB_Save_out1);

  HwModeRegister7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      bPB_Save_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        bPB_Save_out1_1 <= bPB_Save_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister7_process;


  Multiply11_mul_temp <= From6_out1 * bPB_Save_out1_1;
  Multiply11_out1 <= Multiply11_mul_temp(35 DOWNTO 16);

  HwModeRegister12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister12_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister12_reg(0) <= Multiply11_out1;
        HwModeRegister12_reg(1) <= HwModeRegister12_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister12_process;

  Multiply11_out1_1 <= HwModeRegister12_reg(1);

  HwModeRegister13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister13_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister13_reg(0) <= Switch3_out1;
        HwModeRegister13_reg(1 TO 6) <= HwModeRegister13_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS HwModeRegister13_process;

  From44_out1 <= HwModeRegister13_reg(6);

  Multiply14_mul_temp <= Multiply11_out1_1 * From44_out1;
  Multiply14_out1 <= Multiply14_mul_temp(34 DOWNTO 13);

  PipelineRegister12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply14_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply14_out1_1 <= Multiply14_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister12_process;


  HwModeRegister8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister8_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister8_reg(0) <= Gain3_out1_1;
        HwModeRegister8_reg(1) <= HwModeRegister8_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister8_process;

  From14_out1 <= HwModeRegister8_reg(1);

  Logical_Operator20_out1 <= Relational_Operator13_relop1 AND Logical_Operator12_out1;

  delayMatch21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch21_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch21_reg(0) <= Logical_Operator20_out1;
        delayMatch21_reg(1 TO 3) <= delayMatch21_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  Logical_Operator20_out1_1 <= delayMatch21_reg(3);

  cPB_Save_out1_signed <= signed(cPB_Save_out1);

  HwModeRegister9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cPB_Save_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        cPB_Save_out1_1 <= cPB_Save_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister9_process;


  Multiply12_mul_temp <= From14_out1 * cPB_Save_out1_1;
  Multiply12_out1 <= Multiply12_mul_temp(35 DOWNTO 16);

  HwModeRegister14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister14_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister14_reg(0) <= Multiply12_out1;
        HwModeRegister14_reg(1) <= HwModeRegister14_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister14_process;

  Multiply12_out1_1 <= HwModeRegister14_reg(1);

  HwModeRegister15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister15_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister15_reg(0) <= Switch2_out1;
        HwModeRegister15_reg(1 TO 6) <= HwModeRegister15_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS HwModeRegister15_process;

  From41_out1 <= HwModeRegister15_reg(6);

  Multiply15_mul_temp <= Multiply12_out1_1 * From41_out1;
  Multiply15_out1 <= Multiply15_mul_temp(34 DOWNTO 13);

  PipelineRegister13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply15_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply15_out1_1 <= Multiply15_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister13_process;


  kconst_10 <= to_signed(16#08081#, 17);

  HwModeRegister74_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_11 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_11 <= kconst_10;
      END IF;
    END IF;
  END PROCESS HwModeRegister74_process;


  
  Relational_Operator4_relop1 <= '1' WHEN Counter_Limited2_out1 = Constant1_out1 ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 399
  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Relational_Operator4_relop1 = '1' THEN 
          IF HDL_Counter1_out1 >= to_unsigned(16#18F#, 9) THEN 
            HDL_Counter1_out1 <= to_unsigned(16#000#, 9);
          ELSE 
            HDL_Counter1_out1 <= HDL_Counter1_out1 + to_unsigned(16#001#, 9);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  
  alpha1_D_Lookup_Table1_k <= to_unsigned(16#000#, 9) WHEN HDL_Counter1_out1 = to_unsigned(16#000#, 9) ELSE
      to_unsigned(16#18F#, 9) WHEN HDL_Counter1_out1 >= to_unsigned(16#18F#, 9) ELSE
      HDL_Counter1_out1;
  alpha1_D_Lookup_Table1_out1 <= nc_8(to_integer(alpha1_D_Lookup_Table1_k));

  PipelineRegister1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha1_D_Lookup_Table1_out1_1 <= alpha1_D_Lookup_Table1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Constant6_out1 <= to_signed(16#1FE0#, 16);

  Sum5_sub_cast <= resize(alpha1_D_Lookup_Table1_out1_1, 17);
  Sum5_sub_cast_1 <= resize(Constant6_out1, 17);
  Sum5_out1 <= Sum5_sub_cast - Sum5_sub_cast_1;

  HwModeRegister75_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum5_out1_1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum5_out1_1 <= Sum5_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister75_process;


  Gain6_mul_temp <= kconst_11 * Sum5_out1_1;
  Gain6_out1 <= resize(Gain6_mul_temp(33 DOWNTO 13), 22);

  PipelineRegister43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain6_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain6_out1_1 <= Gain6_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister43_process;


  delayMatch24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch24_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch24_reg(0) <= Gain6_out1_1;
        delayMatch24_reg(1 TO 4) <= delayMatch24_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch24_process;

  From3_out1 <= delayMatch24_reg(4);

  Sum7_add_cast <= resize(Multiply13_out1_1, 24);
  Sum7_add_cast_1 <= resize(Multiply14_out1_1, 24);
  Sum7_add_temp <= Sum7_add_cast + Sum7_add_cast_1;
  Sum7_add_cast_2 <= resize(Multiply15_out1_1, 24);
  Sum7_add_temp_1 <= Sum7_add_temp + Sum7_add_cast_2;
  Sum7_add_cast_3 <= resize(From3_out1, 24);
  Sum7_add_temp_2 <= Sum7_add_temp_1 + Sum7_add_cast_3;
  Sum7_out1 <= Sum7_add_temp_2(21 DOWNTO 0);

  HwModeRegister54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum7_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum7_out1_1 <= Sum7_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister54_process;


  Logical_Operator22_out1 <= Relational_Operator20_relop1 AND Logical_Operator11_out1;

  delayMatch25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch25_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch25_reg(0) <= Logical_Operator22_out1;
        delayMatch25_reg(1 TO 3) <= delayMatch25_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch25_process;

  Logical_Operator22_out1_1 <= delayMatch25_reg(3);

  dPB_Save_out1_signed <= signed(dPB_Save_out1);

  HwModeRegister55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister55_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister55_reg(0) <= dPB_Save_out1_signed;
        HwModeRegister55_reg(1 TO 4) <= HwModeRegister55_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS HwModeRegister55_process;

  dPB_Save_out1_1 <= HwModeRegister55_reg(4);

  Multiply9_mul_temp <= Sum7_out1_1 * dPB_Save_out1_1;
  Multiply9_out1 <= Multiply9_mul_temp(35 DOWNTO 16);

  HwModeRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister4_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister4_reg(0) <= Multiply9_out1;
        HwModeRegister4_reg(1) <= HwModeRegister4_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;

  Multiply9_out1_1 <= HwModeRegister4_reg(1);

  HwModeRegister5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister5_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister5_reg(0) <= Switch1_out1;
        HwModeRegister5_reg(1 TO 10) <= HwModeRegister5_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister5_process;

  From20_out1 <= HwModeRegister5_reg(10);

  Multiply10_mul_temp <= Multiply9_out1_1 * From20_out1;
  Multiply10_out1 <= Multiply10_mul_temp(33 DOWNTO 14);

  PipelineRegister8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply10_out1_1 <= to_signed(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply10_out1_1 <= Multiply10_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister8_process;


  
  Phase_B_PWM_relop1 <= '1' WHEN From22_out1 >= Multiply10_out1_1 ELSE
      '0';

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= Phase_B_PWM_relop1;
        Delay2_reg(1 TO 99) <= Delay2_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(99);

  Logical_Operator24_out1 <= Phase_B_PWM_relop1 AND Delay2_out1;

  delayMatch58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch58_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch58_reg(0) <= Logical_Operator24_out1;
        delayMatch58_reg(1) <= delayMatch58_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch58_process;

  Logical_Operator24_out1_1 <= delayMatch58_reg(1);

  Logical_Operator25_out1 <=  NOT Phase_B_PWM_relop1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= Logical_Operator25_out1;
        Delay3_reg(1 TO 99) <= Delay3_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(99);

  Logical_Operator18_out1 <= Logical_Operator25_out1 AND Delay3_out1;

  delayMatch59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch59_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch59_reg(0) <= Logical_Operator18_out1;
        delayMatch59_reg(1) <= delayMatch59_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch59_process;

  Logical_Operator18_out1_1 <= delayMatch59_reg(1);

  delayMatch42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch42_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch42_reg(0) <= Sum16_out1;
        delayMatch42_reg(1 TO 9) <= delayMatch42_reg(0 TO 8);
      END IF;
    END IF;
  END PROCESS delayMatch42_process;

  From59_out1 <= delayMatch42_reg(9);

  HwModeRegister30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister30_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister30_reg(0) <= Gain5_out1_1;
        HwModeRegister30_reg(1) <= HwModeRegister30_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister30_process;

  From28_out1 <= HwModeRegister30_reg(1);

  Logical_Operator49_out1 <= Relational_Operator15_relop1 AND Logical_Operator16_out1;

  delayMatch29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch29_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch29_reg(0) <= Logical_Operator49_out1;
        delayMatch29_reg(1 TO 3) <= delayMatch29_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch29_process;

  Logical_Operator49_out1_1 <= delayMatch29_reg(3);

  aPC_Save_out1_signed <= signed(aPC_Save_out1);

  HwModeRegister31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      aPC_Save_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        aPC_Save_out1_1 <= aPC_Save_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister31_process;


  Multiply22_mul_temp <= From28_out1 * aPC_Save_out1_1;
  Multiply22_out1 <= Multiply22_mul_temp(35 DOWNTO 16);

  HwModeRegister22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister22_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister22_reg(0) <= Multiply22_out1;
        HwModeRegister22_reg(1) <= HwModeRegister22_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister22_process;

  Multiply22_out1_1 <= HwModeRegister22_reg(1);

  HwModeRegister23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister23_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister23_reg(0) <= Switch4_out1;
        HwModeRegister23_reg(1 TO 6) <= HwModeRegister23_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS HwModeRegister23_process;

  From80_out1 <= HwModeRegister23_reg(6);

  Multiply19_mul_temp <= Multiply22_out1_1 * From80_out1;
  Multiply19_out1 <= Multiply19_mul_temp(34 DOWNTO 13);

  PipelineRegister17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply19_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply19_out1_1 <= Multiply19_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister17_process;


  HwModeRegister18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister18_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister18_reg(0) <= Gain4_out1_1;
        HwModeRegister18_reg(1) <= HwModeRegister18_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister18_process;

  From30_out1 <= HwModeRegister18_reg(1);

  Logical_Operator41_out1 <= Relational_Operator14_relop1 AND Logical_Operator15_out1;

  delayMatch32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch32_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch32_reg(0) <= Logical_Operator41_out1;
        delayMatch32_reg(1 TO 3) <= delayMatch32_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch32_process;

  Logical_Operator41_out1_1 <= delayMatch32_reg(3);

  bPC_Save_out1_signed <= signed(bPC_Save_out1);

  HwModeRegister19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      bPC_Save_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        bPC_Save_out1_1 <= bPC_Save_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister19_process;


  Multiply17_mul_temp <= From30_out1 * bPC_Save_out1_1;
  Multiply17_out1 <= Multiply17_mul_temp(35 DOWNTO 16);

  HwModeRegister26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister26_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister26_reg(0) <= Multiply17_out1;
        HwModeRegister26_reg(1) <= HwModeRegister26_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister26_process;

  Multiply17_out1_1 <= HwModeRegister26_reg(1);

  HwModeRegister27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister27_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister27_reg(0) <= Switch3_out1;
        HwModeRegister27_reg(1 TO 6) <= HwModeRegister27_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS HwModeRegister27_process;

  From65_out1 <= HwModeRegister27_reg(6);

  Multiply20_mul_temp <= Multiply17_out1_1 * From65_out1;
  Multiply20_out1 <= Multiply20_mul_temp(34 DOWNTO 13);

  PipelineRegister19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply20_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply20_out1_1 <= Multiply20_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister19_process;


  HwModeRegister20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister20_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister20_reg(0) <= Gain3_out1_1;
        HwModeRegister20_reg(1) <= HwModeRegister20_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister20_process;

  From36_out1 <= HwModeRegister20_reg(1);

  Logical_Operator42_out1 <= Relational_Operator13_relop1 AND Logical_Operator12_out1;

  delayMatch35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch35_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch35_reg(0) <= Logical_Operator42_out1;
        delayMatch35_reg(1 TO 3) <= delayMatch35_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch35_process;

  Logical_Operator42_out1_1 <= delayMatch35_reg(3);

  cPC_Save_out1_signed <= signed(cPC_Save_out1);

  HwModeRegister21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cPC_Save_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        cPC_Save_out1_1 <= cPC_Save_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister21_process;


  Multiply18_mul_temp <= From36_out1 * cPC_Save_out1_1;
  Multiply18_out1 <= Multiply18_mul_temp(35 DOWNTO 16);

  HwModeRegister28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister28_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister28_reg(0) <= Multiply18_out1;
        HwModeRegister28_reg(1) <= HwModeRegister28_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister28_process;

  Multiply18_out1_1 <= HwModeRegister28_reg(1);

  HwModeRegister29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister29_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister29_reg(0) <= Switch2_out1;
        HwModeRegister29_reg(1 TO 6) <= HwModeRegister29_reg(0 TO 5);
      END IF;
    END IF;
  END PROCESS HwModeRegister29_process;

  From63_out1 <= HwModeRegister29_reg(6);

  Multiply21_mul_temp <= Multiply18_out1_1 * From63_out1;
  Multiply21_out1 <= Multiply21_mul_temp(34 DOWNTO 13);

  PipelineRegister20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply21_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply21_out1_1 <= Multiply21_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister20_process;


  kconst_12 <= to_signed(16#08081#, 17);

  HwModeRegister76_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_13 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_13 <= kconst_12;
      END IF;
    END IF;
  END PROCESS HwModeRegister76_process;


  
  Relational_Operator8_relop1 <= '1' WHEN Counter_Limited2_out1 = Constant1_out1 ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 399
  HDL_Counter2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter2_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Relational_Operator8_relop1 = '1' THEN 
          IF HDL_Counter2_out1 >= to_unsigned(16#18F#, 9) THEN 
            HDL_Counter2_out1 <= to_unsigned(16#000#, 9);
          ELSE 
            HDL_Counter2_out1 <= HDL_Counter2_out1 + to_unsigned(16#001#, 9);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;


  
  alpha1_D_Lookup_Table2_k <= to_unsigned(16#000#, 9) WHEN HDL_Counter2_out1 = to_unsigned(16#000#, 9) ELSE
      to_unsigned(16#18F#, 9) WHEN HDL_Counter2_out1 >= to_unsigned(16#18F#, 9) ELSE
      HDL_Counter2_out1;
  alpha1_D_Lookup_Table2_out1 <= nc_10(to_integer(alpha1_D_Lookup_Table2_k));

  PipelineRegister2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha1_D_Lookup_Table2_out1_1 <= alpha1_D_Lookup_Table2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  Constant8_out1 <= to_signed(16#1FE0#, 16);

  Sum6_sub_cast <= resize(alpha1_D_Lookup_Table2_out1_1, 17);
  Sum6_sub_cast_1 <= resize(Constant8_out1, 17);
  Sum6_out1 <= Sum6_sub_cast - Sum6_sub_cast_1;

  HwModeRegister77_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum6_out1_1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum6_out1_1 <= Sum6_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister77_process;


  Gain7_mul_temp <= kconst_13 * Sum6_out1_1;
  Gain7_out1 <= resize(Gain7_mul_temp(33 DOWNTO 13), 22);

  PipelineRegister44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain7_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain7_out1_1 <= Gain7_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister44_process;


  delayMatch38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch38_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch38_reg(0) <= Gain7_out1_1;
        delayMatch38_reg(1 TO 4) <= delayMatch38_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch38_process;

  From42_out1 <= delayMatch38_reg(4);

  Sum8_add_cast <= resize(Multiply19_out1_1, 24);
  Sum8_add_cast_1 <= resize(Multiply20_out1_1, 24);
  Sum8_add_temp <= Sum8_add_cast + Sum8_add_cast_1;
  Sum8_add_cast_2 <= resize(Multiply21_out1_1, 24);
  Sum8_add_temp_1 <= Sum8_add_temp + Sum8_add_cast_2;
  Sum8_add_cast_3 <= resize(From42_out1, 24);
  Sum8_add_temp_2 <= Sum8_add_temp_1 + Sum8_add_cast_3;
  Sum8_out1 <= Sum8_add_temp_2(21 DOWNTO 0);

  HwModeRegister32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum8_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum8_out1_1 <= Sum8_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister32_process;


  Logical_Operator45_out1 <= Relational_Operator20_relop1 AND Logical_Operator11_out1;

  delayMatch39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch39_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch39_reg(0) <= Logical_Operator45_out1;
        delayMatch39_reg(1 TO 3) <= delayMatch39_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch39_process;

  Logical_Operator45_out1_1 <= delayMatch39_reg(3);

  dPC_Save_out1_signed <= signed(dPC_Save_out1);

  HwModeRegister33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister33_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister33_reg(0) <= dPC_Save_out1_signed;
        HwModeRegister33_reg(1 TO 4) <= HwModeRegister33_reg(0 TO 3);
      END IF;
    END IF;
  END PROCESS HwModeRegister33_process;

  dPC_Save_out1_1 <= HwModeRegister33_reg(4);

  Multiply23_mul_temp <= Sum8_out1_1 * dPC_Save_out1_1;
  Multiply23_out1 <= Multiply23_mul_temp(35 DOWNTO 16);

  HwModeRegister16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister16_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister16_reg(0) <= Multiply23_out1;
        HwModeRegister16_reg(1) <= HwModeRegister16_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister16_process;

  Multiply23_out1_1 <= HwModeRegister16_reg(1);

  HwModeRegister17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister17_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister17_reg(0) <= Switch1_out1;
        HwModeRegister17_reg(1 TO 10) <= HwModeRegister17_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister17_process;

  From53_out1 <= HwModeRegister17_reg(10);

  Multiply16_mul_temp <= Multiply23_out1_1 * From53_out1;
  Multiply16_out1 <= Multiply16_mul_temp(33 DOWNTO 14);

  PipelineRegister14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply16_out1_1 <= to_signed(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply16_out1_1 <= Multiply16_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister14_process;


  
  Phase_C_PWM_relop1 <= '1' WHEN From59_out1 >= Multiply16_out1_1 ELSE
      '0';

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg(0) <= Phase_C_PWM_relop1;
        Delay4_reg(1 TO 99) <= Delay4_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(99);

  Logical_Operator51_out1 <= Phase_C_PWM_relop1 AND Delay4_out1;

  delayMatch60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch60_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch60_reg(0) <= Logical_Operator51_out1;
        delayMatch60_reg(1) <= delayMatch60_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch60_process;

  Logical_Operator51_out1_1 <= delayMatch60_reg(1);

  Logical_Operator52_out1 <=  NOT Phase_C_PWM_relop1;

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg(0) <= Logical_Operator52_out1;
        Delay5_reg(1 TO 99) <= Delay5_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(99);

  Logical_Operator38_out1 <= Logical_Operator52_out1 AND Delay5_out1;

  delayMatch61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch61_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch61_reg(0) <= Logical_Operator38_out1;
        delayMatch61_reg(1) <= delayMatch61_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch61_process;

  Logical_Operator38_out1_1 <= delayMatch61_reg(1);

  kconst_14 <= to_signed(16#5500#, 16);

  HwModeRegister58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_15 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_15 <= kconst_14;
      END IF;
    END IF;
  END PROCESS HwModeRegister58_process;


  Constant10_out1 <= to_signed(16#30000#, 20);

  Sum13_add_cast <= resize(Multiply10_out1_1, 21);
  Sum13_add_cast_1 <= resize(Constant10_out1, 21);
  Sum13_out1 <= Sum13_add_cast + Sum13_add_cast_1;

  Data_Type_Conversion1_out1 <= Sum13_out1(19 DOWNTO 4);

  HwModeRegister59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion1_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Data_Type_Conversion1_out1_1 <= Data_Type_Conversion1_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister59_process;


  Gain1_out1 <= kconst_15 * Data_Type_Conversion1_out1_1;

  PipelineRegister35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain1_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain1_out1_1 <= Gain1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister35_process;


  Data_Type_Conversion3_out1 <= unsigned(Gain1_out1_1(28 DOWNTO 21));

  PhaseB_Analog <= std_logic_vector(Data_Type_Conversion3_out1);

  kconst_16 <= to_signed(16#5500#, 16);

  HwModeRegister66_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_17 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_17 <= kconst_16;
      END IF;
    END IF;
  END PROCESS HwModeRegister66_process;


  Constant25_out1 <= to_signed(16#30000#, 20);

  Sum18_add_cast <= resize(Multiply16_out1_1, 21);
  Sum18_add_cast_1 <= resize(Constant25_out1, 21);
  Sum18_out1 <= Sum18_add_cast + Sum18_add_cast_1;

  Data_Type_Conversion26_out1 <= Sum18_out1(19 DOWNTO 4);

  HwModeRegister67_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion26_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Data_Type_Conversion26_out1_1 <= Data_Type_Conversion26_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister67_process;


  Gain27_out1 <= kconst_17 * Data_Type_Conversion26_out1_1;

  delayMatch44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch44_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch44_reg(0) <= SW15;
        delayMatch44_reg(1 TO 13) <= delayMatch44_reg(0 TO 12);
      END IF;
    END IF;
  END PROCESS delayMatch44_process;

  SW15_1 <= delayMatch44_reg(13);

  
  switch_compare_1_5 <= '1' WHEN SW15_1 > '0' ELSE
      '0';

  PipelineRegister39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain27_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain27_out1_1 <= Gain27_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister39_process;


  Data_Type_Conversion27_out1 <= unsigned(Gain27_out1_1(28 DOWNTO 21));

  kconst_18 <= signed'("011010000111110101100011010001000");

  HwModeRegister56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_19 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_19 <= kconst_18;
      END IF;
    END IF;
  END PROCESS HwModeRegister56_process;


  Gain_out1 <= kconst_19 * Switch_out1_1;

  PipelineRegister34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain_out1_1 <= to_signed(0, 66);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain_out1_1 <= Gain_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister34_process;


  Data_Type_Conversion_out1 <= unsigned(Gain_out1_1(42 DOWNTO 35));

  delayMatch43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch43_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch43_reg(0) <= Data_Type_Conversion_out1;
        delayMatch43_reg(1 TO 11) <= delayMatch43_reg(0 TO 10);
      END IF;
    END IF;
  END PROCESS delayMatch43_process;

  From45_out1 <= delayMatch43_reg(11);

  
  Switch13_out1 <= Data_Type_Conversion27_out1 WHEN switch_compare_1_5 = '0' ELSE
      From45_out1;

  PhaseC_Tri_Analog <= std_logic_vector(Switch13_out1);

  Constant22_out1 <= '1';

  Constant23_out1 <= '1';

  Constant24_out1 <= '1';

  H_out1 <= to_unsigned(16#09#, 7);

  HEX5 <= std_logic_vector(H_out1);

  delayMatch45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch45_reg <= (OTHERS => to_unsigned(16#000#, 10));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch45_reg(0) <= Sum15_out1;
        delayMatch45_reg(1) <= delayMatch45_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch45_process;

  From39_out1 <= delayMatch45_reg(1);

  Constant82_out1 <= to_unsigned(16#40#, 7);

  HwModeRegister34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant82_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Constant82_out1_1 <= Constant82_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister34_process;


  Constant78_out1 <= to_unsigned(16#000#, 10);

  
  Relational_Operator34_relop1 <= '1' WHEN Sum15_out1 = Constant78_out1 ELSE
      '0';

  HwModeRegister35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator34_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator34_out1 <= Relational_Operator34_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister35_process;


  
  Multiply27_out1 <= Constant82_out1_1 WHEN Relational_Operator34_out1 = '1' ELSE
      to_unsigned(16#00#, 7);

  PipelineRegister23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply27_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply27_out1_1 <= Multiply27_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister23_process;


  Constant83_out1 <= to_unsigned(16#79#, 7);

  HwModeRegister36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant83_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Constant83_out1_1 <= Constant83_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister36_process;


  Constant79_out1 <= to_unsigned(16#001#, 10);

  
  Relational_Operator35_relop1 <= '1' WHEN Sum15_out1 = Constant79_out1 ELSE
      '0';

  HwModeRegister37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator35_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator35_out1 <= Relational_Operator35_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister37_process;


  
  Multiply28_out1 <= Constant83_out1_1 WHEN Relational_Operator35_out1 = '1' ELSE
      to_unsigned(16#00#, 7);

  PipelineRegister24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply28_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply28_out1_1 <= Multiply28_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister24_process;


  Constant84_out1 <= to_unsigned(16#24#, 7);

  HwModeRegister38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant84_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Constant84_out1_1 <= Constant84_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister38_process;


  Constant80_out1 <= to_unsigned(16#002#, 10);

  
  Relational_Operator36_relop1 <= '1' WHEN Sum15_out1 = Constant80_out1 ELSE
      '0';

  HwModeRegister39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator36_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator36_out1 <= Relational_Operator36_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister39_process;


  
  Multiply29_out1 <= Constant84_out1_1 WHEN Relational_Operator36_out1 = '1' ELSE
      to_unsigned(16#00#, 7);

  PipelineRegister25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply29_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply29_out1_1 <= Multiply29_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister25_process;


  Constant85_out1 <= to_unsigned(16#30#, 7);

  HwModeRegister42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant85_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Constant85_out1_1 <= Constant85_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister42_process;


  Constant81_out1 <= to_unsigned(16#003#, 10);

  
  Relational_Operator37_relop1 <= '1' WHEN Sum15_out1 = Constant81_out1 ELSE
      '0';

  HwModeRegister43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator37_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator37_out1 <= Relational_Operator37_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister43_process;


  
  Multiply30_out1 <= Constant85_out1_1 WHEN Relational_Operator37_out1 = '1' ELSE
      to_unsigned(16#00#, 7);

  PipelineRegister27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply30_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply30_out1_1 <= Multiply30_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister27_process;


  
  Multiport_Switch1_out1 <= Multiply27_out1_1 WHEN From39_out1 = to_unsigned(16#000#, 10) ELSE
      Multiply28_out1_1 WHEN From39_out1 = to_unsigned(16#001#, 10) ELSE
      Multiply29_out1_1 WHEN From39_out1 = to_unsigned(16#002#, 10) ELSE
      Multiply30_out1_1;

  delayMatch62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch62_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch62_reg(0) <= Multiport_Switch1_out1;
        delayMatch62_reg(1 TO 11) <= delayMatch62_reg(0 TO 10);
      END IF;
    END IF;
  END PROCESS delayMatch62_process;

  Multiport_Switch1_out1_1 <= delayMatch62_reg(11);

  HEX4 <= std_logic_vector(Multiport_Switch1_out1_1);

  kconst_20 <= to_signed(16#5500#, 16);

  HwModeRegister64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_21 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_21 <= kconst_20;
      END IF;
    END IF;
  END PROCESS HwModeRegister64_process;


  Constant27_out1 <= to_signed(16#30000#, 20);

  Sum17_add_cast <= resize(Multiply4_out1_1, 21);
  Sum17_add_cast_1 <= resize(Constant27_out1, 21);
  Sum17_out1 <= Sum17_add_cast + Sum17_add_cast_1;

  Data_Type_Conversion25_out1 <= Sum17_out1(19 DOWNTO 4);

  HwModeRegister65_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion25_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Data_Type_Conversion25_out1_1 <= Data_Type_Conversion25_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister65_process;


  Gain26_out1 <= kconst_21 * Data_Type_Conversion25_out1_1;

  PipelineRegister38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain26_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain26_out1_1 <= Gain26_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister38_process;


  Data_Type_Conversion28_out1 <= unsigned(Gain26_out1_1(28 DOWNTO 21));

  PhaseA_Analog <= std_logic_vector(Data_Type_Conversion28_out1);

  Sum24_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Push_3;
  Sum24_add_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Push_2;
  Sum24_add_temp <= Sum24_add_cast + Sum24_add_cast_1;
  Sum24_add_cast_2 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Push_1;
  Sum24_add_temp_1 <= Sum24_add_temp + Sum24_add_cast_2;
  Sum24_add_cast_3 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Push_0;
  Sum24_out1 <= Sum24_add_temp_1 + Sum24_add_cast_3;

  Logical_Operator28_out1 <=  NOT reset_1;

  Constant15_out1 <= to_unsigned(16#004#, 10);

  
  Relational_Operator3_relop1 <= '1' WHEN Sum24_out1 = Constant15_out1 ELSE
      '0';

  Logical_Operator29_out1 <=  NOT Relational_Operator3_relop1;

  Logical_Operator34_out1 <= Logical_Operator28_out1 OR Logical_Operator29_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 4114
  Counter_Limited1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_Limited1_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Counter_Limited1_out1 >= to_unsigned(16#1012#, 16) THEN 
          Counter_Limited1_out1 <= to_unsigned(16#0000#, 16);
        ELSE 
          Counter_Limited1_out1 <= Counter_Limited1_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS Counter_Limited1_process;


  Constant14_out1 <= to_unsigned(16#195#, 9);

  Constant12_out1 <= to_unsigned(16#09A4#, 16);

  
  Relational_Operator1_relop1 <= '1' WHEN Counter_Limited1_out1 = Constant12_out1 ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 405
  HDL_Counter12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter12_out1 <= to_unsigned(16#001#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Logical_Operator34_out1 = '1' THEN 
          HDL_Counter12_out1 <= to_unsigned(16#001#, 9);
        ELSIF Logical_Operator27_out1 = '1' THEN 
          IF HDL_Counter12_out1 >= to_unsigned(16#195#, 9) THEN 
            HDL_Counter12_out1 <= to_unsigned(16#001#, 9);
          ELSE 
            HDL_Counter12_out1 <= HDL_Counter12_out1 + to_unsigned(16#001#, 9);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter12_process;


  
  Relational_Operator2_relop1 <= '1' WHEN HDL_Counter12_out1 = Constant14_out1 ELSE
      '0';

  Logical_Operator26_out1 <=  NOT Relational_Operator2_relop1;

  Logical_Operator27_out1 <= Logical_Operator26_out1 AND Relational_Operator1_relop1;

  delayMatch63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch63_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch63_reg(0) <= Logical_Operator27_out1;
        delayMatch63_reg(1 TO 13) <= delayMatch63_reg(0 TO 12);
      END IF;
    END IF;
  END PROCESS delayMatch63_process;

  Logical_Operator27_out1_1 <= delayMatch63_reg(13);

  delayMatch46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch46_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch46_reg(0) <= Logical_Operator27_out1;
        delayMatch46_reg(1 TO 11) <= delayMatch46_reg(0 TO 10);
      END IF;
    END IF;
  END PROCESS delayMatch46_process;

  From18_out1 <= delayMatch46_reg(11);

  delayMatch64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subsystem11_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subsystem11_out1_1 <= Subsystem11_out1;
      END IF;
    END IF;
  END PROCESS delayMatch64_process;


  delayMatch47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch47_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch47_reg(0) <= Logical_Operator27_out1;
        delayMatch47_reg(1 TO 11) <= delayMatch47_reg(0 TO 10);
      END IF;
    END IF;
  END PROCESS delayMatch47_process;

  From51_out1 <= delayMatch47_reg(11);

  delayMatch65_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subsystem12_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subsystem12_out1_1 <= Subsystem12_out1;
      END IF;
    END IF;
  END PROCESS delayMatch65_process;


  delayMatch48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch48_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch48_reg(0) <= Logical_Operator27_out1;
        delayMatch48_reg(1 TO 11) <= delayMatch48_reg(0 TO 10);
      END IF;
    END IF;
  END PROCESS delayMatch48_process;

  From57_out1 <= delayMatch48_reg(11);

  delayMatch66_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subsystem13_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subsystem13_out1_1 <= Subsystem13_out1;
      END IF;
    END IF;
  END PROCESS delayMatch66_process;


  ce_out <= clk_enable;

  CLK_1 <= DAC_Control_out1_1;

  Sync_n <= DAC_Control_out2_1;

  Blank_n <= DAC_Control_out3_1;

  Phase_A <= Logical_Operator8_out1_1;

  Phase_A_1 <= Logical_Operator10_out1_1;

  Phase_B <= Logical_Operator24_out1_1;

  Phase_B_1 <= Logical_Operator18_out1_1;

  Phase_C <= Logical_Operator51_out1_1;

  Phase_C_1 <= Logical_Operator38_out1_1;

  LEDG0 <= Constant22_out1;

  LEDG1 <= Constant23_out1;

  LEDG2 <= Constant24_out1;

  Sample_Pulse <= Logical_Operator27_out1_1;

  PhaseA_PWM <= Subsystem11_out1_1;

  PhaseB_PWM <= Subsystem12_out1_1;

  PhaseC_PWM <= Subsystem13_out1_1;

END rtl;

