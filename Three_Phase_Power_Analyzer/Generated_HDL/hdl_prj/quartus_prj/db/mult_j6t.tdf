--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="NO" LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=78 LPM_WIDTHB=16 LPM_WIDTHP=94 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 17.0 cbx_cycloneii 2017:04:25:18:06:29:SJ cbx_lpm_add_sub 2017:04:25:18:06:29:SJ cbx_lpm_mult 2017:04:25:18:06:29:SJ cbx_mgl 2017:04:25:18:09:28:SJ cbx_nadder 2017:04:25:18:06:30:SJ cbx_padd 2017:04:25:18:06:30:SJ cbx_stratix 2017:04:25:18:06:30:SJ cbx_stratixii 2017:04:25:18:06:30:SJ cbx_util_mgl 2017:04:25:18:06:30:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Intel and sold by Intel or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION cycloneive_mac_mult (aclr, clk, dataa[dataa_width-1..0], datab[datab_width-1..0], ena, signa, signb)
WITH ( dataa_clock, dataa_width, datab_clock, datab_width, signa_clock, signb_clock)
RETURNS ( dataout[dataa_width+datab_width-1..0]);
FUNCTION cycloneive_mac_out (aclr, clk, dataa[dataa_width-1..0], ena)
WITH ( dataa_width = 0, output_clock)
RETURNS ( dataout[dataa_width-1..0]);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = dsp_9bit 10 lut 138 
SUBDESIGN mult_j6t
( 
	dataa[77..0]	:	input;
	datab[15..0]	:	input;
	result[93..0]	:	output;
) 
VARIABLE
	add11_result[76..0]	:	WIRE;
	add15_result[60..0]	:	WIRE;
	mac_mult1 : cycloneive_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 16,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult3 : cycloneive_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 16,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult5 : cycloneive_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 16,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult7 : cycloneive_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 16,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult9 : cycloneive_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 6,
			datab_clock = "none",
			datab_width = 16,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_out10 : cycloneive_mac_out
		WITH (
			dataa_width = 22,
			output_clock = "none"
		);
	mac_out2 : cycloneive_mac_out
		WITH (
			dataa_width = 34,
			output_clock = "none"
		);
	mac_out4 : cycloneive_mac_out
		WITH (
			dataa_width = 34,
			output_clock = "none"
		);
	mac_out6 : cycloneive_mac_out
		WITH (
			dataa_width = 34,
			output_clock = "none"
		);
	mac_out8 : cycloneive_mac_out
		WITH (
			dataa_width = 34,
			output_clock = "none"
		);
	sft12a[76..0] : soft;
	sft13a[76..0] : soft;
	sft14a[76..0] : soft;
	sft16a[60..0] : soft;
	sft17a[60..0] : soft;
	sft18a[60..0] : soft;
	w294w	: WIRE;
	w357w	: WIRE;
	w788w[94..0]	: WIRE;

BEGIN 
	add11_result[] = sft12a[].out + sft13a[].out;
	add15_result[] = sft16a[].out + sft17a[].out;
	mac_mult1.dataa[] = ( dataa[17..0]);
	mac_mult1.datab[] = ( datab[15..0]);
	mac_mult1.signa = B"0";
	mac_mult1.signb = B"1";
	mac_mult3.dataa[] = ( dataa[35..18]);
	mac_mult3.datab[] = ( datab[15..0]);
	mac_mult3.signa = B"0";
	mac_mult3.signb = B"1";
	mac_mult5.dataa[] = ( dataa[53..36]);
	mac_mult5.datab[] = ( datab[15..0]);
	mac_mult5.signa = B"0";
	mac_mult5.signb = B"1";
	mac_mult7.dataa[] = ( dataa[71..54]);
	mac_mult7.datab[] = ( datab[15..0]);
	mac_mult7.signa = B"0";
	mac_mult7.signb = B"1";
	mac_mult9.dataa[] = ( dataa[77..72]);
	mac_mult9.datab[] = ( datab[15..0]);
	mac_mult9.signa = B"1";
	mac_mult9.signb = B"1";
	mac_out10.dataa[] = mac_mult9.dataout[];
	mac_out2.dataa[] = mac_mult1.dataout[];
	mac_out4.dataa[] = mac_mult3.dataout[];
	mac_out6.dataa[] = mac_mult5.dataout[];
	mac_out8.dataa[] = mac_mult7.dataout[];
	sft12a[].in = ( w294w, ( (! mac_out10.dataout[21..21]), ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( mac_out10.dataout[15..15], ( mac_out8.dataout[32..32], ( mac_out8.dataout[31..31], ( mac_out8.dataout[30..30], ( mac_out8.dataout[29..29], ( mac_out8.dataout[28..28], ( mac_out8.dataout[27..27], ( mac_out8.dataout[26..26], ( mac_out8.dataout[25..25], ( mac_out8.dataout[24..24], ( mac_out8.dataout[23..23], ( mac_out8.dataout[22..22], ( mac_out8.dataout[21..21], ( mac_out8.dataout[20..20], ( mac_out8.dataout[19..19], ( mac_out8.dataout[18..18], ( w294w, ( w294w, ( mac_out8.dataout[15..15], ( mac_out6.dataout[32..32], ( mac_out6.dataout[31..31], ( mac_out6.dataout[30..30], ( mac_out6.dataout[29..29], ( mac_out6.dataout[28..28], ( mac_out6.dataout[27..27], ( mac_out6.dataout[26..26], ( mac_out6.dataout[25..25], ( mac_out6.dataout[24..24], ( mac_out6.dataout[23..23], ( mac_out6.dataout[22..22], ( mac_out6.dataout[21..21], ( mac_out6.dataout[20..20], ( mac_out6.dataout[19..19], ( mac_out6.dataout[18..18], ( w294w, ( w294w, ( mac_out6.dataout[15..15], ( mac_out4.dataout[32..32], ( mac_out4.dataout[31..31], ( mac_out4.dataout[30..30], ( mac_out4.dataout[29..29], ( mac_out4.dataout[28..28], ( mac_out4.dataout[27..27], ( mac_out4.dataout[26..26], ( mac_out4.dataout[25..25], ( mac_out4.dataout[24..24], ( mac_out4.dataout[23..23], ( mac_out4.dataout[22..22], ( mac_out4.dataout[21..21], ( mac_out4.dataout[20..20], ( mac_out4.dataout[19..19], ( mac_out4.dataout[18..18], ( w294w, ( w294w, ( (! mac_out2.dataout[33..33]), ( mac_out2.dataout[32..32], ( mac_out2.dataout[31..31], ( mac_out2.dataout[30..30], ( mac_out2.dataout[29..29], ( mac_out2.dataout[28..28], ( mac_out2.dataout[27..27], ( mac_out2.dataout[26..26], ( mac_out2.dataout[25..25], ( mac_out2.dataout[24..24], ( mac_out2.dataout[23..23], ( mac_out2.dataout[22..22], ( mac_out2.dataout[21..21], ( mac_out2.dataout[20..20], ( mac_out2.dataout[19..18]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft13a[].in = ( w357w, ( sft18a[60..60].out, ( sft18a[59..59].out, ( sft18a[58..58].out, ( sft18a[57..57].out, ( sft18a[56..56].out, ( sft18a[55..55].out, ( sft18a[54..54].out, ( sft18a[53..53].out, ( sft18a[52..52].out, ( sft18a[51..51].out, ( sft18a[50..50].out, ( sft18a[49..49].out, ( sft18a[48..48].out, ( sft18a[47..47].out, ( sft18a[46..46].out, ( sft18a[45..45].out, ( sft18a[44..44].out, ( sft18a[43..43].out, ( sft18a[42..42].out, ( sft18a[41..41].out, ( sft18a[40..40].out, ( sft18a[39..39].out, ( sft18a[38..38].out, ( sft18a[37..37].out, ( sft18a[36..36].out, ( sft18a[35..35].out, ( sft18a[34..34].out, ( sft18a[33..33].out, ( sft18a[32..32].out, ( sft18a[31..31].out, ( sft18a[30..30].out, ( sft18a[29..29].out, ( sft18a[28..28].out, ( sft18a[27..27].out, ( sft18a[26..26].out, ( sft18a[25..25].out, ( sft18a[24..24].out, ( sft18a[23..23].out, ( sft18a[22..22].out, ( sft18a[21..21].out, ( sft18a[20..20].out, ( sft18a[19..19].out, ( sft18a[18..18].out, ( sft18a[17..17].out, ( sft18a[16..16].out, ( sft18a[15..15].out, ( sft18a[14..14].out, ( sft18a[13..13].out, ( sft18a[12..12].out, ( sft18a[11..11].out, ( sft18a[10..10].out, ( sft18a[9..9].out, ( sft18a[8..8].out, ( sft18a[7..7].out, ( sft18a[6..6].out, ( sft18a[5..5].out, ( sft18a[4..4].out, ( sft18a[3..3].out, ( sft18a[2..2].out, ( sft18a[1..1].out, ( sft18a[0..0].out, ( mac_out4.dataout[14..14], ( mac_out4.dataout[13..13], ( mac_out4.dataout[12..12], ( mac_out4.dataout[11..11], ( mac_out4.dataout[10..10], ( mac_out4.dataout[9..9], ( mac_out4.dataout[8..8], ( mac_out4.dataout[7..7], ( mac_out4.dataout[6..6], ( mac_out4.dataout[5..5], ( mac_out4.dataout[4..4], ( mac_out4.dataout[3..3], ( mac_out4.dataout[2..2], ( mac_out4.dataout[1..0]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft14a[].in = add11_result[];
	sft16a[].in = ( w357w, ( mac_out10.dataout[20..20], ( mac_out10.dataout[19..19], ( mac_out10.dataout[18..18], ( mac_out10.dataout[17..17], ( mac_out10.dataout[16..16], ( (! mac_out8.dataout[33..33]), ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( mac_out8.dataout[17..17], ( mac_out8.dataout[16..16], ( (! mac_out6.dataout[33..33]), ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( mac_out6.dataout[17..17], ( mac_out6.dataout[16..16], ( (! mac_out4.dataout[33..33]), ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( w294w, ( mac_out4.dataout[17..17], ( mac_out4.dataout[16..16], w294w))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft17a[].in = ( w357w, ( w357w, ( w357w, ( w357w, ( w357w, ( w357w, ( w357w, ( mac_out10.dataout[14..14], ( mac_out10.dataout[13..13], ( mac_out10.dataout[12..12], ( mac_out10.dataout[11..11], ( mac_out10.dataout[10..10], ( mac_out10.dataout[9..9], ( mac_out10.dataout[8..8], ( mac_out10.dataout[7..7], ( mac_out10.dataout[6..6], ( mac_out10.dataout[5..5], ( mac_out10.dataout[4..4], ( mac_out10.dataout[3..3], ( mac_out10.dataout[2..2], ( mac_out10.dataout[1..1], ( mac_out10.dataout[0..0], ( w357w, ( w357w, ( w357w, ( mac_out8.dataout[14..14], ( mac_out8.dataout[13..13], ( mac_out8.dataout[12..12], ( mac_out8.dataout[11..11], ( mac_out8.dataout[10..10], ( mac_out8.dataout[9..9], ( mac_out8.dataout[8..8], ( mac_out8.dataout[7..7], ( mac_out8.dataout[6..6], ( mac_out8.dataout[5..5], ( mac_out8.dataout[4..4], ( mac_out8.dataout[3..3], ( mac_out8.dataout[2..2], ( mac_out8.dataout[1..1], ( mac_out8.dataout[0..0], ( w357w, ( w357w, ( w357w, ( mac_out6.dataout[14..14], ( mac_out6.dataout[13..13], ( mac_out6.dataout[12..12], ( mac_out6.dataout[11..11], ( mac_out6.dataout[10..10], ( mac_out6.dataout[9..9], ( mac_out6.dataout[8..8], ( mac_out6.dataout[7..7], ( mac_out6.dataout[6..6], ( mac_out6.dataout[5..5], ( mac_out6.dataout[4..4], ( mac_out6.dataout[3..3], ( mac_out6.dataout[2..2], ( mac_out6.dataout[1..1], ( mac_out6.dataout[0..0], ( w357w, ( w357w, mac_out4.dataout[15..15]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft18a[].in = add15_result[];
	result[93..0] = w788w[93..0];
	w294w = B"1";
	w357w = B"0";
	w788w[] = ( sft14a[76..75].out, sft14a[74..73].out, sft14a[72..71].out, sft14a[70..69].out, sft14a[68..67].out, sft14a[66..65].out, sft14a[64..63].out, sft14a[62..61].out, sft14a[60..59].out, sft14a[58..57].out, sft14a[56..55].out, sft14a[54..53].out, sft14a[52..51].out, sft14a[50..49].out, sft14a[48..47].out, sft14a[46..45].out, sft14a[44..43].out, sft14a[42..41].out, sft14a[40..39].out, sft14a[38..37].out, sft14a[36..35].out, sft14a[34..33].out, sft14a[32..31].out, sft14a[30..29].out, sft14a[28..27].out, sft14a[26..25].out, sft14a[24..23].out, sft14a[22..21].out, sft14a[20..19].out, sft14a[18..17].out, sft14a[16..15].out, sft14a[14..13].out, sft14a[12..11].out, sft14a[10..9].out, sft14a[8..7].out, sft14a[6..5].out, sft14a[4..3].out, sft14a[2..1].out, sft14a[0..0].out, mac_out2.dataout[17..17], mac_out2.dataout[16..16], mac_out2.dataout[15..15], mac_out2.dataout[14..14], mac_out2.dataout[13..13], mac_out2.dataout[12..12], mac_out2.dataout[11..11], mac_out2.dataout[10..10], mac_out2.dataout[9..9], mac_out2.dataout[8..8], mac_out2.dataout[7..7], mac_out2.dataout[6..6], mac_out2.dataout[5..5], mac_out2.dataout[4..4], mac_out2.dataout[3..3], mac_out2.dataout[2..2], mac_out2.dataout[1..1], mac_out2.dataout[0..0]);
END;
--VALID FILE
