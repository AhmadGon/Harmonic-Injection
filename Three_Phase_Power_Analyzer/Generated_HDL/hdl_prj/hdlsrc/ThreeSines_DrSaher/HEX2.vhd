-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ThreeSines_DrSaher\HEX2.vhd
-- Created: 2020-02-04 20:32:36
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HEX2
-- Source Path: ThreeSines_DrSaher/Sines /HEX2
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HEX2 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Push_2                            :   IN    std_logic;
        HEX2_1                            :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        out2                              :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En15
        );
END HEX2;


ARCHITECTURE rtl OF HEX2 IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT Wrap_To_Zero_block1
    PORT( U                               :   IN    std_logic_vector(20 DOWNTO 0);  -- sfix21_En11
          Y                               :   OUT   std_logic_vector(20 DOWNTO 0)  -- sfix21_En11
          );
  END COMPONENT;

  COMPONENT Subsystem_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
          );
  END COMPONENT;

  COMPONENT Subsystem2_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
          );
  END COMPONENT;

  COMPONENT Subsystem3_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
          );
  END COMPONENT;

  COMPONENT Subsystem4_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
          );
  END COMPONENT;

  COMPONENT Subsystem5_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
          );
  END COMPONENT;

  COMPONENT Subsystem6_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
          );
  END COMPONENT;

  COMPONENT Subsystem7_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
          );
  END COMPONENT;

  COMPONENT Subsystem8_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
          );
  END COMPONENT;

  COMPONENT Subsystem17_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
          );
  END COMPONENT;

  COMPONENT Subsystem18_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
          );
  END COMPONENT;

  COMPONENT Subsystem9_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En10
          );
  END COMPONENT;

  COMPONENT Subsystem10_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Subsystem11_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En13
          );
  END COMPONENT;

  COMPONENT Subsystem12_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En13
          );
  END COMPONENT;

  COMPONENT Subsystem13_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En12
          );
  END COMPONENT;

  COMPONENT Subsystem14_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En12
          );
  END COMPONENT;

  COMPONENT Subsystem15_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En12
          );
  END COMPONENT;

  COMPONENT Subsystem16_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En12
          );
  END COMPONENT;

  COMPONENT Subsystem19_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En11
          );
  END COMPONENT;

  COMPONENT Subsystem20_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          alpha0                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Wrap_To_Zero_block1
    USE ENTITY work.Wrap_To_Zero_block1(rtl);

  FOR ALL : Subsystem_block1
    USE ENTITY work.Subsystem_block1(rtl);

  FOR ALL : Subsystem2_block1
    USE ENTITY work.Subsystem2_block1(rtl);

  FOR ALL : Subsystem3_block1
    USE ENTITY work.Subsystem3_block1(rtl);

  FOR ALL : Subsystem4_block1
    USE ENTITY work.Subsystem4_block1(rtl);

  FOR ALL : Subsystem5_block1
    USE ENTITY work.Subsystem5_block1(rtl);

  FOR ALL : Subsystem6_block1
    USE ENTITY work.Subsystem6_block1(rtl);

  FOR ALL : Subsystem7_block1
    USE ENTITY work.Subsystem7_block1(rtl);

  FOR ALL : Subsystem8_block1
    USE ENTITY work.Subsystem8_block1(rtl);

  FOR ALL : Subsystem17_block1
    USE ENTITY work.Subsystem17_block1(rtl);

  FOR ALL : Subsystem18_block1
    USE ENTITY work.Subsystem18_block1(rtl);

  FOR ALL : Subsystem9_block1
    USE ENTITY work.Subsystem9_block1(rtl);

  FOR ALL : Subsystem10_block1
    USE ENTITY work.Subsystem10_block1(rtl);

  FOR ALL : Subsystem11_block1
    USE ENTITY work.Subsystem11_block1(rtl);

  FOR ALL : Subsystem12_block1
    USE ENTITY work.Subsystem12_block1(rtl);

  FOR ALL : Subsystem13_block1
    USE ENTITY work.Subsystem13_block1(rtl);

  FOR ALL : Subsystem14_block1
    USE ENTITY work.Subsystem14_block1(rtl);

  FOR ALL : Subsystem15_block1
    USE ENTITY work.Subsystem15_block1(rtl);

  FOR ALL : Subsystem16_block1
    USE ENTITY work.Subsystem16_block1(rtl);

  FOR ALL : Subsystem19_block1
    USE ENTITY work.Subsystem19_block1(rtl);

  FOR ALL : Subsystem20_block1
    USE ENTITY work.Subsystem20_block1(rtl);

  -- Signals
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL Wrap_To_Zero_out1_signed         : signed(20 DOWNTO 0);  -- sfix21_En11
  SIGNAL Unit_Delay1_out1                 : signed(20 DOWNTO 0);  -- sfix21_En11
  SIGNAL Data_Type_Conversion_out1        : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Sum1_add_cast                    : signed(20 DOWNTO 0);  -- sfix21_En11
  SIGNAL Sum1_add_cast_1                  : signed(20 DOWNTO 0);  -- sfix21_En11
  SIGNAL Sum1_out1                        : signed(20 DOWNTO 0);  -- sfix21_En11
  SIGNAL Wrap_To_Zero_out1                : std_logic_vector(20 DOWNTO 0);  -- ufix21
  SIGNAL Saturation_out1                  : signed(20 DOWNTO 0);  -- sfix21_En11
  SIGNAL Constant1_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Relational_Operator_1_cast       : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL Relational_Operator_1_cast_1     : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL Constant2_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Relational_Operator1_1_cast      : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL Relational_Operator1_1_cast_1    : signed(23 DOWNTO 0);  -- sfix24_En14
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Constant3_out1                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator2_1_cast      : signed(22 DOWNTO 0);  -- sfix23_En13
  SIGNAL Relational_Operator2_1_cast_1    : signed(22 DOWNTO 0);  -- sfix23_En13
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL Constant4_out1                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator3_1_cast      : signed(22 DOWNTO 0);  -- sfix23_En13
  SIGNAL Relational_Operator3_1_cast_1    : signed(22 DOWNTO 0);  -- sfix23_En13
  SIGNAL Relational_Operator3_relop1      : std_logic;
  SIGNAL Constant5_out1                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Relational_Operator4_1_cast      : signed(21 DOWNTO 0);  -- sfix22_En12
  SIGNAL Relational_Operator4_1_cast_1    : signed(21 DOWNTO 0);  -- sfix22_En12
  SIGNAL Relational_Operator4_relop1      : std_logic;
  SIGNAL Constant6_out1                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Relational_Operator5_1_cast      : signed(21 DOWNTO 0);  -- sfix22_En12
  SIGNAL Relational_Operator5_1_cast_1    : signed(21 DOWNTO 0);  -- sfix22_En12
  SIGNAL Relational_Operator5_relop1      : std_logic;
  SIGNAL Constant7_out1                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Relational_Operator6_1_cast      : signed(21 DOWNTO 0);  -- sfix22_En12
  SIGNAL Relational_Operator6_1_cast_1    : signed(21 DOWNTO 0);  -- sfix22_En12
  SIGNAL Relational_Operator6_relop1      : std_logic;
  SIGNAL Constant8_out1                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Relational_Operator7_1_cast      : signed(21 DOWNTO 0);  -- sfix22_En12
  SIGNAL Relational_Operator7_1_cast_1    : signed(21 DOWNTO 0);  -- sfix22_En12
  SIGNAL Relational_Operator7_relop1      : std_logic;
  SIGNAL Constant16_out1                  : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Relational_Operator16_1_cast     : signed(20 DOWNTO 0);  -- sfix21_En11
  SIGNAL Relational_Operator16_relop1     : std_logic;
  SIGNAL Constant18_out1                  : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Relational_Operator17_1_cast     : signed(20 DOWNTO 0);  -- sfix21_En11
  SIGNAL Relational_Operator17_relop1     : std_logic;
  SIGNAL Saturation_out1_floor            : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Subsystem_out1                   : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem_out1_unsigned          : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem2_out1                  : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem2_out1_unsigned         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem3_out1                  : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem3_out1_unsigned         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem4_out1                  : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem4_out1_unsigned         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem5_out1                  : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem5_out1_unsigned         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem6_out1                  : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem6_out1_unsigned         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem7_out1                  : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem7_out1_unsigned         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem8_out1                  : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem8_out1_unsigned         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem17_out1                 : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem17_out1_unsigned        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem18_out1                 : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL Subsystem18_out1_unsigned        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Multiport_Switch_out1            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL kconst                           : signed(21 DOWNTO 0);  -- sfix22_En24
  SIGNAL kconst_1                         : signed(21 DOWNTO 0);  -- sfix22_En24
  SIGNAL Constant9_out1                   : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Relational_Operator8_relop1      : std_logic;
  SIGNAL Relational_Operator8_out1        : std_logic;
  SIGNAL Subsystem9_out1                  : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subsystem9_out1_signed           : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Multiply_in0                     : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Multiply_cast                    : signed(16 DOWNTO 0);  -- sfix17_En10
  SIGNAL Multiply_out1                    : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Multiply_out1_1                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Constant10_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Relational_Operator9_relop1      : std_logic;
  SIGNAL Relational_Operator9_out1        : std_logic;
  SIGNAL Subsystem10_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subsystem10_out1_signed          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply1_in0                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply1_cast                   : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL Multiply1_out1                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply1_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant11_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Relational_Operator10_relop1     : std_logic;
  SIGNAL Relational_Operator10_out1       : std_logic;
  SIGNAL Subsystem11_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subsystem11_out1_signed          : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Multiply2_in0                    : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Multiply2_cast                   : signed(16 DOWNTO 0);  -- sfix17_En13
  SIGNAL Multiply2_out1                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Multiply2_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Constant17_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Relational_Operator11_relop1     : std_logic;
  SIGNAL Relational_Operator11_out1       : std_logic;
  SIGNAL Subsystem12_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subsystem12_out1_signed          : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Multiply3_in0                    : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Multiply3_cast                   : signed(16 DOWNTO 0);  -- sfix17_En13
  SIGNAL Multiply3_out1                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Multiply3_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Constant12_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Relational_Operator12_relop1     : std_logic;
  SIGNAL Relational_Operator12_out1       : std_logic;
  SIGNAL Subsystem13_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subsystem13_out1_signed          : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply4_in0                    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply4_cast                   : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL Multiply4_out1                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply4_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Constant13_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Relational_Operator13_relop1     : std_logic;
  SIGNAL Relational_Operator13_out1       : std_logic;
  SIGNAL Subsystem14_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subsystem14_out1_signed          : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply5_in0                    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply5_cast                   : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL Multiply5_out1                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply5_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Constant14_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Relational_Operator14_relop1     : std_logic;
  SIGNAL Relational_Operator14_out1       : std_logic;
  SIGNAL Subsystem15_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subsystem15_out1_signed          : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply6_in0                    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply6_cast                   : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL Multiply6_out1                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply6_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Constant15_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Relational_Operator15_relop1     : std_logic;
  SIGNAL Relational_Operator15_out1       : std_logic;
  SIGNAL Subsystem16_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subsystem16_out1_signed          : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply7_in0                    : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply7_cast                   : signed(16 DOWNTO 0);  -- sfix17_En12
  SIGNAL Multiply7_out1                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Multiply7_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Constant19_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Relational_Operator18_relop1     : std_logic;
  SIGNAL Relational_Operator18_out1       : std_logic;
  SIGNAL Subsystem19_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subsystem19_out1_signed          : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Multiply8_in0                    : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Multiply8_cast                   : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Multiply8_out1                   : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Multiply8_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Constant20_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Relational_Operator19_relop1     : std_logic;
  SIGNAL Relational_Operator19_out1       : std_logic;
  SIGNAL Subsystem20_out1                 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Subsystem20_out1_signed          : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Multiply9_in0                    : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Multiply9_cast                   : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL Multiply9_out1                   : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Multiply9_out1_1                 : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Sum_add_cast                     : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_cast_1                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_temp                     : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_cast_2                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_temp_1                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_cast_3                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_temp_2                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_cast_4                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_temp_3                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_cast_5                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_temp_4                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_cast_6                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_temp_5                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_cast_7                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_temp_6                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_cast_8                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_temp_7                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_add_cast_9                   : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_out1                         : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Sum_out1_1                       : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL Gain_out1                        : signed(43 DOWNTO 0);  -- sfix44_En38
  SIGNAL Gain_out1_1                      : signed(43 DOWNTO 0);  -- sfix44_En38
  SIGNAL Data_Type_Conversion1_out1       : signed(19 DOWNTO 0);  -- sfix20_En15

BEGIN
  u_Wrap_To_Zero : Wrap_To_Zero_block1
    PORT MAP( U => std_logic_vector(Sum1_out1),  -- sfix21_En11
              Y => Wrap_To_Zero_out1  -- sfix21_En11
              );

  u_Subsystem : Subsystem_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator_relop1,
              alpha0 => Subsystem_out1  -- ufix7
              );

  u_Subsystem2 : Subsystem2_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator1_relop1,
              alpha0 => Subsystem2_out1  -- ufix7
              );

  u_Subsystem3 : Subsystem3_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator2_relop1,
              alpha0 => Subsystem3_out1  -- ufix7
              );

  u_Subsystem4 : Subsystem4_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator3_relop1,
              alpha0 => Subsystem4_out1  -- ufix7
              );

  u_Subsystem5 : Subsystem5_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator4_relop1,
              alpha0 => Subsystem5_out1  -- ufix7
              );

  u_Subsystem6 : Subsystem6_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator5_relop1,
              alpha0 => Subsystem6_out1  -- ufix7
              );

  u_Subsystem7 : Subsystem7_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator6_relop1,
              alpha0 => Subsystem7_out1  -- ufix7
              );

  u_Subsystem8 : Subsystem8_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator7_relop1,
              alpha0 => Subsystem8_out1  -- ufix7
              );

  u_Subsystem17 : Subsystem17_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator16_relop1,
              alpha0 => Subsystem17_out1  -- ufix7
              );

  u_Subsystem18 : Subsystem18_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator17_relop1,
              alpha0 => Subsystem18_out1  -- ufix7
              );

  u_Subsystem9 : Subsystem9_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator8_relop1,
              alpha0 => Subsystem9_out1  -- sfix16_En10
              );

  u_Subsystem10 : Subsystem10_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator9_relop1,
              alpha0 => Subsystem10_out1  -- sfix16_En14
              );

  u_Subsystem11 : Subsystem11_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator10_relop1,
              alpha0 => Subsystem11_out1  -- sfix16_En13
              );

  u_Subsystem12 : Subsystem12_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator11_relop1,
              alpha0 => Subsystem12_out1  -- sfix16_En13
              );

  u_Subsystem13 : Subsystem13_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator12_relop1,
              alpha0 => Subsystem13_out1  -- sfix16_En12
              );

  u_Subsystem14 : Subsystem14_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator13_relop1,
              alpha0 => Subsystem14_out1  -- sfix16_En12
              );

  u_Subsystem15 : Subsystem15_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator14_relop1,
              alpha0 => Subsystem15_out1  -- sfix16_En12
              );

  u_Subsystem16 : Subsystem16_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator15_relop1,
              alpha0 => Subsystem16_out1  -- sfix16_En12
              );

  u_Subsystem19 : Subsystem19_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator18_relop1,
              alpha0 => Subsystem19_out1  -- sfix16_En11
              );

  u_Subsystem20 : Subsystem20_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Enable => Relational_Operator19_relop1,
              alpha0 => Subsystem20_out1  -- sfix16_En11
              );

  Unit_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_out1 <= Push_2;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  Logical_Operator1_out1 <= Push_2 XOR Unit_Delay_out1;

  Logical_Operator_out1 <= Push_2 AND Logical_Operator1_out1;

  Unit_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay1_out1 <= to_signed(16#000000#, 21);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay1_out1 <= Wrap_To_Zero_out1_signed;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  Data_Type_Conversion_out1 <= Unit_Delay1_out1(15 DOWNTO 0);

  Sum1_add_cast <= signed(resize(unsigned'(Logical_Operator_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0'), 21));
  Sum1_add_cast_1 <= resize(Data_Type_Conversion_out1, 21);
  Sum1_out1 <= Sum1_add_cast + Sum1_add_cast_1;

  Wrap_To_Zero_out1_signed <= signed(Wrap_To_Zero_out1);

  
  Saturation_out1 <= to_signed(16#004800#, 21) WHEN Wrap_To_Zero_out1_signed > to_signed(16#004800#, 21) ELSE
      to_signed(16#000000#, 21) WHEN Wrap_To_Zero_out1_signed < to_signed(16#000000#, 21) ELSE
      Wrap_To_Zero_out1_signed;

  Constant1_out1 <= to_signed(16#0000#, 16);

  Relational_Operator_1_cast <= Saturation_out1 & '0' & '0' & '0';
  Relational_Operator_1_cast_1 <= resize(Constant1_out1, 24);
  
  Relational_Operator_relop1 <= '1' WHEN Relational_Operator_1_cast = Relational_Operator_1_cast_1 ELSE
      '0';

  Constant2_out1 <= to_signed(16#4000#, 16);

  Relational_Operator1_1_cast <= Saturation_out1 & '0' & '0' & '0';
  Relational_Operator1_1_cast_1 <= resize(Constant2_out1, 24);
  
  Relational_Operator1_relop1 <= '1' WHEN Relational_Operator1_1_cast = Relational_Operator1_1_cast_1 ELSE
      '0';

  Constant3_out1 <= to_signed(16#4000#, 16);

  Relational_Operator2_1_cast <= Saturation_out1 & '0' & '0';
  Relational_Operator2_1_cast_1 <= resize(Constant3_out1, 23);
  
  Relational_Operator2_relop1 <= '1' WHEN Relational_Operator2_1_cast = Relational_Operator2_1_cast_1 ELSE
      '0';

  Constant4_out1 <= to_signed(16#6000#, 16);

  Relational_Operator3_1_cast <= Saturation_out1 & '0' & '0';
  Relational_Operator3_1_cast_1 <= resize(Constant4_out1, 23);
  
  Relational_Operator3_relop1 <= '1' WHEN Relational_Operator3_1_cast = Relational_Operator3_1_cast_1 ELSE
      '0';

  Constant5_out1 <= to_signed(16#4000#, 16);

  Relational_Operator4_1_cast <= Saturation_out1 & '0';
  Relational_Operator4_1_cast_1 <= resize(Constant5_out1, 22);
  
  Relational_Operator4_relop1 <= '1' WHEN Relational_Operator4_1_cast = Relational_Operator4_1_cast_1 ELSE
      '0';

  Constant6_out1 <= to_signed(16#5000#, 16);

  Relational_Operator5_1_cast <= Saturation_out1 & '0';
  Relational_Operator5_1_cast_1 <= resize(Constant6_out1, 22);
  
  Relational_Operator5_relop1 <= '1' WHEN Relational_Operator5_1_cast = Relational_Operator5_1_cast_1 ELSE
      '0';

  Constant7_out1 <= to_signed(16#6000#, 16);

  Relational_Operator6_1_cast <= Saturation_out1 & '0';
  Relational_Operator6_1_cast_1 <= resize(Constant7_out1, 22);
  
  Relational_Operator6_relop1 <= '1' WHEN Relational_Operator6_1_cast = Relational_Operator6_1_cast_1 ELSE
      '0';

  Constant8_out1 <= to_signed(16#7000#, 16);

  Relational_Operator7_1_cast <= Saturation_out1 & '0';
  Relational_Operator7_1_cast_1 <= resize(Constant8_out1, 22);
  
  Relational_Operator7_relop1 <= '1' WHEN Relational_Operator7_1_cast = Relational_Operator7_1_cast_1 ELSE
      '0';

  Constant16_out1 <= to_signed(16#4000#, 16);

  Relational_Operator16_1_cast <= resize(Constant16_out1, 21);
  
  Relational_Operator16_relop1 <= '1' WHEN Saturation_out1 = Relational_Operator16_1_cast ELSE
      '0';

  Constant18_out1 <= to_signed(16#4800#, 16);

  Relational_Operator17_1_cast <= resize(Constant18_out1, 21);
  
  Relational_Operator17_relop1 <= '1' WHEN Saturation_out1 = Relational_Operator17_1_cast ELSE
      '0';

  Saturation_out1_floor <= Saturation_out1(20 DOWNTO 11);

  Subsystem_out1_unsigned <= unsigned(Subsystem_out1);

  Subsystem2_out1_unsigned <= unsigned(Subsystem2_out1);

  Subsystem3_out1_unsigned <= unsigned(Subsystem3_out1);

  Subsystem4_out1_unsigned <= unsigned(Subsystem4_out1);

  Subsystem5_out1_unsigned <= unsigned(Subsystem5_out1);

  Subsystem6_out1_unsigned <= unsigned(Subsystem6_out1);

  Subsystem7_out1_unsigned <= unsigned(Subsystem7_out1);

  Subsystem8_out1_unsigned <= unsigned(Subsystem8_out1);

  Subsystem17_out1_unsigned <= unsigned(Subsystem17_out1);

  Subsystem18_out1_unsigned <= unsigned(Subsystem18_out1);

  
  Multiport_Switch_out1 <= Subsystem_out1_unsigned WHEN Saturation_out1_floor = to_signed(16#000#, 10) ELSE
      Subsystem2_out1_unsigned WHEN Saturation_out1_floor = to_signed(16#001#, 10) ELSE
      Subsystem3_out1_unsigned WHEN Saturation_out1_floor = to_signed(16#002#, 10) ELSE
      Subsystem4_out1_unsigned WHEN Saturation_out1_floor = to_signed(16#003#, 10) ELSE
      Subsystem5_out1_unsigned WHEN Saturation_out1_floor = to_signed(16#004#, 10) ELSE
      Subsystem6_out1_unsigned WHEN Saturation_out1_floor = to_signed(16#005#, 10) ELSE
      Subsystem7_out1_unsigned WHEN Saturation_out1_floor = to_signed(16#006#, 10) ELSE
      Subsystem8_out1_unsigned WHEN Saturation_out1_floor = to_signed(16#007#, 10) ELSE
      Subsystem17_out1_unsigned WHEN Saturation_out1_floor = to_signed(16#008#, 10) ELSE
      Subsystem18_out1_unsigned;

  HEX2_1 <= std_logic_vector(Multiport_Switch_out1);

  kconst <= to_signed(16#19999A#, 22);

  HwModeRegister20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_1 <= kconst;
      END IF;
    END IF;
  END PROCESS HwModeRegister20_process;


  Constant9_out1 <= to_unsigned(16#40#, 7);

  
  Relational_Operator8_relop1 <= '1' WHEN Multiport_Switch_out1 = Constant9_out1 ELSE
      '0';

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator8_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator8_out1 <= Relational_Operator8_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  Subsystem9_out1_signed <= signed(Subsystem9_out1);

  
  Multiply_in0 <= Subsystem9_out1_signed WHEN Relational_Operator8_out1 = '1' ELSE
      to_signed(16#0000#, 16);
  Multiply_cast <= resize(Multiply_in0, 17);
  Multiply_out1 <= Multiply_cast(15 DOWNTO 0);

  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply_out1_1 <= Multiply_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Constant10_out1 <= to_unsigned(16#79#, 7);

  
  Relational_Operator9_relop1 <= '1' WHEN Multiport_Switch_out1 = Constant10_out1 ELSE
      '0';

  HwModeRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator9_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator9_out1 <= Relational_Operator9_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  Subsystem10_out1_signed <= signed(Subsystem10_out1);

  
  Multiply1_in0 <= Subsystem10_out1_signed WHEN Relational_Operator9_out1 = '1' ELSE
      to_signed(16#0000#, 16);
  Multiply1_cast <= resize(Multiply1_in0, 17);
  Multiply1_out1 <= Multiply1_cast(15 DOWNTO 0);

  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply1_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply1_out1_1 <= Multiply1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  Constant11_out1 <= to_unsigned(16#24#, 7);

  
  Relational_Operator10_relop1 <= '1' WHEN Multiport_Switch_out1 = Constant11_out1 ELSE
      '0';

  HwModeRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator10_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator10_out1 <= Relational_Operator10_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;


  Subsystem11_out1_signed <= signed(Subsystem11_out1);

  
  Multiply2_in0 <= Subsystem11_out1_signed WHEN Relational_Operator10_out1 = '1' ELSE
      to_signed(16#0000#, 16);
  Multiply2_cast <= resize(Multiply2_in0, 17);
  Multiply2_out1 <= Multiply2_cast(15 DOWNTO 0);

  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply2_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply2_out1_1 <= Multiply2_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  Constant17_out1 <= to_unsigned(16#30#, 7);

  
  Relational_Operator11_relop1 <= '1' WHEN Multiport_Switch_out1 = Constant17_out1 ELSE
      '0';

  HwModeRegister6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator11_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator11_out1 <= Relational_Operator11_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister6_process;


  Subsystem12_out1_signed <= signed(Subsystem12_out1);

  
  Multiply3_in0 <= Subsystem12_out1_signed WHEN Relational_Operator11_out1 = '1' ELSE
      to_signed(16#0000#, 16);
  Multiply3_cast <= resize(Multiply3_in0, 17);
  Multiply3_out1 <= Multiply3_cast(15 DOWNTO 0);

  PipelineRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply3_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply3_out1_1 <= Multiply3_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  Constant12_out1 <= to_unsigned(16#19#, 7);

  
  Relational_Operator12_relop1 <= '1' WHEN Multiport_Switch_out1 = Constant12_out1 ELSE
      '0';

  HwModeRegister8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator12_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator12_out1 <= Relational_Operator12_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister8_process;


  Subsystem13_out1_signed <= signed(Subsystem13_out1);

  
  Multiply4_in0 <= Subsystem13_out1_signed WHEN Relational_Operator12_out1 = '1' ELSE
      to_signed(16#0000#, 16);
  Multiply4_cast <= resize(Multiply4_in0, 17);
  Multiply4_out1 <= Multiply4_cast(15 DOWNTO 0);

  PipelineRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply4_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply4_out1_1 <= Multiply4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  Constant13_out1 <= to_unsigned(16#12#, 7);

  
  Relational_Operator13_relop1 <= '1' WHEN Multiport_Switch_out1 = Constant13_out1 ELSE
      '0';

  HwModeRegister10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator13_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator13_out1 <= Relational_Operator13_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister10_process;


  Subsystem14_out1_signed <= signed(Subsystem14_out1);

  
  Multiply5_in0 <= Subsystem14_out1_signed WHEN Relational_Operator13_out1 = '1' ELSE
      to_signed(16#0000#, 16);
  Multiply5_cast <= resize(Multiply5_in0, 17);
  Multiply5_out1 <= Multiply5_cast(15 DOWNTO 0);

  PipelineRegister5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply5_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply5_out1_1 <= Multiply5_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister5_process;


  Constant14_out1 <= to_unsigned(16#02#, 7);

  
  Relational_Operator14_relop1 <= '1' WHEN Multiport_Switch_out1 = Constant14_out1 ELSE
      '0';

  HwModeRegister12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator14_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator14_out1 <= Relational_Operator14_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister12_process;


  Subsystem15_out1_signed <= signed(Subsystem15_out1);

  
  Multiply6_in0 <= Subsystem15_out1_signed WHEN Relational_Operator14_out1 = '1' ELSE
      to_signed(16#0000#, 16);
  Multiply6_cast <= resize(Multiply6_in0, 17);
  Multiply6_out1 <= Multiply6_cast(15 DOWNTO 0);

  PipelineRegister6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply6_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply6_out1_1 <= Multiply6_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister6_process;


  Constant15_out1 <= to_unsigned(16#78#, 7);

  
  Relational_Operator15_relop1 <= '1' WHEN Multiport_Switch_out1 = Constant15_out1 ELSE
      '0';

  HwModeRegister14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator15_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator15_out1 <= Relational_Operator15_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister14_process;


  Subsystem16_out1_signed <= signed(Subsystem16_out1);

  
  Multiply7_in0 <= Subsystem16_out1_signed WHEN Relational_Operator15_out1 = '1' ELSE
      to_signed(16#0000#, 16);
  Multiply7_cast <= resize(Multiply7_in0, 17);
  Multiply7_out1 <= Multiply7_cast(15 DOWNTO 0);

  PipelineRegister7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply7_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply7_out1_1 <= Multiply7_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister7_process;


  Constant19_out1 <= to_unsigned(16#00#, 7);

  
  Relational_Operator18_relop1 <= '1' WHEN Multiport_Switch_out1 = Constant19_out1 ELSE
      '0';

  HwModeRegister16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator18_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator18_out1 <= Relational_Operator18_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister16_process;


  Subsystem19_out1_signed <= signed(Subsystem19_out1);

  
  Multiply8_in0 <= Subsystem19_out1_signed WHEN Relational_Operator18_out1 = '1' ELSE
      to_signed(16#0000#, 16);
  Multiply8_cast <= resize(Multiply8_in0, 17);
  Multiply8_out1 <= Multiply8_cast(15 DOWNTO 0);

  PipelineRegister8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply8_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply8_out1_1 <= Multiply8_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister8_process;


  Constant20_out1 <= to_unsigned(16#10#, 7);

  
  Relational_Operator19_relop1 <= '1' WHEN Multiport_Switch_out1 = Constant20_out1 ELSE
      '0';

  HwModeRegister18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator19_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator19_out1 <= Relational_Operator19_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister18_process;


  Subsystem20_out1_signed <= signed(Subsystem20_out1);

  
  Multiply9_in0 <= Subsystem20_out1_signed WHEN Relational_Operator19_out1 = '1' ELSE
      to_signed(16#0000#, 16);
  Multiply9_cast <= resize(Multiply9_in0, 17);
  Multiply9_out1 <= Multiply9_cast(15 DOWNTO 0);

  PipelineRegister9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply9_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply9_out1_1 <= Multiply9_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister9_process;


  Sum_add_cast <= resize(Multiply_out1_1 & '0' & '0' & '0' & '0', 22);
  Sum_add_cast_1 <= resize(Multiply1_out1_1, 22);
  Sum_add_temp <= Sum_add_cast + Sum_add_cast_1;
  Sum_add_cast_2 <= resize(Multiply2_out1_1 & '0', 22);
  Sum_add_temp_1 <= Sum_add_temp + Sum_add_cast_2;
  Sum_add_cast_3 <= resize(Multiply3_out1_1 & '0', 22);
  Sum_add_temp_2 <= Sum_add_temp_1 + Sum_add_cast_3;
  Sum_add_cast_4 <= resize(Multiply4_out1_1 & '0' & '0', 22);
  Sum_add_temp_3 <= Sum_add_temp_2 + Sum_add_cast_4;
  Sum_add_cast_5 <= resize(Multiply5_out1_1 & '0' & '0', 22);
  Sum_add_temp_4 <= Sum_add_temp_3 + Sum_add_cast_5;
  Sum_add_cast_6 <= resize(Multiply6_out1_1 & '0' & '0', 22);
  Sum_add_temp_5 <= Sum_add_temp_4 + Sum_add_cast_6;
  Sum_add_cast_7 <= resize(Multiply7_out1_1 & '0' & '0', 22);
  Sum_add_temp_6 <= Sum_add_temp_5 + Sum_add_cast_7;
  Sum_add_cast_8 <= resize(Multiply8_out1_1 & '0' & '0' & '0', 22);
  Sum_add_temp_7 <= Sum_add_temp_6 + Sum_add_cast_8;
  Sum_add_cast_9 <= resize(Multiply9_out1_1 & '0' & '0' & '0', 22);
  Sum_out1 <= Sum_add_temp_7 + Sum_add_cast_9;

  HwModeRegister21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum_out1_1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum_out1_1 <= Sum_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister21_process;


  Gain_out1 <= kconst_1 * Sum_out1_1;

  PipelineRegister10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain_out1_1 <= to_signed(0, 44);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain_out1_1 <= Gain_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister10_process;


  Data_Type_Conversion1_out1 <= Gain_out1_1(42 DOWNTO 23);

  out2 <= std_logic_vector(Data_Type_Conversion1_out1);

END rtl;

