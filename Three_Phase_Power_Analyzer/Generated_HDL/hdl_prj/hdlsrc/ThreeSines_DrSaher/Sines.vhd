-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ThreeSines_DrSaher\Sines.vhd
-- Created: 2020-02-04 20:32:36
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2e-08
-- Target subsystem base rate: 2e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- CLK_1                         ce_out        2e-08
-- Sync_n                        ce_out        2e-08
-- Blank_n                       ce_out        2e-08
-- HEX0_O                        ce_out        2e-08
-- HEX1_O                        ce_out        2e-08
-- HEX2_O                        ce_out        2e-08
-- HEX3_O                        ce_out        2e-08
-- Phase_A                       ce_out        2e-08
-- Phase_A_1                     ce_out        2e-08
-- Phase_B                       ce_out        2e-08
-- Phase_B_1                     ce_out        2e-08
-- Phase_C                       ce_out        2e-08
-- Phase_C_1                     ce_out        2e-08
-- PhaseB_Analog                 ce_out        2e-08
-- PhaseC_Tri_Analog             ce_out        2e-08
-- LEDG0                         ce_out        2e-08
-- LEDG1                         ce_out        2e-08
-- LEDG2                         ce_out        2e-08
-- HEX5                          ce_out        2e-08
-- HEX4                          ce_out        2e-08
-- PhaseA_Analog                 ce_out        2e-08
-- Sample_Pulse                  ce_out        2e-08
-- PhaseA_PWM                    ce_out        2e-08
-- PhaseB_PWM                    ce_out        2e-08
-- PhaseC_PWM                    ce_out        2e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Sines
-- Source Path: ThreeSines_DrSaher/Sines 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Sines_pkg.ALL;

ENTITY Sines IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Push_3                            :   IN    std_logic;
        Push_2                            :   IN    std_logic;
        Push_0                            :   IN    std_logic;
        SW1                               :   IN    std_logic;
        SW0                               :   IN    std_logic;
        Push_1                            :   IN    std_logic;
        SW2                               :   IN    std_logic;
        Reload                            :   IN    std_logic;
        SW7                               :   IN    std_logic;
        SW8                               :   IN    std_logic;
        SW9                               :   IN    std_logic;
        SW10                              :   IN    std_logic;
        SW15                              :   IN    std_logic;
        reset_1                           :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        CLK_1                             :   OUT   std_logic;
        Sync_n                            :   OUT   std_logic;
        Blank_n                           :   OUT   std_logic;
        HEX0_O                            :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        HEX1_O                            :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        HEX2_O                            :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        HEX3_O                            :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        Phase_A                           :   OUT   std_logic;
        Phase_A_1                         :   OUT   std_logic;
        Phase_B                           :   OUT   std_logic;
        Phase_B_1                         :   OUT   std_logic;
        Phase_C                           :   OUT   std_logic;
        Phase_C_1                         :   OUT   std_logic;
        PhaseB_Analog                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        PhaseC_Tri_Analog                 :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        LEDG0                             :   OUT   std_logic;
        LEDG1                             :   OUT   std_logic;
        LEDG2                             :   OUT   std_logic;
        HEX5                              :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        HEX4                              :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
        PhaseA_Analog                     :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
        Sample_Pulse                      :   OUT   std_logic;
        PhaseA_PWM                        :   OUT   std_logic;
        PhaseB_PWM                        :   OUT   std_logic;
        PhaseC_PWM                        :   OUT   std_logic
        );
END Sines;


ARCHITECTURE rtl OF Sines IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT DAC_Control
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          CLK_1                           :   OUT   std_logic;
          Sync_n                          :   OUT   std_logic;
          Blank_n                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT HEX0
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Push_0                          :   IN    std_logic;
          HEX0_1                          :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          Out2                            :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En15
          );
  END COMPONENT;

  COMPONENT HEX1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Push_1                          :   IN    std_logic;
          HEX1_1                          :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          Out2                            :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En15
          );
  END COMPONENT;

  COMPONENT HEX2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Push_2                          :   IN    std_logic;
          HEX2_1                          :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          out2                            :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En15
          );
  END COMPONENT;

  COMPONENT HEX3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Push_3                          :   IN    std_logic;
          HEX3_1                          :   OUT   std_logic_vector(6 DOWNTO 0);  -- ufix7
          Out2                            :   OUT   std_logic_vector(19 DOWNTO 0)  -- sfix20_En15
          );
  END COMPONENT;

  COMPONENT Sin12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT aPA_Save
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          MulNumber                       :   IN    std_logic_vector(21 DOWNTO 0);  -- sfix22_En15
          Enable                          :   IN    std_logic;
          MulResult                       :   OUT   std_logic_vector(21 DOWNTO 0)  -- sfix22_En15
          );
  END COMPONENT;

  COMPONENT Sin13
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Sin14
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Sin15
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Subsystem_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Sin4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Subsystem1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Sin5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Subsystem2_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Sin6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Subsystem7_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Sin11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Subsystem4_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Sin8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Subsystem5_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Sin9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Subsystem6_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Sin10
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT Subsystem9_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT Subsystem10_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT Subsystem8_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic_vector(9 DOWNTO 0)  -- ufix10
          );
  END COMPONENT;

  COMPONENT Subsystem11_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Subsystem12_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Subsystem13_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Subsystem3_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In1                             :   IN    std_logic;
          Enable                          :   IN    std_logic;
          Out1                            :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Sin7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          angle                           :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
          sin                             :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : DAC_Control
    USE ENTITY work.DAC_Control(rtl);

  FOR ALL : HEX0
    USE ENTITY work.HEX0(rtl);

  FOR ALL : HEX1
    USE ENTITY work.HEX1(rtl);

  FOR ALL : HEX2
    USE ENTITY work.HEX2(rtl);

  FOR ALL : HEX3
    USE ENTITY work.HEX3(rtl);

  FOR ALL : Sin12
    USE ENTITY work.Sin12(rtl);

  FOR ALL : aPA_Save
    USE ENTITY work.aPA_Save(rtl);

  FOR ALL : Sin13
    USE ENTITY work.Sin13(rtl);

  FOR ALL : Sin14
    USE ENTITY work.Sin14(rtl);

  FOR ALL : Sin15
    USE ENTITY work.Sin15(rtl);

  FOR ALL : Subsystem_block3
    USE ENTITY work.Subsystem_block3(rtl);

  FOR ALL : Sin4
    USE ENTITY work.Sin4(rtl);

  FOR ALL : Subsystem1
    USE ENTITY work.Subsystem1(rtl);

  FOR ALL : Sin5
    USE ENTITY work.Sin5(rtl);

  FOR ALL : Subsystem2_block3
    USE ENTITY work.Subsystem2_block3(rtl);

  FOR ALL : Sin6
    USE ENTITY work.Sin6(rtl);

  FOR ALL : Subsystem7_block3
    USE ENTITY work.Subsystem7_block3(rtl);

  FOR ALL : Sin11
    USE ENTITY work.Sin11(rtl);

  FOR ALL : Subsystem4_block3
    USE ENTITY work.Subsystem4_block3(rtl);

  FOR ALL : Sin8
    USE ENTITY work.Sin8(rtl);

  FOR ALL : Subsystem5_block3
    USE ENTITY work.Subsystem5_block3(rtl);

  FOR ALL : Sin9
    USE ENTITY work.Sin9(rtl);

  FOR ALL : Subsystem6_block3
    USE ENTITY work.Subsystem6_block3(rtl);

  FOR ALL : Sin10
    USE ENTITY work.Sin10(rtl);

  FOR ALL : Subsystem9_block3
    USE ENTITY work.Subsystem9_block3(rtl);

  FOR ALL : Subsystem10_block3
    USE ENTITY work.Subsystem10_block3(rtl);

  FOR ALL : Subsystem8_block3
    USE ENTITY work.Subsystem8_block3(rtl);

  FOR ALL : Subsystem11_block3
    USE ENTITY work.Subsystem11_block3(rtl);

  FOR ALL : Subsystem12_block3
    USE ENTITY work.Subsystem12_block3(rtl);

  FOR ALL : Subsystem13_block3
    USE ENTITY work.Subsystem13_block3(rtl);

  FOR ALL : Subsystem3_block3
    USE ENTITY work.Subsystem3_block3(rtl);

  FOR ALL : Sin7
    USE ENTITY work.Sin7(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL DAC_Control_out1                 : std_logic;
  SIGNAL DAC_Control_out2                 : std_logic;
  SIGNAL DAC_Control_out3                 : std_logic;
  SIGNAL delayMatch52_reg                 : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL DAC_Control_out1_1               : std_logic;
  SIGNAL delayMatch53_reg                 : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL DAC_Control_out2_1               : std_logic;
  SIGNAL delayMatch54_reg                 : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL DAC_Control_out3_1               : std_logic;
  SIGNAL HEX0_out1                        : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX0_out2                        : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL HEX0_out1_unsigned               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch55_reg                 : vector_of_unsigned7(0 TO 23);  -- ufix7 [24]
  SIGNAL HEX0_out1_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX1_out1                        : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX1_out2                        : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL HEX1_out1_unsigned               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch56_reg                 : vector_of_unsigned7(0 TO 23);  -- ufix7 [24]
  SIGNAL HEX1_out1_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX2_out1                        : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX2_out2                        : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL HEX2_out1_unsigned               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch57_reg                 : vector_of_unsigned7(0 TO 23);  -- ufix7 [24]
  SIGNAL HEX2_out1_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX3_out1                        : std_logic_vector(6 DOWNTO 0);  -- ufix7
  SIGNAL HEX3_out2                        : std_logic_vector(19 DOWNTO 0);  -- ufix20
  SIGNAL HEX3_out1_unsigned               : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch58_reg                 : vector_of_unsigned7(0 TO 23);  -- ufix7 [24]
  SIGNAL HEX3_out1_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL kconst                           : signed(32 DOWNTO 0);  -- sfix33_En42
  SIGNAL kconst_1                         : signed(32 DOWNTO 0);  -- sfix33_En42
  SIGNAL Counter_Limited_out1             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant4_out1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant_out1                    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Sum_sub_cast                     : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Sum_sub_cast_1                   : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Sum_out1                         : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Counter_Limited_out1_dtc         : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Switch_out1                      : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Switch_out1_1                    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Gain25_out1                      : signed(65 DOWNTO 0);  -- sfix66_En42
  SIGNAL Gain25_out1_1                    : signed(65 DOWNTO 0);  -- sfix66_En42
  SIGNAL Constant26_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Sum16_sub_cast                   : signed(66 DOWNTO 0);  -- sfix67_En42
  SIGNAL Sum16_sub_cast_1                 : signed(66 DOWNTO 0);  -- sfix67_En42
  SIGNAL Sum16_out1                       : signed(66 DOWNTO 0);  -- sfix67_En42
  SIGNAL delayMatch14_reg                 : vector_of_signed67(0 TO 19);  -- sfix67 [20]
  SIGNAL From17_out1                      : signed(66 DOWNTO 0);  -- sfix67_En42
  SIGNAL kconst_2                         : unsigned(23 DOWNTO 0);  -- ufix24_En37
  SIGNAL kconst_3                         : unsigned(23 DOWNTO 0);  -- ufix24_En37
  SIGNAL HDL_Counter8_out1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter8_out1_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain31_out1                      : unsigned(47 DOWNTO 0);  -- ufix48_En37
  SIGNAL Gain31_out1_1                    : unsigned(47 DOWNTO 0);  -- ufix48_En37
  SIGNAL Data_Type_Conversion29_out1      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin12_out1                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sin12_out1_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL From8_out1                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HEX3_out2_signed                 : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL delayMatch_reg                   : vector_of_signed20(0 TO 1);  -- sfix20 [2]
  SIGNAL HEX3_out2_1                      : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL HEX2_out2_signed                 : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL HEX1_out2_signed                 : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL HEX0_out2_signed                 : signed(19 DOWNTO 0);  -- sfix20_En15
  SIGNAL Sum14_add_cast                   : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_add_cast_1                 : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_add_temp                   : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_add_cast_2                 : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_add_temp_1                 : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_add_cast_3                 : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum14_out1                       : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Sum15_add_cast                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum15_add_cast_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum15_add_temp                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum15_add_cast_2                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum15_out1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Constant37_out1                  : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator15_1_cast     : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator15_1_cast_1   : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator15_relop1     : std_logic;
  SIGNAL Constant39_out1                  : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator17_1_cast     : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator17_1_cast_1   : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator17_relop1     : std_logic;
  SIGNAL Logical_Operator16_out1          : std_logic;
  SIGNAL Logical_Operator21_out1          : std_logic;
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator21_out1_1        : std_logic;
  SIGNAL aPA_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL aPA_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister1_reg              : vector_of_signed22(0 TO 10);  -- sfix22 [11]
  SIGNAL aPA_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply_out1                    : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister46_reg             : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL Multiply_out1_1                  : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant30_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant31_out1                  : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Constant31_out1_dtc              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch4_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HwModeRegister47_reg             : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL From56_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply5_out1                   : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL Multiply5_out1_1                 : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL kconst_4                         : unsigned(23 DOWNTO 0);  -- ufix24_En38
  SIGNAL kconst_5                         : unsigned(23 DOWNTO 0);  -- ufix24_En38
  SIGNAL HDL_Counter9_out1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter9_out1_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain32_out1                      : unsigned(47 DOWNTO 0);  -- ufix48_En38
  SIGNAL Gain32_out1_1                    : unsigned(47 DOWNTO 0);  -- ufix48_En38
  SIGNAL Data_Type_Conversion30_out1      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin13_out1                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sin13_out1_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL From9_out1                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant36_out1                  : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator14_1_cast     : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator14_1_cast_1   : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator14_relop1     : std_logic;
  SIGNAL Constant38_out1                  : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator16_1_cast     : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator16_1_cast_1   : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator16_relop1     : std_logic;
  SIGNAL Logical_Operator15_out1          : std_logic;
  SIGNAL Logical_Operator13_out1          : std_logic;
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator13_out1_1        : std_logic;
  SIGNAL bPA_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL bPA_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister3_reg              : vector_of_signed22(0 TO 10);  -- sfix22 [11]
  SIGNAL bPA_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply1_out1                   : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister48_reg             : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL Multiply1_out1_1                 : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL Constant31_out1_dtc_1            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch3_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HwModeRegister49_reg             : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL From55_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply6_out1                   : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL Multiply6_out1_1                 : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL kconst_6                         : unsigned(23 DOWNTO 0);  -- ufix24_En39
  SIGNAL kconst_7                         : unsigned(23 DOWNTO 0);  -- ufix24_En39
  SIGNAL HDL_Counter10_out1               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter10_out1_1             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain33_out1                      : unsigned(47 DOWNTO 0);  -- ufix48_En39
  SIGNAL Gain33_out1_1                    : unsigned(47 DOWNTO 0);  -- ufix48_En39
  SIGNAL Data_Type_Conversion33_out1      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin14_out1                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sin14_out1_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL From10_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Constant35_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Relational_Operator13_1_cast     : signed(24 DOWNTO 0);  -- sfix25_En14
  SIGNAL Relational_Operator13_1_cast_1   : signed(24 DOWNTO 0);  -- sfix25_En14
  SIGNAL Relational_Operator13_relop1     : std_logic;
  SIGNAL Constant33_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Relational_Operator12_1_cast     : signed(24 DOWNTO 0);  -- sfix25_En14
  SIGNAL Relational_Operator12_1_cast_1   : signed(24 DOWNTO 0);  -- sfix25_En14
  SIGNAL Relational_Operator12_relop1     : std_logic;
  SIGNAL Logical_Operator12_out1          : std_logic;
  SIGNAL Logical_Operator14_out1          : std_logic;
  SIGNAL delayMatch7_reg                  : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator14_out1_1        : std_logic;
  SIGNAL cPA_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL cPA_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister25_reg             : vector_of_signed22(0 TO 10);  -- sfix22 [11]
  SIGNAL cPA_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply2_out1                   : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister50_reg             : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL Multiply2_out1_1                 : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL Constant31_out1_dtc_2            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch2_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HwModeRegister51_reg             : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL From52_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply7_out1                   : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL Multiply7_out1_1                 : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL kconst_8                         : unsigned(23 DOWNTO 0);  -- ufix24_En41
  SIGNAL kconst_9                         : unsigned(23 DOWNTO 0);  -- ufix24_En41
  SIGNAL HDL_Counter11_out1               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter11_out1_1             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain34_out1                      : unsigned(47 DOWNTO 0);  -- ufix48_En41
  SIGNAL Gain34_out1_1                    : unsigned(47 DOWNTO 0);  -- ufix48_En41
  SIGNAL Data_Type_Conversion36_out1      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin15_out1                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sin15_out1_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch10_reg                 : vector_of_signed16(0 TO 3);  -- sfix16 [4]
  SIGNAL From11_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Sum19_add_cast                   : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum19_add_cast_1                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum19_add_temp                   : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum19_add_cast_2                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum19_add_temp_1                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum19_add_cast_3                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum19_out1                       : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum19_out1_1                     : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Constant34_out1                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Relational_Operator20_1_cast     : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL Relational_Operator20_1_cast_1   : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL Relational_Operator20_relop1     : std_logic;
  SIGNAL Constant28_out1                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Relational_Operator18_1_cast     : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL Relational_Operator18_1_cast_1   : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL Relational_Operator18_relop1     : std_logic;
  SIGNAL Logical_Operator11_out1          : std_logic;
  SIGNAL Logical_Operator17_out1          : std_logic;
  SIGNAL delayMatch11_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator17_out1_1        : std_logic;
  SIGNAL dPA_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL dPA_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister41_reg             : vector_of_signed22(0 TO 14);  -- sfix22 [15]
  SIGNAL dPA_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply3_out1                   : signed(77 DOWNTO 0);  -- sfix78_En58
  SIGNAL HwModeRegister44_reg             : vector_of_signed78(0 TO 1);  -- sfix78 [2]
  SIGNAL Multiply3_out1_1                 : signed(77 DOWNTO 0);  -- sfix78_En58
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL Constant31_out1_dtc_3            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Switch1_out1                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL HwModeRegister45_reg             : vector_of_signed16(0 TO 20);  -- sfix16 [21]
  SIGNAL From19_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply4_out1                   : signed(93 DOWNTO 0);  -- sfix94_En72
  SIGNAL Multiply4_out1_1                 : signed(93 DOWNTO 0);  -- sfix94_En72
  SIGNAL Phase_A_PWM_1_cast               : signed(96 DOWNTO 0);  -- sfix97_En72
  SIGNAL Phase_A_PWM_1_cast_1             : signed(96 DOWNTO 0);  -- sfix97_En72
  SIGNAL Phase_A_PWM_relop1               : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Logical_Operator8_out1           : std_logic;
  SIGNAL delayMatch59_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator8_out1_1         : std_logic;
  SIGNAL Logical_Operator9_out1           : std_logic;
  SIGNAL Delay1_reg                       : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL Logical_Operator10_out1          : std_logic;
  SIGNAL delayMatch60_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator10_out1_1        : std_logic;
  SIGNAL delayMatch28_reg                 : vector_of_signed67(0 TO 19);  -- sfix67 [20]
  SIGNAL From22_out1                      : signed(66 DOWNTO 0);  -- sfix67_En42
  SIGNAL kconst_10                        : unsigned(23 DOWNTO 0);  -- ufix24_En37
  SIGNAL kconst_11                        : unsigned(23 DOWNTO 0);  -- ufix24_En37
  SIGNAL Constant13_out1                  : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Relational_Operator4_relop1      : std_logic;
  SIGNAL Subsystem_out1                   : std_logic;
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL Logical_Operator_out1            : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter_out1_1               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain9_out1                       : unsigned(47 DOWNTO 0);  -- ufix48_En37
  SIGNAL Gain9_out1_1                     : unsigned(47 DOWNTO 0);  -- ufix48_En37
  SIGNAL Data_Type_Conversion9_out1       : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin4_out1                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sin4_out1_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL From_out1                        : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Logical_Operator23_out1          : std_logic;
  SIGNAL delayMatch15_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator23_out1_1        : std_logic;
  SIGNAL aPB_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL aPB_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister13_reg             : vector_of_signed22(0 TO 10);  -- sfix22 [11]
  SIGNAL aPB_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply14_out1                  : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister6_reg              : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL Multiply14_out1_1                : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister7_reg              : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL From46_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply11_out1                  : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL Multiply11_out1_1                : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL kconst_12                        : unsigned(23 DOWNTO 0);  -- ufix24_En38
  SIGNAL kconst_13                        : unsigned(23 DOWNTO 0);  -- ufix24_En38
  SIGNAL Subsystem1_out1                  : std_logic;
  SIGNAL Unit_Delay1_out1                 : std_logic;
  SIGNAL Logical_Operator1_out1           : std_logic;
  SIGNAL HDL_Counter1_out1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter1_out1_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain11_out1                      : unsigned(47 DOWNTO 0);  -- ufix48_En38
  SIGNAL Gain11_out1_1                    : unsigned(47 DOWNTO 0);  -- ufix48_En38
  SIGNAL Data_Type_Conversion11_out1      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin5_out1                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sin5_out1_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL From6_out1                       : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Logical_Operator19_out1          : std_logic;
  SIGNAL delayMatch18_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator19_out1_1        : std_logic;
  SIGNAL bPB_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL bPB_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister15_reg             : vector_of_signed22(0 TO 10);  -- sfix22 [11]
  SIGNAL bPB_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply15_out1                  : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister8_reg              : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL Multiply15_out1_1                : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister9_reg              : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL From44_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply12_out1                  : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL Multiply12_out1_1                : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL kconst_14                        : unsigned(23 DOWNTO 0);  -- ufix24_En39
  SIGNAL kconst_15                        : unsigned(23 DOWNTO 0);  -- ufix24_En39
  SIGNAL Subsystem2_out1                  : std_logic;
  SIGNAL Unit_Delay2_out1                 : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL HDL_Counter2_out1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter2_out1_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain13_out1                      : unsigned(47 DOWNTO 0);  -- ufix48_En39
  SIGNAL Gain13_out1_1                    : unsigned(47 DOWNTO 0);  -- ufix48_En39
  SIGNAL Data_Type_Conversion13_out1      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin6_out1                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sin6_out1_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL From14_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Logical_Operator20_out1          : std_logic;
  SIGNAL delayMatch21_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator20_out1_1        : std_logic;
  SIGNAL cPB_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL cPB_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister53_reg             : vector_of_signed22(0 TO 10);  -- sfix22 [11]
  SIGNAL cPB_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply8_out1                   : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister10_reg             : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL Multiply8_out1_1                 : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister11_reg             : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL From41_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply13_out1                  : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL Multiply13_out1_1                : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL Constant11_out1                  : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Sum21_stage2_sub_cast            : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Sum21_stage2_sub_cast_1          : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Sum21_op_stage2                  : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL kconst_16                        : unsigned(23 DOWNTO 0);  -- ufix24_En41
  SIGNAL kconst_17                        : unsigned(23 DOWNTO 0);  -- ufix24_En41
  SIGNAL Constant17_out1                  : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL Relational_Operator8_relop1      : std_logic;
  SIGNAL Subsystem7_out1                  : std_logic;
  SIGNAL Unit_Delay7_out1                 : std_logic;
  SIGNAL Logical_Operator7_out1           : std_logic;
  SIGNAL HDL_Counter7_out1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter7_out1_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain22_out1                      : unsigned(47 DOWNTO 0);  -- ufix48_En41
  SIGNAL Gain22_out1_1                    : unsigned(47 DOWNTO 0);  -- ufix48_En41
  SIGNAL Data_Type_Conversion22_out1      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin11_out1                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sin11_out1_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Sum21_stage3_sub_cast            : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Sum21_out1                       : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL Sum23_sub_cast                   : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Sum23_sub_cast_1                 : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Sum23_out1                       : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL delayMatch24_reg                 : vector_of_signed19(0 TO 3);  -- sfix19 [4]
  SIGNAL Sum23_out1_1                     : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL Sum20_add_cast                   : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum20_add_cast_1                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum20_add_temp                   : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum20_add_cast_2                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum20_add_temp_1                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum20_add_cast_3                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum20_out1                       : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum20_out1_1                     : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Logical_Operator22_out1          : std_logic;
  SIGNAL delayMatch25_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator22_out1_1        : std_logic;
  SIGNAL dPB_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL dPB_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister55_reg             : vector_of_signed22(0 TO 14);  -- sfix22 [15]
  SIGNAL dPB_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply9_out1                   : signed(77 DOWNTO 0);  -- sfix78_En58
  SIGNAL HwModeRegister4_reg              : vector_of_signed78(0 TO 1);  -- sfix78 [2]
  SIGNAL Multiply9_out1_1                 : signed(77 DOWNTO 0);  -- sfix78_En58
  SIGNAL HwModeRegister5_reg              : vector_of_signed16(0 TO 20);  -- sfix16 [21]
  SIGNAL From20_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply10_out1                  : signed(93 DOWNTO 0);  -- sfix94_En72
  SIGNAL Multiply10_out1_1                : signed(93 DOWNTO 0);  -- sfix94_En72
  SIGNAL Phase_B_PWM_1_cast               : signed(96 DOWNTO 0);  -- sfix97_En72
  SIGNAL Phase_B_PWM_1_cast_1             : signed(96 DOWNTO 0);  -- sfix97_En72
  SIGNAL Phase_B_PWM_relop1               : std_logic;
  SIGNAL Delay2_reg                       : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay2_out1                      : std_logic;
  SIGNAL Logical_Operator24_out1          : std_logic;
  SIGNAL delayMatch61_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator24_out1_1        : std_logic;
  SIGNAL Logical_Operator25_out1          : std_logic;
  SIGNAL Delay3_reg                       : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay3_out1                      : std_logic;
  SIGNAL Logical_Operator18_out1          : std_logic;
  SIGNAL delayMatch62_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator18_out1_1        : std_logic;
  SIGNAL delayMatch42_reg                 : vector_of_signed67(0 TO 19);  -- sfix67 [20]
  SIGNAL From59_out1                      : signed(66 DOWNTO 0);  -- sfix67_En42
  SIGNAL kconst_18                        : unsigned(23 DOWNTO 0);  -- ufix24_En37
  SIGNAL kconst_19                        : unsigned(23 DOWNTO 0);  -- ufix24_En37
  SIGNAL Subsystem4_out1                  : std_logic;
  SIGNAL Unit_Delay4_out1                 : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL HDL_Counter4_out1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter4_out1_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain24_out1                      : unsigned(47 DOWNTO 0);  -- ufix48_En37
  SIGNAL Gain24_out1_1                    : unsigned(47 DOWNTO 0);  -- ufix48_En37
  SIGNAL Data_Type_Conversion24_out1      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin8_out1                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sin8_out1_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL From28_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Logical_Operator49_out1          : std_logic;
  SIGNAL delayMatch29_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator49_out1_1        : std_logic;
  SIGNAL aPC_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL aPC_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister31_reg             : vector_of_signed22(0 TO 10);  -- sfix22 [11]
  SIGNAL aPC_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply22_out1                  : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister22_reg             : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL Multiply22_out1_1                : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister23_reg             : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL From80_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply19_out1                  : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL Multiply19_out1_1                : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL kconst_20                        : unsigned(23 DOWNTO 0);  -- ufix24_En38
  SIGNAL kconst_21                        : unsigned(23 DOWNTO 0);  -- ufix24_En38
  SIGNAL Subsystem5_out1                  : std_logic;
  SIGNAL Unit_Delay5_out1                 : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL HDL_Counter5_out1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter5_out1_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain18_out1                      : unsigned(47 DOWNTO 0);  -- ufix48_En38
  SIGNAL Gain18_out1_1                    : unsigned(47 DOWNTO 0);  -- ufix48_En38
  SIGNAL Data_Type_Conversion18_out1      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin9_out1                        : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sin9_out1_signed                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL From30_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Logical_Operator41_out1          : std_logic;
  SIGNAL delayMatch32_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator41_out1_1        : std_logic;
  SIGNAL bPC_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL bPC_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister33_reg             : vector_of_signed22(0 TO 10);  -- sfix22 [11]
  SIGNAL bPC_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply23_out1                  : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister26_reg             : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL Multiply23_out1_1                : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister27_reg             : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL From65_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply20_out1                  : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL Multiply20_out1_1                : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL kconst_22                        : unsigned(23 DOWNTO 0);  -- ufix24_En39
  SIGNAL kconst_23                        : unsigned(23 DOWNTO 0);  -- ufix24_En39
  SIGNAL Subsystem6_out1                  : std_logic;
  SIGNAL Unit_Delay6_out1                 : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL HDL_Counter6_out1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter6_out1_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain20_out1                      : unsigned(47 DOWNTO 0);  -- ufix48_En39
  SIGNAL Gain20_out1_1                    : unsigned(47 DOWNTO 0);  -- ufix48_En39
  SIGNAL Data_Type_Conversion20_out1      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin10_out1                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Sin10_out1_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL From36_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Logical_Operator42_out1          : std_logic;
  SIGNAL delayMatch35_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator42_out1_1        : std_logic;
  SIGNAL cPC_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL cPC_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister17_reg             : vector_of_signed22(0 TO 10);  -- sfix22 [11]
  SIGNAL cPC_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply16_out1                  : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister28_reg             : vector_of_signed38(0 TO 1);  -- sfix38 [2]
  SIGNAL Multiply16_out1_1                : signed(37 DOWNTO 0);  -- sfix38_En29
  SIGNAL HwModeRegister29_reg             : vector_of_signed16(0 TO 16);  -- sfix16 [17]
  SIGNAL From63_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply21_out1                  : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL Multiply21_out1_1                : signed(53 DOWNTO 0);  -- sfix54_En43
  SIGNAL delayMatch38_reg                 : vector_of_signed16(0 TO 3);  -- sfix16 [4]
  SIGNAL From42_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Sum22_add_cast                   : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum22_add_cast_1                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum22_add_temp                   : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum22_add_cast_2                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum22_add_temp_1                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum22_add_cast_3                 : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum22_out1                       : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Sum22_out1_1                     : signed(55 DOWNTO 0);  -- sfix56_En43
  SIGNAL Logical_Operator45_out1          : std_logic;
  SIGNAL delayMatch39_reg                 : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL Logical_Operator45_out1_1        : std_logic;
  SIGNAL dPC_Save_out1                    : std_logic_vector(21 DOWNTO 0);  -- ufix22
  SIGNAL dPC_Save_out1_signed             : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL HwModeRegister19_reg             : vector_of_signed22(0 TO 14);  -- sfix22 [15]
  SIGNAL dPC_Save_out1_1                  : signed(21 DOWNTO 0);  -- sfix22_En15
  SIGNAL Multiply17_out1                  : signed(77 DOWNTO 0);  -- sfix78_En58
  SIGNAL HwModeRegister20_reg             : vector_of_signed78(0 TO 1);  -- sfix78 [2]
  SIGNAL Multiply17_out1_1                : signed(77 DOWNTO 0);  -- sfix78_En58
  SIGNAL HwModeRegister21_reg             : vector_of_signed16(0 TO 20);  -- sfix16 [21]
  SIGNAL From53_out1                      : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Multiply18_out1                  : signed(93 DOWNTO 0);  -- sfix94_En72
  SIGNAL Multiply18_out1_1                : signed(93 DOWNTO 0);  -- sfix94_En72
  SIGNAL Phase_C_PWM_1_cast               : signed(96 DOWNTO 0);  -- sfix97_En72
  SIGNAL Phase_C_PWM_1_cast_1             : signed(96 DOWNTO 0);  -- sfix97_En72
  SIGNAL Phase_C_PWM_relop1               : std_logic;
  SIGNAL Delay4_reg                       : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL Logical_Operator51_out1          : std_logic;
  SIGNAL delayMatch63_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator51_out1_1        : std_logic;
  SIGNAL Logical_Operator52_out1          : std_logic;
  SIGNAL Delay5_reg                       : std_logic_vector(0 TO 99);  -- ufix1 [100]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL Logical_Operator38_out1          : std_logic;
  SIGNAL delayMatch64_reg                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL Logical_Operator38_out1_1        : std_logic;
  SIGNAL kconst_24                        : signed(15 DOWNTO 0);  -- sfix16_En9
  SIGNAL kconst_25                        : signed(15 DOWNTO 0);  -- sfix16_En9
  SIGNAL Constant10_out1                  : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Sum13_add_cast                   : signed(94 DOWNTO 0);  -- sfix95_En72
  SIGNAL Sum13_add_cast_1                 : signed(94 DOWNTO 0);  -- sfix95_En72
  SIGNAL Sum13_out1                       : signed(94 DOWNTO 0);  -- sfix95_En72
  SIGNAL Data_Type_Conversion1_out1       : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Data_Type_Conversion1_out1_1     : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Gain1_out1                       : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Gain1_out1_1                     : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Data_Type_Conversion3_out1       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_add_cast                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_add_cast_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_add_temp                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_add_cast_2                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_add_temp_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_add_cast_3                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Sum24_out1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Logical_Operator28_out1          : std_logic;
  SIGNAL Constant15_out1                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Relational_Operator3_relop1      : std_logic;
  SIGNAL Logical_Operator29_out1          : std_logic;
  SIGNAL Logical_Operator34_out1          : std_logic;
  SIGNAL Counter_Limited1_out1            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Constant14_out1                  : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Constant12_out1                  : signed(15 DOWNTO 0);  -- sfix16_En3
  SIGNAL Relational_Operator1_1_cast      : signed(19 DOWNTO 0);  -- sfix20_En3
  SIGNAL Relational_Operator1_1_cast_1    : signed(19 DOWNTO 0);  -- sfix20_En3
  SIGNAL Relational_Operator1_relop1      : std_logic;
  SIGNAL Logical_Operator27_out1          : std_logic;
  SIGNAL HDL_Counter12_out1               : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Relational_Operator2_1_cast      : signed(15 DOWNTO 0);  -- sfix16_En6
  SIGNAL Relational_Operator2_relop1      : std_logic;
  SIGNAL Logical_Operator26_out1          : std_logic;
  SIGNAL delayMatch43_reg                 : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL From49_out1                      : std_logic;
  SIGNAL Subsystem9_out1                  : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL kconst_26                        : signed(15 DOWNTO 0);  -- sfix16_En9
  SIGNAL kconst_27                        : signed(15 DOWNTO 0);  -- sfix16_En9
  SIGNAL Constant25_out1                  : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Sum18_add_cast                   : signed(94 DOWNTO 0);  -- sfix95_En72
  SIGNAL Sum18_add_cast_1                 : signed(94 DOWNTO 0);  -- sfix95_En72
  SIGNAL Sum18_out1                       : signed(94 DOWNTO 0);  -- sfix95_En72
  SIGNAL Data_Type_Conversion26_out1      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Data_Type_Conversion26_out1_1    : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Gain27_out1                      : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL delayMatch45_reg                 : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL SW15_1                           : std_logic;
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL Gain27_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Data_Type_Conversion27_out1      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL kconst_28                        : signed(32 DOWNTO 0);  -- sfix33_En33
  SIGNAL kconst_29                        : signed(32 DOWNTO 0);  -- sfix33_En33
  SIGNAL Gain_out1                        : signed(65 DOWNTO 0);  -- sfix66_En33
  SIGNAL Gain_out1_1                      : signed(65 DOWNTO 0);  -- sfix66_En33
  SIGNAL Data_Type_Conversion_out1        : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL delayMatch44_reg                 : vector_of_unsigned10(0 TO 21);  -- ufix10 [22]
  SIGNAL From45_out1                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Switch13_out1                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL delayMatch46_reg                 : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL From50_out1                      : std_logic;
  SIGNAL Subsystem10_out1                 : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL Constant22_out1                  : std_logic;
  SIGNAL Constant23_out1                  : std_logic;
  SIGNAL Constant24_out1                  : std_logic;
  SIGNAL H_out1                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch47_reg                 : vector_of_unsigned10(0 TO 1);  -- ufix10 [2]
  SIGNAL From39_out1                      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Constant82_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant82_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant78_out1                  : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Relational_Operator34_1_cast     : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL Relational_Operator34_1_cast_1   : signed(20 DOWNTO 0);  -- sfix21_En10
  SIGNAL Relational_Operator34_relop1     : std_logic;
  SIGNAL Relational_Operator34_out1       : std_logic;
  SIGNAL Multiply27_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Multiply27_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant83_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant83_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant79_out1                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Relational_Operator35_1_cast     : signed(24 DOWNTO 0);  -- sfix25_En14
  SIGNAL Relational_Operator35_1_cast_1   : signed(24 DOWNTO 0);  -- sfix25_En14
  SIGNAL Relational_Operator35_relop1     : std_logic;
  SIGNAL Relational_Operator35_out1       : std_logic;
  SIGNAL Multiply28_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Multiply28_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant84_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant84_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant80_out1                  : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator36_1_cast     : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator36_1_cast_1   : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator36_relop1     : std_logic;
  SIGNAL Relational_Operator36_out1       : std_logic;
  SIGNAL Multiply29_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Multiply29_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant85_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant85_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Constant81_out1                  : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL Relational_Operator37_1_cast     : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator37_1_cast_1   : signed(23 DOWNTO 0);  -- sfix24_En13
  SIGNAL Relational_Operator37_relop1     : std_logic;
  SIGNAL Relational_Operator37_out1       : std_logic;
  SIGNAL Multiply30_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Multiply30_out1_1                : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Multiport_Switch1_out1           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL delayMatch65_reg                 : vector_of_unsigned7(0 TO 21);  -- ufix7 [22]
  SIGNAL Multiport_Switch1_out1_1         : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL kconst_30                        : signed(15 DOWNTO 0);  -- sfix16_En9
  SIGNAL kconst_31                        : signed(15 DOWNTO 0);  -- sfix16_En9
  SIGNAL Constant27_out1                  : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Sum17_add_cast                   : signed(94 DOWNTO 0);  -- sfix95_En72
  SIGNAL Sum17_add_cast_1                 : signed(94 DOWNTO 0);  -- sfix95_En72
  SIGNAL Sum17_out1                       : signed(94 DOWNTO 0);  -- sfix95_En72
  SIGNAL Data_Type_Conversion25_out1      : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Data_Type_Conversion25_out1_1    : signed(15 DOWNTO 0);  -- sfix16_En10
  SIGNAL Gain26_out1                      : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Gain26_out1_1                    : signed(31 DOWNTO 0);  -- sfix32_En19
  SIGNAL Data_Type_Conversion28_out1      : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL reduced_reg                      : std_logic_vector(0 TO 23);  -- ufix1 [24]
  SIGNAL Logical_Operator27_out1_1        : std_logic;
  SIGNAL Subsystem8_out1                  : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL delayMatch49_reg                 : std_logic_vector(0 TO 21);  -- ufix1 [22]
  SIGNAL From18_out1                      : std_logic;
  SIGNAL Subsystem11_out1                 : std_logic;
  SIGNAL Subsystem11_out1_1               : std_logic;
  SIGNAL delayMatch50_reg                 : std_logic_vector(0 TO 21);  -- ufix1 [22]
  SIGNAL From51_out1                      : std_logic;
  SIGNAL Subsystem12_out1                 : std_logic;
  SIGNAL Subsystem12_out1_1               : std_logic;
  SIGNAL delayMatch51_reg                 : std_logic_vector(0 TO 21);  -- ufix1 [22]
  SIGNAL From57_out1                      : std_logic;
  SIGNAL Subsystem13_out1                 : std_logic;
  SIGNAL Subsystem13_out1_1               : std_logic;
  SIGNAL kconst_32                        : unsigned(23 DOWNTO 0);  -- ufix24_En41
  SIGNAL kconst_33                        : unsigned(23 DOWNTO 0);  -- ufix24_En41
  SIGNAL Subsystem3_out1                  : std_logic;
  SIGNAL Unit_Delay3_out1                 : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL HDL_Counter3_out1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL HDL_Counter3_out1_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Gain15_out1                      : unsigned(47 DOWNTO 0);  -- ufix48_En41
  SIGNAL Gain15_out1_1                    : unsigned(47 DOWNTO 0);  -- ufix48_En41
  SIGNAL Data_Type_Conversion15_out1      : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL Sin7_out1                        : std_logic_vector(15 DOWNTO 0);  -- ufix16

BEGIN
  -- 999945
  -- 
  -- All Phases are active simultaneously
  -- 
  -- Ahmad Alastal
  -- 
  -- Phase A
  -- 
  -- Original Signal
  -- 
  -----------------------------------------------------------------------------------------------------------------------------------
  -- 
  -- Phase A
  -- 
  -- Triangular
  -- 
  -- DAC Control
  -- 
  -- Phase B
  -- 
  -- Phase C
  -- 
  -----------------------------------------------------------------------------------------------------------------------------------
  -- 
  -----------------------------------------------------------------------------------------------------------------------------------
  -- 
  -----------------------------------------------------------------------------------------------------------------------------------
  -- 
  -----------------------------------------------------------------------------------------------------------------------------------
  -- 
  -- 3rd Harmonic
  -- 
  -- 9th Harmonic
  -- 
  -- 15th Harmonic
  -- 
  -- Original Signal
  -- 
  -- 3rd Harmonic
  -- 
  -- 9th Harmonic
  -- 
  -- 15th Harmonic
  -- 
  -- Original Signal
  -- 
  -- 3rd Harmonic
  -- 
  -- 9th Harmonic
  -- 
  -- 15th Harmonic
  -- 
  -- Harmonic Selection
  -- 
  -- To specify harmonic multiplier follow these steps:Disable Reload pin.Enter some number [shown in HEX].Activate 
  -- Harmonic.Order is important, should follow these stepsfrom 1-3 without jump
  -- 
  -- The 50Hz harmonic is always activated, but not loaded
  -- with m value
  -- 
  -- Note:
  -- 
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- 
  -- Reload
  -- 
  -----------------------------------------------------------------
  -- 
  -- Harmonic Selection
  -- 
  -----------------------------------------------------------------
  -- 
  -- Note:
  -- 
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- 
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  -- 
  -- Phase B
  -- 
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- 
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  -- 
  -- Phase C
  -- 
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- 
  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  -- 
  -- Demonstration HEX
  -- 
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |
  -- |

  u_DAC_Control : DAC_Control
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              CLK_1 => DAC_Control_out1,
              Sync_n => DAC_Control_out2,
              Blank_n => DAC_Control_out3
              );

  u_HEX0 : HEX0
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Push_0 => Push_0,
              HEX0_1 => HEX0_out1,  -- ufix7
              Out2 => HEX0_out2  -- sfix20_En15
              );

  u_HEX1 : HEX1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Push_1 => Push_1,
              HEX1_1 => HEX1_out1,  -- ufix7
              Out2 => HEX1_out2  -- sfix20_En15
              );

  u_HEX2 : HEX2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Push_2 => Push_2,
              HEX2_1 => HEX2_out1,  -- ufix7
              out2 => HEX2_out2  -- sfix20_En15
              );

  u_HEX3 : HEX3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Push_3 => Push_3,
              HEX3_1 => HEX3_out1,  -- ufix7
              Out2 => HEX3_out2  -- sfix20_En15
              );

  u_Sin12 : Sin12
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion29_out1),  -- sfix16_En12
              sin => Sin12_out1  -- sfix16_En14
              );

  u_aPA_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator21_out1_1,
              MulResult => aPA_Save_out1  -- sfix22_En15
              );

  u_Sin13 : Sin13
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion30_out1),  -- sfix16_En12
              sin => Sin13_out1  -- sfix16_En14
              );

  u_bPA_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator13_out1_1,
              MulResult => bPA_Save_out1  -- sfix22_En15
              );

  u_Sin14 : Sin14
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion33_out1),  -- sfix16_En12
              sin => Sin14_out1  -- sfix16_En14
              );

  u_cPA_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator14_out1_1,
              MulResult => cPA_Save_out1  -- sfix22_En15
              );

  u_Sin15 : Sin15
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion36_out1),  -- sfix16_En12
              sin => Sin15_out1  -- sfix16_En14
              );

  u_dPA_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator17_out1_1,
              MulResult => dPA_Save_out1  -- sfix22_En15
              );

  u_Subsystem : Subsystem_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Relational_Operator4_relop1,
              Enable => Logical_Operator_out1,
              Out1 => Subsystem_out1
              );

  u_Sin4 : Sin4
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion9_out1),  -- sfix16_En12
              sin => Sin4_out1  -- sfix16_En14
              );

  u_aPB_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator23_out1_1,
              MulResult => aPB_Save_out1  -- sfix22_En15
              );

  u_Subsystem1 : Subsystem1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Relational_Operator4_relop1,
              Enable => Logical_Operator1_out1,
              Out1 => Subsystem1_out1
              );

  u_Sin5 : Sin5
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion11_out1),  -- sfix16_En12
              sin => Sin5_out1  -- sfix16_En14
              );

  u_bPB_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator19_out1_1,
              MulResult => bPB_Save_out1  -- sfix22_En15
              );

  u_Subsystem2 : Subsystem2_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Relational_Operator4_relop1,
              Enable => Logical_Operator2_out1,
              Out1 => Subsystem2_out1
              );

  u_Sin6 : Sin6
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion13_out1),  -- sfix16_En12
              sin => Sin6_out1  -- sfix16_En14
              );

  u_cPB_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator20_out1_1,
              MulResult => cPB_Save_out1  -- sfix22_En15
              );

  u_Subsystem7 : Subsystem7_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Relational_Operator8_relop1,
              Enable => Logical_Operator7_out1,
              Out1 => Subsystem7_out1
              );

  u_Sin11 : Sin11
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion22_out1),  -- sfix16_En12
              sin => Sin11_out1  -- sfix16_En14
              );

  u_dPB_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator22_out1_1,
              MulResult => dPB_Save_out1  -- sfix22_En15
              );

  u_Subsystem4 : Subsystem4_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Relational_Operator8_relop1,
              Enable => Logical_Operator4_out1,
              Out1 => Subsystem4_out1
              );

  u_Sin8 : Sin8
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion24_out1),  -- sfix16_En12
              sin => Sin8_out1  -- sfix16_En14
              );

  u_aPC_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator49_out1_1,
              MulResult => aPC_Save_out1  -- sfix22_En15
              );

  u_Subsystem5 : Subsystem5_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Relational_Operator8_relop1,
              Enable => Logical_Operator5_out1,
              Out1 => Subsystem5_out1
              );

  u_Sin9 : Sin9
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion18_out1),  -- sfix16_En12
              sin => Sin9_out1  -- sfix16_En14
              );

  u_bPC_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator41_out1_1,
              MulResult => bPC_Save_out1  -- sfix22_En15
              );

  u_Subsystem6 : Subsystem6_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Relational_Operator8_relop1,
              Enable => Logical_Operator6_out1,
              Out1 => Subsystem6_out1
              );

  u_Sin10 : Sin10
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion20_out1),  -- sfix16_En12
              sin => Sin10_out1  -- sfix16_En14
              );

  u_cPC_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator42_out1_1,
              MulResult => cPC_Save_out1  -- sfix22_En15
              );

  u_dPC_Save : aPA_Save
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              MulNumber => std_logic_vector(Sum14_out1),  -- sfix22_En15
              Enable => Logical_Operator45_out1_1,
              MulResult => dPC_Save_out1  -- sfix22_En15
              );

  u_Subsystem9 : Subsystem9_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => std_logic_vector(Data_Type_Conversion3_out1),  -- ufix10
              Enable => From49_out1,
              Out1 => Subsystem9_out1  -- ufix10
              );

  u_Subsystem10 : Subsystem10_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => std_logic_vector(Switch13_out1),  -- ufix10
              Enable => From50_out1,
              Out1 => Subsystem10_out1  -- ufix10
              );

  u_Subsystem8 : Subsystem8_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => std_logic_vector(Data_Type_Conversion28_out1),  -- ufix10
              Enable => Logical_Operator27_out1_1,
              Out1 => Subsystem8_out1  -- ufix10
              );

  u_Subsystem11 : Subsystem11_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Logical_Operator8_out1,
              Enable => From18_out1,
              Out1 => Subsystem11_out1
              );

  u_Subsystem12 : Subsystem12_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Logical_Operator24_out1,
              Enable => From51_out1,
              Out1 => Subsystem12_out1
              );

  u_Subsystem13 : Subsystem13_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Logical_Operator51_out1,
              Enable => From57_out1,
              Out1 => Subsystem13_out1
              );

  u_Subsystem3 : Subsystem3_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              In1 => Relational_Operator4_relop1,
              Enable => Logical_Operator3_out1,
              Out1 => Subsystem3_out1
              );

  u_Sin7 : Sin7
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              angle => std_logic_vector(Data_Type_Conversion15_out1),  -- sfix16_En12
              sin => Sin7_out1  -- sfix16_En14
              );

  enb <= clk_enable;

  delayMatch52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch52_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch52_reg(0) <= DAC_Control_out1;
        delayMatch52_reg(1 TO 23) <= delayMatch52_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS delayMatch52_process;

  DAC_Control_out1_1 <= delayMatch52_reg(23);

  delayMatch53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch53_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch53_reg(0) <= DAC_Control_out2;
        delayMatch53_reg(1 TO 23) <= delayMatch53_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS delayMatch53_process;

  DAC_Control_out2_1 <= delayMatch53_reg(23);

  delayMatch54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch54_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch54_reg(0) <= DAC_Control_out3;
        delayMatch54_reg(1 TO 23) <= delayMatch54_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS delayMatch54_process;

  DAC_Control_out3_1 <= delayMatch54_reg(23);

  HEX0_out1_unsigned <= unsigned(HEX0_out1);

  delayMatch55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch55_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch55_reg(0) <= HEX0_out1_unsigned;
        delayMatch55_reg(1 TO 23) <= delayMatch55_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS delayMatch55_process;

  HEX0_out1_1 <= delayMatch55_reg(23);

  HEX0_O <= std_logic_vector(HEX0_out1_1);

  HEX1_out1_unsigned <= unsigned(HEX1_out1);

  delayMatch56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch56_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch56_reg(0) <= HEX1_out1_unsigned;
        delayMatch56_reg(1 TO 23) <= delayMatch56_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS delayMatch56_process;

  HEX1_out1_1 <= delayMatch56_reg(23);

  HEX1_O <= std_logic_vector(HEX1_out1_1);

  HEX2_out1_unsigned <= unsigned(HEX2_out1);

  delayMatch57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch57_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch57_reg(0) <= HEX2_out1_unsigned;
        delayMatch57_reg(1 TO 23) <= delayMatch57_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS delayMatch57_process;

  HEX2_out1_1 <= delayMatch57_reg(23);

  HEX2_O <= std_logic_vector(HEX2_out1_1);

  HEX3_out1_unsigned <= unsigned(HEX3_out1);

  delayMatch58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch58_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch58_reg(0) <= HEX3_out1_unsigned;
        delayMatch58_reg(1 TO 23) <= delayMatch58_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS delayMatch58_process;

  HEX3_out1_1 <= delayMatch58_reg(23);

  HEX3_O <= std_logic_vector(HEX3_out1_1);

  kconst <= signed'("011010001101101110001011101011001");

  HwModeRegister74_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_1 <= kconst;
      END IF;
    END IF;
  END PROCESS HwModeRegister74_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 4999
  Counter_Limited_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_Limited_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Counter_Limited_out1 >= to_unsigned(16#1387#, 16) THEN 
          Counter_Limited_out1 <= to_unsigned(16#0000#, 16);
        ELSE 
          Counter_Limited_out1 <= Counter_Limited_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS Counter_Limited_process;


  Constant4_out1 <= to_unsigned(2499, 32);

  
  Relational_Operator_relop1 <= '1' WHEN resize(Counter_Limited_out1, 32) < Constant4_out1 ELSE
      '0';

  
  switch_compare_1 <= '1' WHEN Relational_Operator_relop1 > '0' ELSE
      '0';

  Constant_out1 <= to_unsigned(4999, 32);

  Sum_sub_cast <= signed(resize(Constant_out1, 33));
  Sum_sub_cast_1 <= signed(resize(Counter_Limited_out1, 33));
  Sum_out1 <= Sum_sub_cast - Sum_sub_cast_1;

  Counter_Limited_out1_dtc <= signed(resize(Counter_Limited_out1, 33));

  
  Switch_out1 <= Sum_out1 WHEN switch_compare_1 = '0' ELSE
      Counter_Limited_out1_dtc;

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Switch_out1_1 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Switch_out1_1 <= Switch_out1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Gain25_out1 <= kconst_1 * Switch_out1_1;

  PipelineRegister37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain25_out1_1 <= to_signed(0, 66);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain25_out1_1 <= Gain25_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister37_process;


  Constant26_out1 <= to_signed(16#4000#, 16);

  Sum16_sub_cast <= resize(Gain25_out1_1, 67);
  Sum16_sub_cast_1 <= resize(Constant26_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 67);
  Sum16_out1 <= Sum16_sub_cast - Sum16_sub_cast_1;

  delayMatch14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch14_reg <= (OTHERS => to_signed(0, 67));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch14_reg(0) <= Sum16_out1;
        delayMatch14_reg(1 TO 19) <= delayMatch14_reg(0 TO 18);
      END IF;
    END IF;
  END PROCESS delayMatch14_process;

  From17_out1 <= delayMatch14_reg(19);

  kconst_2 <= to_unsigned(16#C5A82F#, 24);

  HwModeRegister80_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_3 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_3 <= kconst_2;
      END IF;
    END IF;
  END PROCESS HwModeRegister80_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 66663
  HDL_Counter8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter8_out1 <= to_unsigned(16#000001#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF HDL_Counter8_out1 >= to_unsigned(16#010467#, 24) THEN 
          HDL_Counter8_out1 <= to_unsigned(16#000001#, 24);
        ELSE 
          HDL_Counter8_out1 <= HDL_Counter8_out1 + to_unsigned(16#000001#, 24);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter8_process;


  HwModeRegister81_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter8_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter8_out1_1 <= HDL_Counter8_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister81_process;


  Gain31_out1 <= kconst_3 * HDL_Counter8_out1_1;

  PipelineRegister40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain31_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain31_out1_1 <= Gain31_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister40_process;


  Data_Type_Conversion29_out1 <= signed(Gain31_out1_1(40 DOWNTO 25));

  Sin12_out1_signed <= signed(Sin12_out1);

  HwModeRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      From8_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        From8_out1 <= Sin12_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister_process;


  HEX3_out2_signed <= signed(HEX3_out2);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_signed(16#00000#, 20));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= HEX3_out2_signed;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  HEX3_out2_1 <= delayMatch_reg(1);

  HEX2_out2_signed <= signed(HEX2_out2);

  HEX1_out2_signed <= signed(HEX1_out2);

  HEX0_out2_signed <= signed(HEX0_out2);

  Sum14_add_cast <= resize(HEX3_out2_1, 22);
  Sum14_add_cast_1 <= resize(HEX2_out2_signed, 22);
  Sum14_add_temp <= Sum14_add_cast + Sum14_add_cast_1;
  Sum14_add_cast_2 <= resize(HEX1_out2_signed, 22);
  Sum14_add_temp_1 <= Sum14_add_temp + Sum14_add_cast_2;
  Sum14_add_cast_3 <= resize(HEX0_out2_signed, 22);
  Sum14_out1 <= Sum14_add_temp_1 + Sum14_add_cast_3;

  Sum15_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & SW0;
  Sum15_add_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & SW1;
  Sum15_add_temp <= Sum15_add_cast + Sum15_add_cast_1;
  Sum15_add_cast_2 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & SW2;
  Sum15_out1 <= Sum15_add_temp + Sum15_add_cast_2;

  Constant37_out1 <= to_signed(16#6000#, 16);

  Relational_Operator15_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  Relational_Operator15_1_cast_1 <= resize(Constant37_out1, 24);
  
  Relational_Operator15_relop1 <= '1' WHEN Relational_Operator15_1_cast = Relational_Operator15_1_cast_1 ELSE
      '0';

  Constant39_out1 <= to_signed(16#6000#, 16);

  Relational_Operator17_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  Relational_Operator17_1_cast_1 <= resize(Constant39_out1, 24);
  
  Relational_Operator17_relop1 <= '1' WHEN Relational_Operator17_1_cast = Relational_Operator17_1_cast_1 ELSE
      '0';

  Logical_Operator16_out1 <= Relational_Operator17_relop1 AND Reload;

  Logical_Operator21_out1 <= Relational_Operator15_relop1 AND Logical_Operator16_out1;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= Logical_Operator21_out1;
        delayMatch1_reg(1 TO 3) <= delayMatch1_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Logical_Operator21_out1_1 <= delayMatch1_reg(3);

  aPA_Save_out1_signed <= signed(aPA_Save_out1);

  HwModeRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister1_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister1_reg(0) <= aPA_Save_out1_signed;
        HwModeRegister1_reg(1 TO 10) <= HwModeRegister1_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister1_process;

  aPA_Save_out1_1 <= HwModeRegister1_reg(10);

  Multiply_out1 <= From8_out1 * aPA_Save_out1_1;

  HwModeRegister46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister46_reg <= (OTHERS => to_signed(0, 38));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister46_reg(0) <= Multiply_out1;
        HwModeRegister46_reg(1) <= HwModeRegister46_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister46_process;

  Multiply_out1_1 <= HwModeRegister46_reg(1);

  
  switch_compare_1_1 <= '1' WHEN SW10 > '0' ELSE
      '0';

  Constant30_out1 <= to_signed(16#4000#, 16);

  Constant31_out1 <= to_signed(-16#8000#, 16);

  Constant31_out1_dtc <= resize(Constant31_out1(15 DOWNTO 1), 16);

  
  Switch4_out1 <= Constant30_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant31_out1_dtc;

  HwModeRegister47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister47_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister47_reg(0) <= Switch4_out1;
        HwModeRegister47_reg(1 TO 16) <= HwModeRegister47_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS HwModeRegister47_process;

  From56_out1 <= HwModeRegister47_reg(16);

  Multiply5_out1 <= Multiply_out1_1 * From56_out1;

  PipelineRegister23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply5_out1_1 <= to_signed(0, 54);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply5_out1_1 <= Multiply5_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister23_process;


  kconst_4 <= to_unsigned(16#ED3038#, 24);

  HwModeRegister82_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_5 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_5 <= kconst_4;
      END IF;
    END IF;
  END PROCESS HwModeRegister82_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 111105
  HDL_Counter9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter9_out1 <= to_unsigned(16#000001#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF HDL_Counter9_out1 >= to_unsigned(16#01B201#, 24) THEN 
          HDL_Counter9_out1 <= to_unsigned(16#000001#, 24);
        ELSE 
          HDL_Counter9_out1 <= HDL_Counter9_out1 + to_unsigned(16#000001#, 24);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter9_process;


  HwModeRegister83_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter9_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter9_out1_1 <= HDL_Counter9_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister83_process;


  Gain32_out1 <= kconst_5 * HDL_Counter9_out1_1;

  PipelineRegister41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain32_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain32_out1_1 <= Gain32_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister41_process;


  Data_Type_Conversion30_out1 <= signed(Gain32_out1_1(41 DOWNTO 26));

  Sin13_out1_signed <= signed(Sin13_out1);

  HwModeRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      From9_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        From9_out1 <= Sin13_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister2_process;


  Constant36_out1 <= to_signed(16#4000#, 16);

  Relational_Operator14_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  Relational_Operator14_1_cast_1 <= resize(Constant36_out1, 24);
  
  Relational_Operator14_relop1 <= '1' WHEN Relational_Operator14_1_cast = Relational_Operator14_1_cast_1 ELSE
      '0';

  Constant38_out1 <= to_signed(16#4000#, 16);

  Relational_Operator16_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  Relational_Operator16_1_cast_1 <= resize(Constant38_out1, 24);
  
  Relational_Operator16_relop1 <= '1' WHEN Relational_Operator16_1_cast = Relational_Operator16_1_cast_1 ELSE
      '0';

  Logical_Operator15_out1 <= Relational_Operator16_relop1 AND Reload;

  Logical_Operator13_out1 <= Relational_Operator14_relop1 AND Logical_Operator15_out1;

  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch4_reg(0) <= Logical_Operator13_out1;
        delayMatch4_reg(1 TO 3) <= delayMatch4_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  Logical_Operator13_out1_1 <= delayMatch4_reg(3);

  bPA_Save_out1_signed <= signed(bPA_Save_out1);

  HwModeRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister3_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister3_reg(0) <= bPA_Save_out1_signed;
        HwModeRegister3_reg(1 TO 10) <= HwModeRegister3_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister3_process;

  bPA_Save_out1_1 <= HwModeRegister3_reg(10);

  Multiply1_out1 <= From9_out1 * bPA_Save_out1_1;

  HwModeRegister48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister48_reg <= (OTHERS => to_signed(0, 38));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister48_reg(0) <= Multiply1_out1;
        HwModeRegister48_reg(1) <= HwModeRegister48_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister48_process;

  Multiply1_out1_1 <= HwModeRegister48_reg(1);

  
  switch_compare_1_2 <= '1' WHEN SW9 > '0' ELSE
      '0';

  Constant31_out1_dtc_1 <= resize(Constant31_out1(15 DOWNTO 1), 16);

  
  Switch3_out1 <= Constant30_out1 WHEN switch_compare_1_2 = '0' ELSE
      Constant31_out1_dtc_1;

  HwModeRegister49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister49_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister49_reg(0) <= Switch3_out1;
        HwModeRegister49_reg(1 TO 16) <= HwModeRegister49_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS HwModeRegister49_process;

  From55_out1 <= HwModeRegister49_reg(16);

  Multiply6_out1 <= Multiply1_out1_1 * From55_out1;

  PipelineRegister24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply6_out1_1 <= to_signed(0, 54);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply6_out1_1 <= Multiply6_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister24_process;


  kconst_6 <= to_unsigned(16#9E2025#, 24);

  HwModeRegister84_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_7 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_7 <= kconst_6;
      END IF;
    END IF;
  END PROCESS HwModeRegister84_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 333315
  HDL_Counter10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter10_out1 <= to_unsigned(16#000001#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF HDL_Counter10_out1 >= to_unsigned(16#051603#, 24) THEN 
          HDL_Counter10_out1 <= to_unsigned(16#000001#, 24);
        ELSE 
          HDL_Counter10_out1 <= HDL_Counter10_out1 + to_unsigned(16#000001#, 24);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter10_process;


  HwModeRegister85_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter10_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter10_out1_1 <= HDL_Counter10_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister85_process;


  Gain33_out1 <= kconst_7 * HDL_Counter10_out1_1;

  PipelineRegister42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain33_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain33_out1_1 <= Gain33_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister42_process;


  Data_Type_Conversion33_out1 <= signed(Gain33_out1_1(42 DOWNTO 27));

  Sin14_out1_signed <= signed(Sin14_out1);

  HwModeRegister24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      From10_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        From10_out1 <= Sin14_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister24_process;


  Constant35_out1 <= to_signed(16#4000#, 16);

  Relational_Operator13_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25));
  Relational_Operator13_1_cast_1 <= resize(Constant35_out1, 25);
  
  Relational_Operator13_relop1 <= '1' WHEN Relational_Operator13_1_cast = Relational_Operator13_1_cast_1 ELSE
      '0';

  Constant33_out1 <= to_signed(16#4000#, 16);

  Relational_Operator12_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25));
  Relational_Operator12_1_cast_1 <= resize(Constant33_out1, 25);
  
  Relational_Operator12_relop1 <= '1' WHEN Relational_Operator12_1_cast = Relational_Operator12_1_cast_1 ELSE
      '0';

  Logical_Operator12_out1 <= Relational_Operator12_relop1 AND Reload;

  Logical_Operator14_out1 <= Relational_Operator13_relop1 AND Logical_Operator12_out1;

  delayMatch7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch7_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch7_reg(0) <= Logical_Operator14_out1;
        delayMatch7_reg(1 TO 3) <= delayMatch7_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch7_process;

  Logical_Operator14_out1_1 <= delayMatch7_reg(3);

  cPA_Save_out1_signed <= signed(cPA_Save_out1);

  HwModeRegister25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister25_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister25_reg(0) <= cPA_Save_out1_signed;
        HwModeRegister25_reg(1 TO 10) <= HwModeRegister25_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister25_process;

  cPA_Save_out1_1 <= HwModeRegister25_reg(10);

  Multiply2_out1 <= From10_out1 * cPA_Save_out1_1;

  HwModeRegister50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister50_reg <= (OTHERS => to_signed(0, 38));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister50_reg(0) <= Multiply2_out1;
        HwModeRegister50_reg(1) <= HwModeRegister50_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister50_process;

  Multiply2_out1_1 <= HwModeRegister50_reg(1);

  
  switch_compare_1_3 <= '1' WHEN SW8 > '0' ELSE
      '0';

  Constant31_out1_dtc_2 <= resize(Constant31_out1(15 DOWNTO 1), 16);

  
  Switch2_out1 <= Constant30_out1 WHEN switch_compare_1_3 = '0' ELSE
      Constant31_out1_dtc_2;

  HwModeRegister51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister51_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister51_reg(0) <= Switch2_out1;
        HwModeRegister51_reg(1 TO 16) <= HwModeRegister51_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS HwModeRegister51_process;

  From52_out1 <= HwModeRegister51_reg(16);

  Multiply7_out1 <= Multiply2_out1_1 * From52_out1;

  PipelineRegister25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply7_out1_1 <= to_signed(0, 54);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply7_out1_1 <= Multiply7_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister25_process;


  kconst_8 <= to_unsigned(16#D2D587#, 24);

  HwModeRegister86_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_9 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_9 <= kconst_8;
      END IF;
    END IF;
  END PROCESS HwModeRegister86_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 999945
  HDL_Counter11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter11_out1 <= to_unsigned(16#000001#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF HDL_Counter11_out1 >= to_unsigned(16#0F4209#, 24) THEN 
          HDL_Counter11_out1 <= to_unsigned(16#000001#, 24);
        ELSE 
          HDL_Counter11_out1 <= HDL_Counter11_out1 + to_unsigned(16#000001#, 24);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter11_process;


  HwModeRegister87_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter11_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter11_out1_1 <= HDL_Counter11_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister87_process;


  Gain34_out1 <= kconst_9 * HDL_Counter11_out1_1;

  PipelineRegister43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain34_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain34_out1_1 <= Gain34_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister43_process;


  Data_Type_Conversion36_out1 <= signed(Gain34_out1_1(44 DOWNTO 29));

  Sin15_out1_signed <= signed(Sin15_out1);

  delayMatch10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch10_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch10_reg(0) <= Sin15_out1_signed;
        delayMatch10_reg(1 TO 3) <= delayMatch10_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch10_process;

  From11_out1 <= delayMatch10_reg(3);

  Sum19_add_cast <= resize(Multiply5_out1_1, 56);
  Sum19_add_cast_1 <= resize(Multiply6_out1_1, 56);
  Sum19_add_temp <= Sum19_add_cast + Sum19_add_cast_1;
  Sum19_add_cast_2 <= resize(Multiply7_out1_1, 56);
  Sum19_add_temp_1 <= Sum19_add_temp + Sum19_add_cast_2;
  Sum19_add_cast_3 <= resize(From11_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 56);
  Sum19_out1 <= Sum19_add_temp_1 + Sum19_add_cast_3;

  HwModeRegister40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum19_out1_1 <= to_signed(0, 56);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum19_out1_1 <= Sum19_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister40_process;


  Constant34_out1 <= to_signed(16#0000#, 16);

  Relational_Operator20_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 21));
  Relational_Operator20_1_cast_1 <= resize(Constant34_out1, 21);
  
  Relational_Operator20_relop1 <= '1' WHEN Relational_Operator20_1_cast = Relational_Operator20_1_cast_1 ELSE
      '0';

  Constant28_out1 <= to_signed(16#0000#, 16);

  Relational_Operator18_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 21));
  Relational_Operator18_1_cast_1 <= resize(Constant28_out1, 21);
  
  Relational_Operator18_relop1 <= '1' WHEN Relational_Operator18_1_cast = Relational_Operator18_1_cast_1 ELSE
      '0';

  Logical_Operator11_out1 <= Relational_Operator18_relop1 AND Reload;

  Logical_Operator17_out1 <= Relational_Operator20_relop1 AND Logical_Operator11_out1;

  delayMatch11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch11_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch11_reg(0) <= Logical_Operator17_out1;
        delayMatch11_reg(1 TO 3) <= delayMatch11_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch11_process;

  Logical_Operator17_out1_1 <= delayMatch11_reg(3);

  dPA_Save_out1_signed <= signed(dPA_Save_out1);

  HwModeRegister41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister41_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister41_reg(0) <= dPA_Save_out1_signed;
        HwModeRegister41_reg(1 TO 14) <= HwModeRegister41_reg(0 TO 13);
      END IF;
    END IF;
  END PROCESS HwModeRegister41_process;

  dPA_Save_out1_1 <= HwModeRegister41_reg(14);

  Multiply3_out1 <= Sum19_out1_1 * dPA_Save_out1_1;

  HwModeRegister44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister44_reg <= (OTHERS => to_signed(0, 78));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister44_reg(0) <= Multiply3_out1;
        HwModeRegister44_reg(1) <= HwModeRegister44_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister44_process;

  Multiply3_out1_1 <= HwModeRegister44_reg(1);

  
  switch_compare_1_4 <= '1' WHEN SW7 > '0' ELSE
      '0';

  Constant31_out1_dtc_3 <= resize(Constant31_out1(15 DOWNTO 1), 16);

  
  Switch1_out1 <= Constant30_out1 WHEN switch_compare_1_4 = '0' ELSE
      Constant31_out1_dtc_3;

  HwModeRegister45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister45_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister45_reg(0) <= Switch1_out1;
        HwModeRegister45_reg(1 TO 20) <= HwModeRegister45_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS HwModeRegister45_process;

  From19_out1 <= HwModeRegister45_reg(20);

  Multiply4_out1 <= Multiply3_out1_1 * From19_out1;

  PipelineRegister22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply4_out1_1 <= to_signed(0, 94);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply4_out1_1 <= Multiply4_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister22_process;


  Phase_A_PWM_1_cast <= From17_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Phase_A_PWM_1_cast_1 <= resize(Multiply4_out1_1, 97);
  
  Phase_A_PWM_relop1 <= '1' WHEN Phase_A_PWM_1_cast >= Phase_A_PWM_1_cast_1 ELSE
      '0';

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_reg(0) <= Phase_A_PWM_relop1;
        Delay_reg(1 TO 99) <= Delay_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1 <= Delay_reg(99);

  Logical_Operator8_out1 <= Phase_A_PWM_relop1 AND Delay_out1;

  delayMatch59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch59_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch59_reg(0) <= Logical_Operator8_out1;
        delayMatch59_reg(1) <= delayMatch59_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch59_process;

  Logical_Operator8_out1_1 <= delayMatch59_reg(1);

  Logical_Operator9_out1 <=  NOT Phase_A_PWM_relop1;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg(0) <= Logical_Operator9_out1;
        Delay1_reg(1 TO 99) <= Delay1_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(99);

  Logical_Operator10_out1 <= Logical_Operator9_out1 AND Delay1_out1;

  delayMatch60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch60_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch60_reg(0) <= Logical_Operator10_out1;
        delayMatch60_reg(1) <= delayMatch60_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch60_process;

  Logical_Operator10_out1_1 <= delayMatch60_reg(1);

  delayMatch28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch28_reg <= (OTHERS => to_signed(0, 67));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch28_reg(0) <= Sum16_out1;
        delayMatch28_reg(1 TO 19) <= delayMatch28_reg(0 TO 18);
      END IF;
    END IF;
  END PROCESS delayMatch28_process;

  From22_out1 <= delayMatch28_reg(19);

  kconst_10 <= to_unsigned(16#C5A82F#, 24);

  HwModeRegister88_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_11 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_11 <= kconst_10;
      END IF;
    END IF;
  END PROCESS HwModeRegister88_process;


  Constant13_out1 <= to_unsigned(16#51603#, 20);

  
  Relational_Operator4_relop1 <= '1' WHEN HDL_Counter11_out1 >= resize(Constant13_out1, 24) ELSE
      '0';

  Unit_Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_out1 <= Subsystem_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;


  Logical_Operator_out1 <=  NOT Unit_Delay_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 66663
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#000001#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Subsystem_out1 = '1' THEN 
          IF HDL_Counter_out1 >= to_unsigned(16#010467#, 24) THEN 
            HDL_Counter_out1 <= to_unsigned(16#000001#, 24);
          ELSE 
            HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#000001#, 24);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  HwModeRegister89_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter_out1_1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister89_process;


  Gain9_out1 <= kconst_11 * HDL_Counter_out1_1;

  PipelineRegister44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain9_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain9_out1_1 <= Gain9_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister44_process;


  Data_Type_Conversion9_out1 <= signed(Gain9_out1_1(40 DOWNTO 25));

  Sin4_out1_signed <= signed(Sin4_out1);

  HwModeRegister12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      From_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        From_out1 <= Sin4_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister12_process;


  Logical_Operator23_out1 <= Relational_Operator15_relop1 AND Logical_Operator16_out1;

  delayMatch15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch15_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch15_reg(0) <= Logical_Operator23_out1;
        delayMatch15_reg(1 TO 3) <= delayMatch15_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch15_process;

  Logical_Operator23_out1_1 <= delayMatch15_reg(3);

  aPB_Save_out1_signed <= signed(aPB_Save_out1);

  HwModeRegister13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister13_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister13_reg(0) <= aPB_Save_out1_signed;
        HwModeRegister13_reg(1 TO 10) <= HwModeRegister13_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister13_process;

  aPB_Save_out1_1 <= HwModeRegister13_reg(10);

  Multiply14_out1 <= From_out1 * aPB_Save_out1_1;

  HwModeRegister6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister6_reg <= (OTHERS => to_signed(0, 38));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister6_reg(0) <= Multiply14_out1;
        HwModeRegister6_reg(1) <= HwModeRegister6_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister6_process;

  Multiply14_out1_1 <= HwModeRegister6_reg(1);

  HwModeRegister7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister7_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister7_reg(0) <= Switch4_out1;
        HwModeRegister7_reg(1 TO 16) <= HwModeRegister7_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS HwModeRegister7_process;

  From46_out1 <= HwModeRegister7_reg(16);

  Multiply11_out1 <= Multiply14_out1_1 * From46_out1;

  PipelineRegister3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply11_out1_1 <= to_signed(0, 54);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply11_out1_1 <= Multiply11_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister3_process;


  kconst_12 <= to_unsigned(16#ED3038#, 24);

  HwModeRegister60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_13 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_13 <= kconst_12;
      END IF;
    END IF;
  END PROCESS HwModeRegister60_process;


  Unit_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay1_out1 <= Subsystem1_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  Logical_Operator1_out1 <=  NOT Unit_Delay1_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 111105
  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(16#000001#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Subsystem1_out1 = '1' THEN 
          IF HDL_Counter1_out1 >= to_unsigned(16#01B201#, 24) THEN 
            HDL_Counter1_out1 <= to_unsigned(16#000001#, 24);
          ELSE 
            HDL_Counter1_out1 <= HDL_Counter1_out1 + to_unsigned(16#000001#, 24);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  HwModeRegister61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter1_out1_1 <= HDL_Counter1_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister61_process;


  Gain11_out1 <= kconst_13 * HDL_Counter1_out1_1;

  PipelineRegister30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain11_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain11_out1_1 <= Gain11_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister30_process;


  Data_Type_Conversion11_out1 <= signed(Gain11_out1_1(41 DOWNTO 26));

  Sin5_out1_signed <= signed(Sin5_out1);

  HwModeRegister14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      From6_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        From6_out1 <= Sin5_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister14_process;


  Logical_Operator19_out1 <= Relational_Operator14_relop1 AND Logical_Operator15_out1;

  delayMatch18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch18_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch18_reg(0) <= Logical_Operator19_out1;
        delayMatch18_reg(1 TO 3) <= delayMatch18_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch18_process;

  Logical_Operator19_out1_1 <= delayMatch18_reg(3);

  bPB_Save_out1_signed <= signed(bPB_Save_out1);

  HwModeRegister15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister15_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister15_reg(0) <= bPB_Save_out1_signed;
        HwModeRegister15_reg(1 TO 10) <= HwModeRegister15_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister15_process;

  bPB_Save_out1_1 <= HwModeRegister15_reg(10);

  Multiply15_out1 <= From6_out1 * bPB_Save_out1_1;

  HwModeRegister8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister8_reg <= (OTHERS => to_signed(0, 38));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister8_reg(0) <= Multiply15_out1;
        HwModeRegister8_reg(1) <= HwModeRegister8_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister8_process;

  Multiply15_out1_1 <= HwModeRegister8_reg(1);

  HwModeRegister9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister9_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister9_reg(0) <= Switch3_out1;
        HwModeRegister9_reg(1 TO 16) <= HwModeRegister9_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS HwModeRegister9_process;

  From44_out1 <= HwModeRegister9_reg(16);

  Multiply12_out1 <= Multiply15_out1_1 * From44_out1;

  PipelineRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply12_out1_1 <= to_signed(0, 54);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply12_out1_1 <= Multiply12_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister4_process;


  kconst_14 <= to_unsigned(16#9E2025#, 24);

  HwModeRegister62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_15 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_15 <= kconst_14;
      END IF;
    END IF;
  END PROCESS HwModeRegister62_process;


  Unit_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay2_out1 <= Subsystem2_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;


  Logical_Operator2_out1 <=  NOT Unit_Delay2_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 333315
  HDL_Counter2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter2_out1 <= to_unsigned(16#000001#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Subsystem2_out1 = '1' THEN 
          IF HDL_Counter2_out1 >= to_unsigned(16#051603#, 24) THEN 
            HDL_Counter2_out1 <= to_unsigned(16#000001#, 24);
          ELSE 
            HDL_Counter2_out1 <= HDL_Counter2_out1 + to_unsigned(16#000001#, 24);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter2_process;


  HwModeRegister63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter2_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter2_out1_1 <= HDL_Counter2_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister63_process;


  Gain13_out1 <= kconst_15 * HDL_Counter2_out1_1;

  PipelineRegister31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain13_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain13_out1_1 <= Gain13_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister31_process;


  Data_Type_Conversion13_out1 <= signed(Gain13_out1_1(42 DOWNTO 27));

  Sin6_out1_signed <= signed(Sin6_out1);

  HwModeRegister52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      From14_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        From14_out1 <= Sin6_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister52_process;


  Logical_Operator20_out1 <= Relational_Operator13_relop1 AND Logical_Operator12_out1;

  delayMatch21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch21_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch21_reg(0) <= Logical_Operator20_out1;
        delayMatch21_reg(1 TO 3) <= delayMatch21_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch21_process;

  Logical_Operator20_out1_1 <= delayMatch21_reg(3);

  cPB_Save_out1_signed <= signed(cPB_Save_out1);

  HwModeRegister53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister53_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister53_reg(0) <= cPB_Save_out1_signed;
        HwModeRegister53_reg(1 TO 10) <= HwModeRegister53_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister53_process;

  cPB_Save_out1_1 <= HwModeRegister53_reg(10);

  Multiply8_out1 <= From14_out1 * cPB_Save_out1_1;

  HwModeRegister10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister10_reg <= (OTHERS => to_signed(0, 38));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister10_reg(0) <= Multiply8_out1;
        HwModeRegister10_reg(1) <= HwModeRegister10_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister10_process;

  Multiply8_out1_1 <= HwModeRegister10_reg(1);

  HwModeRegister11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister11_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister11_reg(0) <= Switch2_out1;
        HwModeRegister11_reg(1 TO 16) <= HwModeRegister11_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS HwModeRegister11_process;

  From41_out1 <= HwModeRegister11_reg(16);

  Multiply13_out1 <= Multiply8_out1_1 * From41_out1;

  PipelineRegister5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply13_out1_1 <= to_signed(0, 54);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply13_out1_1 <= Multiply13_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister5_process;


  Constant11_out1 <= to_signed(16#2000#, 16);

  Sum21_stage2_sub_cast <= resize(Constant11_out1 & '0', 18);
  Sum21_stage2_sub_cast_1 <= resize(Sin15_out1_signed, 18);
  Sum21_op_stage2 <= Sum21_stage2_sub_cast - Sum21_stage2_sub_cast_1;

  kconst_16 <= to_unsigned(16#D2D587#, 24);

  HwModeRegister70_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_17 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_17 <= kconst_16;
      END IF;
    END IF;
  END PROCESS HwModeRegister70_process;


  Constant17_out1 <= to_unsigned(16#A2C06#, 20);

  
  Relational_Operator8_relop1 <= '1' WHEN HDL_Counter11_out1 >= resize(Constant17_out1, 24) ELSE
      '0';

  Unit_Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay7_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay7_out1 <= Subsystem7_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay7_process;


  Logical_Operator7_out1 <=  NOT Unit_Delay7_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 999945
  HDL_Counter7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter7_out1 <= to_unsigned(16#000001#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Subsystem7_out1 = '1' THEN 
          IF HDL_Counter7_out1 >= to_unsigned(16#0F4209#, 24) THEN 
            HDL_Counter7_out1 <= to_unsigned(16#000001#, 24);
          ELSE 
            HDL_Counter7_out1 <= HDL_Counter7_out1 + to_unsigned(16#000001#, 24);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter7_process;


  HwModeRegister71_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter7_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter7_out1_1 <= HDL_Counter7_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister71_process;


  Gain22_out1 <= kconst_17 * HDL_Counter7_out1_1;

  PipelineRegister35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain22_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain22_out1_1 <= Gain22_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister35_process;


  Data_Type_Conversion22_out1 <= signed(Gain22_out1_1(44 DOWNTO 29));

  Sin11_out1_signed <= signed(Sin11_out1);

  Sum21_stage3_sub_cast <= resize(Sin11_out1_signed, 18);
  Sum21_out1 <= Sum21_op_stage2 - Sum21_stage3_sub_cast;

  Sum23_sub_cast <= resize(Sum21_out1, 19);
  Sum23_sub_cast_1 <= resize(Constant11_out1 & '0', 19);
  Sum23_out1 <= Sum23_sub_cast - Sum23_sub_cast_1;

  delayMatch24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch24_reg <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch24_reg(0) <= Sum23_out1;
        delayMatch24_reg(1 TO 3) <= delayMatch24_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch24_process;

  Sum23_out1_1 <= delayMatch24_reg(3);

  Sum20_add_cast <= resize(Multiply11_out1_1, 56);
  Sum20_add_cast_1 <= resize(Multiply12_out1_1, 56);
  Sum20_add_temp <= Sum20_add_cast + Sum20_add_cast_1;
  Sum20_add_cast_2 <= resize(Multiply13_out1_1, 56);
  Sum20_add_temp_1 <= Sum20_add_temp + Sum20_add_cast_2;
  Sum20_add_cast_3 <= resize(Sum23_out1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 56);
  Sum20_out1 <= Sum20_add_temp_1 + Sum20_add_cast_3;

  HwModeRegister54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum20_out1_1 <= to_signed(0, 56);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum20_out1_1 <= Sum20_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister54_process;


  Logical_Operator22_out1 <= Relational_Operator20_relop1 AND Logical_Operator11_out1;

  delayMatch25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch25_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch25_reg(0) <= Logical_Operator22_out1;
        delayMatch25_reg(1 TO 3) <= delayMatch25_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch25_process;

  Logical_Operator22_out1_1 <= delayMatch25_reg(3);

  dPB_Save_out1_signed <= signed(dPB_Save_out1);

  HwModeRegister55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister55_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister55_reg(0) <= dPB_Save_out1_signed;
        HwModeRegister55_reg(1 TO 14) <= HwModeRegister55_reg(0 TO 13);
      END IF;
    END IF;
  END PROCESS HwModeRegister55_process;

  dPB_Save_out1_1 <= HwModeRegister55_reg(14);

  Multiply9_out1 <= Sum20_out1_1 * dPB_Save_out1_1;

  HwModeRegister4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister4_reg <= (OTHERS => to_signed(0, 78));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister4_reg(0) <= Multiply9_out1;
        HwModeRegister4_reg(1) <= HwModeRegister4_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister4_process;

  Multiply9_out1_1 <= HwModeRegister4_reg(1);

  HwModeRegister5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister5_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister5_reg(0) <= Switch1_out1;
        HwModeRegister5_reg(1 TO 20) <= HwModeRegister5_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS HwModeRegister5_process;

  From20_out1 <= HwModeRegister5_reg(20);

  Multiply10_out1 <= Multiply9_out1_1 * From20_out1;

  PipelineRegister2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply10_out1_1 <= to_signed(0, 94);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply10_out1_1 <= Multiply10_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister2_process;


  Phase_B_PWM_1_cast <= From22_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Phase_B_PWM_1_cast_1 <= resize(Multiply10_out1_1, 97);
  
  Phase_B_PWM_relop1 <= '1' WHEN Phase_B_PWM_1_cast >= Phase_B_PWM_1_cast_1 ELSE
      '0';

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg(0) <= Phase_B_PWM_relop1;
        Delay2_reg(1 TO 99) <= Delay2_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(99);

  Logical_Operator24_out1 <= Phase_B_PWM_relop1 AND Delay2_out1;

  delayMatch61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch61_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch61_reg(0) <= Logical_Operator24_out1;
        delayMatch61_reg(1) <= delayMatch61_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch61_process;

  Logical_Operator24_out1_1 <= delayMatch61_reg(1);

  Logical_Operator25_out1 <=  NOT Phase_B_PWM_relop1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_reg(0) <= Logical_Operator25_out1;
        Delay3_reg(1 TO 99) <= Delay3_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(99);

  Logical_Operator18_out1 <= Logical_Operator25_out1 AND Delay3_out1;

  delayMatch62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch62_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch62_reg(0) <= Logical_Operator18_out1;
        delayMatch62_reg(1) <= delayMatch62_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch62_process;

  Logical_Operator18_out1_1 <= delayMatch62_reg(1);

  delayMatch42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch42_reg <= (OTHERS => to_signed(0, 67));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch42_reg(0) <= Sum16_out1;
        delayMatch42_reg(1 TO 19) <= delayMatch42_reg(0 TO 18);
      END IF;
    END IF;
  END PROCESS delayMatch42_process;

  From59_out1 <= delayMatch42_reg(19);

  kconst_18 <= to_unsigned(16#C5A82F#, 24);

  HwModeRegister72_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_19 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_19 <= kconst_18;
      END IF;
    END IF;
  END PROCESS HwModeRegister72_process;


  Unit_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay4_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay4_out1 <= Subsystem4_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay4_process;


  Logical_Operator4_out1 <=  NOT Unit_Delay4_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 66663
  HDL_Counter4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter4_out1 <= to_unsigned(16#000001#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Subsystem4_out1 = '1' THEN 
          IF HDL_Counter4_out1 >= to_unsigned(16#010467#, 24) THEN 
            HDL_Counter4_out1 <= to_unsigned(16#000001#, 24);
          ELSE 
            HDL_Counter4_out1 <= HDL_Counter4_out1 + to_unsigned(16#000001#, 24);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter4_process;


  HwModeRegister73_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter4_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter4_out1_1 <= HDL_Counter4_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister73_process;


  Gain24_out1 <= kconst_19 * HDL_Counter4_out1_1;

  PipelineRegister36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain24_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain24_out1_1 <= Gain24_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister36_process;


  Data_Type_Conversion24_out1 <= signed(Gain24_out1_1(40 DOWNTO 25));

  Sin8_out1_signed <= signed(Sin8_out1);

  HwModeRegister30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      From28_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        From28_out1 <= Sin8_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister30_process;


  Logical_Operator49_out1 <= Relational_Operator15_relop1 AND Logical_Operator16_out1;

  delayMatch29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch29_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch29_reg(0) <= Logical_Operator49_out1;
        delayMatch29_reg(1 TO 3) <= delayMatch29_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch29_process;

  Logical_Operator49_out1_1 <= delayMatch29_reg(3);

  aPC_Save_out1_signed <= signed(aPC_Save_out1);

  HwModeRegister31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister31_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister31_reg(0) <= aPC_Save_out1_signed;
        HwModeRegister31_reg(1 TO 10) <= HwModeRegister31_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister31_process;

  aPC_Save_out1_1 <= HwModeRegister31_reg(10);

  Multiply22_out1 <= From28_out1 * aPC_Save_out1_1;

  HwModeRegister22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister22_reg <= (OTHERS => to_signed(0, 38));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister22_reg(0) <= Multiply22_out1;
        HwModeRegister22_reg(1) <= HwModeRegister22_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister22_process;

  Multiply22_out1_1 <= HwModeRegister22_reg(1);

  HwModeRegister23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister23_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister23_reg(0) <= Switch4_out1;
        HwModeRegister23_reg(1 TO 16) <= HwModeRegister23_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS HwModeRegister23_process;

  From80_out1 <= HwModeRegister23_reg(16);

  Multiply19_out1 <= Multiply22_out1_1 * From80_out1;

  PipelineRegister11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply19_out1_1 <= to_signed(0, 54);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply19_out1_1 <= Multiply19_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister11_process;


  kconst_20 <= to_unsigned(16#ED3038#, 24);

  HwModeRegister66_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_21 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_21 <= kconst_20;
      END IF;
    END IF;
  END PROCESS HwModeRegister66_process;


  Unit_Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay5_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay5_out1 <= Subsystem5_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay5_process;


  Logical_Operator5_out1 <=  NOT Unit_Delay5_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 111105
  HDL_Counter5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter5_out1 <= to_unsigned(16#000001#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Subsystem5_out1 = '1' THEN 
          IF HDL_Counter5_out1 >= to_unsigned(16#01B201#, 24) THEN 
            HDL_Counter5_out1 <= to_unsigned(16#000001#, 24);
          ELSE 
            HDL_Counter5_out1 <= HDL_Counter5_out1 + to_unsigned(16#000001#, 24);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter5_process;


  HwModeRegister67_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter5_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter5_out1_1 <= HDL_Counter5_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister67_process;


  Gain18_out1 <= kconst_21 * HDL_Counter5_out1_1;

  PipelineRegister33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain18_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain18_out1_1 <= Gain18_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister33_process;


  Data_Type_Conversion18_out1 <= signed(Gain18_out1_1(41 DOWNTO 26));

  Sin9_out1_signed <= signed(Sin9_out1);

  HwModeRegister32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      From30_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        From30_out1 <= Sin9_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister32_process;


  Logical_Operator41_out1 <= Relational_Operator14_relop1 AND Logical_Operator15_out1;

  delayMatch32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch32_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch32_reg(0) <= Logical_Operator41_out1;
        delayMatch32_reg(1 TO 3) <= delayMatch32_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch32_process;

  Logical_Operator41_out1_1 <= delayMatch32_reg(3);

  bPC_Save_out1_signed <= signed(bPC_Save_out1);

  HwModeRegister33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister33_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister33_reg(0) <= bPC_Save_out1_signed;
        HwModeRegister33_reg(1 TO 10) <= HwModeRegister33_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister33_process;

  bPC_Save_out1_1 <= HwModeRegister33_reg(10);

  Multiply23_out1 <= From30_out1 * bPC_Save_out1_1;

  HwModeRegister26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister26_reg <= (OTHERS => to_signed(0, 38));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister26_reg(0) <= Multiply23_out1;
        HwModeRegister26_reg(1) <= HwModeRegister26_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister26_process;

  Multiply23_out1_1 <= HwModeRegister26_reg(1);

  HwModeRegister27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister27_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister27_reg(0) <= Switch3_out1;
        HwModeRegister27_reg(1 TO 16) <= HwModeRegister27_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS HwModeRegister27_process;

  From65_out1 <= HwModeRegister27_reg(16);

  Multiply20_out1 <= Multiply23_out1_1 * From65_out1;

  PipelineRegister13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply20_out1_1 <= to_signed(0, 54);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply20_out1_1 <= Multiply20_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister13_process;


  kconst_22 <= to_unsigned(16#9E2025#, 24);

  HwModeRegister68_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_23 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_23 <= kconst_22;
      END IF;
    END IF;
  END PROCESS HwModeRegister68_process;


  Unit_Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay6_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay6_out1 <= Subsystem6_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay6_process;


  Logical_Operator6_out1 <=  NOT Unit_Delay6_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 333315
  HDL_Counter6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter6_out1 <= to_unsigned(16#000001#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Subsystem6_out1 = '1' THEN 
          IF HDL_Counter6_out1 >= to_unsigned(16#051603#, 24) THEN 
            HDL_Counter6_out1 <= to_unsigned(16#000001#, 24);
          ELSE 
            HDL_Counter6_out1 <= HDL_Counter6_out1 + to_unsigned(16#000001#, 24);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter6_process;


  HwModeRegister69_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter6_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter6_out1_1 <= HDL_Counter6_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister69_process;


  Gain20_out1 <= kconst_23 * HDL_Counter6_out1_1;

  PipelineRegister34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain20_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain20_out1_1 <= Gain20_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister34_process;


  Data_Type_Conversion20_out1 <= signed(Gain20_out1_1(42 DOWNTO 27));

  Sin10_out1_signed <= signed(Sin10_out1);

  HwModeRegister16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      From36_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        From36_out1 <= Sin10_out1_signed;
      END IF;
    END IF;
  END PROCESS HwModeRegister16_process;


  Logical_Operator42_out1 <= Relational_Operator13_relop1 AND Logical_Operator12_out1;

  delayMatch35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch35_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch35_reg(0) <= Logical_Operator42_out1;
        delayMatch35_reg(1 TO 3) <= delayMatch35_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch35_process;

  Logical_Operator42_out1_1 <= delayMatch35_reg(3);

  cPC_Save_out1_signed <= signed(cPC_Save_out1);

  HwModeRegister17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister17_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister17_reg(0) <= cPC_Save_out1_signed;
        HwModeRegister17_reg(1 TO 10) <= HwModeRegister17_reg(0 TO 9);
      END IF;
    END IF;
  END PROCESS HwModeRegister17_process;

  cPC_Save_out1_1 <= HwModeRegister17_reg(10);

  Multiply16_out1 <= From36_out1 * cPC_Save_out1_1;

  HwModeRegister28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister28_reg <= (OTHERS => to_signed(0, 38));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister28_reg(0) <= Multiply16_out1;
        HwModeRegister28_reg(1) <= HwModeRegister28_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister28_process;

  Multiply16_out1_1 <= HwModeRegister28_reg(1);

  HwModeRegister29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister29_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister29_reg(0) <= Switch2_out1;
        HwModeRegister29_reg(1 TO 16) <= HwModeRegister29_reg(0 TO 15);
      END IF;
    END IF;
  END PROCESS HwModeRegister29_process;

  From63_out1 <= HwModeRegister29_reg(16);

  Multiply21_out1 <= Multiply16_out1_1 * From63_out1;

  PipelineRegister14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply21_out1_1 <= to_signed(0, 54);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply21_out1_1 <= Multiply21_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister14_process;


  delayMatch38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch38_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch38_reg(0) <= Sin11_out1_signed;
        delayMatch38_reg(1 TO 3) <= delayMatch38_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch38_process;

  From42_out1 <= delayMatch38_reg(3);

  Sum22_add_cast <= resize(Multiply19_out1_1, 56);
  Sum22_add_cast_1 <= resize(Multiply20_out1_1, 56);
  Sum22_add_temp <= Sum22_add_cast + Sum22_add_cast_1;
  Sum22_add_cast_2 <= resize(Multiply21_out1_1, 56);
  Sum22_add_temp_1 <= Sum22_add_temp + Sum22_add_cast_2;
  Sum22_add_cast_3 <= resize(From42_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 56);
  Sum22_out1 <= Sum22_add_temp_1 + Sum22_add_cast_3;

  HwModeRegister18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum22_out1_1 <= to_signed(0, 56);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum22_out1_1 <= Sum22_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister18_process;


  Logical_Operator45_out1 <= Relational_Operator20_relop1 AND Logical_Operator11_out1;

  delayMatch39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch39_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch39_reg(0) <= Logical_Operator45_out1;
        delayMatch39_reg(1 TO 3) <= delayMatch39_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch39_process;

  Logical_Operator45_out1_1 <= delayMatch39_reg(3);

  dPC_Save_out1_signed <= signed(dPC_Save_out1);

  HwModeRegister19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister19_reg <= (OTHERS => to_signed(16#000000#, 22));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister19_reg(0) <= dPC_Save_out1_signed;
        HwModeRegister19_reg(1 TO 14) <= HwModeRegister19_reg(0 TO 13);
      END IF;
    END IF;
  END PROCESS HwModeRegister19_process;

  dPC_Save_out1_1 <= HwModeRegister19_reg(14);

  Multiply17_out1 <= Sum22_out1_1 * dPC_Save_out1_1;

  HwModeRegister20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister20_reg <= (OTHERS => to_signed(0, 78));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister20_reg(0) <= Multiply17_out1;
        HwModeRegister20_reg(1) <= HwModeRegister20_reg(0);
      END IF;
    END IF;
  END PROCESS HwModeRegister20_process;

  Multiply17_out1_1 <= HwModeRegister20_reg(1);

  HwModeRegister21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HwModeRegister21_reg <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HwModeRegister21_reg(0) <= Switch1_out1;
        HwModeRegister21_reg(1 TO 20) <= HwModeRegister21_reg(0 TO 19);
      END IF;
    END IF;
  END PROCESS HwModeRegister21_process;

  From53_out1 <= HwModeRegister21_reg(20);

  Multiply18_out1 <= Multiply17_out1_1 * From53_out1;

  PipelineRegister10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply18_out1_1 <= to_signed(0, 94);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply18_out1_1 <= Multiply18_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister10_process;


  Phase_C_PWM_1_cast <= From59_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  Phase_C_PWM_1_cast_1 <= resize(Multiply18_out1_1, 97);
  
  Phase_C_PWM_relop1 <= '1' WHEN Phase_C_PWM_1_cast >= Phase_C_PWM_1_cast_1 ELSE
      '0';

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg(0) <= Phase_C_PWM_relop1;
        Delay4_reg(1 TO 99) <= Delay4_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(99);

  Logical_Operator51_out1 <= Phase_C_PWM_relop1 AND Delay4_out1;

  delayMatch63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch63_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch63_reg(0) <= Logical_Operator51_out1;
        delayMatch63_reg(1) <= delayMatch63_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch63_process;

  Logical_Operator51_out1_1 <= delayMatch63_reg(1);

  Logical_Operator52_out1 <=  NOT Phase_C_PWM_relop1;

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg(0) <= Logical_Operator52_out1;
        Delay5_reg(1 TO 99) <= Delay5_reg(0 TO 98);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(99);

  Logical_Operator38_out1 <= Logical_Operator52_out1 AND Delay5_out1;

  delayMatch64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch64_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch64_reg(0) <= Logical_Operator38_out1;
        delayMatch64_reg(1) <= delayMatch64_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch64_process;

  Logical_Operator38_out1_1 <= delayMatch64_reg(1);

  kconst_24 <= to_signed(16#5540#, 16);

  HwModeRegister58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_25 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_25 <= kconst_24;
      END IF;
    END IF;
  END PROCESS HwModeRegister58_process;


  Constant10_out1 <= to_signed(16#6000#, 16);

  Sum13_add_cast <= resize(Multiply10_out1_1, 95);
  Sum13_add_cast_1 <= resize(Constant10_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 95);
  Sum13_out1 <= Sum13_add_cast + Sum13_add_cast_1;

  Data_Type_Conversion1_out1 <= Sum13_out1(77 DOWNTO 62);

  HwModeRegister59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion1_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Data_Type_Conversion1_out1_1 <= Data_Type_Conversion1_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister59_process;


  Gain1_out1 <= kconst_25 * Data_Type_Conversion1_out1_1;

  PipelineRegister29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain1_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain1_out1_1 <= Gain1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister29_process;


  Data_Type_Conversion3_out1 <= unsigned(Gain1_out1_1(28 DOWNTO 19));

  Sum24_add_cast <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Push_3;
  Sum24_add_cast_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Push_2;
  Sum24_add_temp <= Sum24_add_cast + Sum24_add_cast_1;
  Sum24_add_cast_2 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Push_1;
  Sum24_add_temp_1 <= Sum24_add_temp + Sum24_add_cast_2;
  Sum24_add_cast_3 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & Push_0;
  Sum24_out1 <= Sum24_add_temp_1 + Sum24_add_cast_3;

  Logical_Operator28_out1 <=  NOT reset_1;

  Constant15_out1 <= to_unsigned(16#4#, 3);

  
  Relational_Operator3_relop1 <= '1' WHEN Sum24_out1 = resize(Constant15_out1, 10) ELSE
      '0';

  Logical_Operator29_out1 <=  NOT Relational_Operator3_relop1;

  Logical_Operator34_out1 <= Logical_Operator28_out1 OR Logical_Operator29_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 4114
  Counter_Limited1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Counter_Limited1_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Counter_Limited1_out1 >= to_unsigned(16#1012#, 16) THEN 
          Counter_Limited1_out1 <= to_unsigned(16#0000#, 16);
        ELSE 
          Counter_Limited1_out1 <= Counter_Limited1_out1 + to_unsigned(16#0001#, 16);
        END IF;
      END IF;
    END IF;
  END PROCESS Counter_Limited1_process;


  Constant14_out1 <= to_signed(16#6540#, 16);

  Constant12_out1 <= to_signed(16#4D20#, 16);

  Relational_Operator1_1_cast <= signed(resize(Counter_Limited1_out1 & '0' & '0' & '0', 20));
  Relational_Operator1_1_cast_1 <= resize(Constant12_out1, 20);
  
  Relational_Operator1_relop1 <= '1' WHEN Relational_Operator1_1_cast = Relational_Operator1_1_cast_1 ELSE
      '0';

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 405
  HDL_Counter12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter12_out1 <= to_unsigned(16#001#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Logical_Operator34_out1 = '1' THEN 
          HDL_Counter12_out1 <= to_unsigned(16#001#, 9);
        ELSIF Logical_Operator27_out1 = '1' THEN 
          IF HDL_Counter12_out1 >= to_unsigned(16#195#, 9) THEN 
            HDL_Counter12_out1 <= to_unsigned(16#001#, 9);
          ELSE 
            HDL_Counter12_out1 <= HDL_Counter12_out1 + to_unsigned(16#001#, 9);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter12_process;


  Relational_Operator2_1_cast <= signed(resize(HDL_Counter12_out1 & '0' & '0' & '0' & '0' & '0' & '0', 16));
  
  Relational_Operator2_relop1 <= '1' WHEN Relational_Operator2_1_cast = Constant14_out1 ELSE
      '0';

  Logical_Operator26_out1 <=  NOT Relational_Operator2_relop1;

  Logical_Operator27_out1 <= Logical_Operator26_out1 AND Relational_Operator1_relop1;

  delayMatch43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch43_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch43_reg(0) <= Logical_Operator27_out1;
        delayMatch43_reg(1 TO 23) <= delayMatch43_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS delayMatch43_process;

  From49_out1 <= delayMatch43_reg(23);

  kconst_26 <= to_signed(16#5540#, 16);

  HwModeRegister78_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_27 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_27 <= kconst_26;
      END IF;
    END IF;
  END PROCESS HwModeRegister78_process;


  Constant25_out1 <= to_signed(16#6000#, 16);

  Sum18_add_cast <= resize(Multiply18_out1_1, 95);
  Sum18_add_cast_1 <= resize(Constant25_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 95);
  Sum18_out1 <= Sum18_add_cast + Sum18_add_cast_1;

  Data_Type_Conversion26_out1 <= Sum18_out1(77 DOWNTO 62);

  HwModeRegister79_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion26_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Data_Type_Conversion26_out1_1 <= Data_Type_Conversion26_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister79_process;


  Gain27_out1 <= kconst_27 * Data_Type_Conversion26_out1_1;

  delayMatch45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch45_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch45_reg(0) <= SW15;
        delayMatch45_reg(1 TO 23) <= delayMatch45_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS delayMatch45_process;

  SW15_1 <= delayMatch45_reg(23);

  
  switch_compare_1_5 <= '1' WHEN SW15_1 > '0' ELSE
      '0';

  PipelineRegister39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain27_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain27_out1_1 <= Gain27_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister39_process;


  Data_Type_Conversion27_out1 <= unsigned(Gain27_out1_1(28 DOWNTO 19));

  kconst_28 <= signed'("011010001100110000001111111110110");

  HwModeRegister56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_29 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_29 <= kconst_28;
      END IF;
    END IF;
  END PROCESS HwModeRegister56_process;


  Gain_out1 <= kconst_29 * Switch_out1_1;

  PipelineRegister28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain_out1_1 <= to_signed(0, 66);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain_out1_1 <= Gain_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister28_process;


  Data_Type_Conversion_out1 <= unsigned(Gain_out1_1(42 DOWNTO 33));

  delayMatch44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch44_reg <= (OTHERS => to_unsigned(16#000#, 10));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch44_reg(0) <= Data_Type_Conversion_out1;
        delayMatch44_reg(1 TO 21) <= delayMatch44_reg(0 TO 20);
      END IF;
    END IF;
  END PROCESS delayMatch44_process;

  From45_out1 <= delayMatch44_reg(21);

  
  Switch13_out1 <= Data_Type_Conversion27_out1 WHEN switch_compare_1_5 = '0' ELSE
      From45_out1;

  delayMatch46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch46_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch46_reg(0) <= Logical_Operator27_out1;
        delayMatch46_reg(1 TO 23) <= delayMatch46_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS delayMatch46_process;

  From50_out1 <= delayMatch46_reg(23);

  Constant22_out1 <= '1';

  Constant23_out1 <= '1';

  Constant24_out1 <= '1';

  H_out1 <= to_unsigned(16#09#, 7);

  HEX5 <= std_logic_vector(H_out1);

  delayMatch47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch47_reg <= (OTHERS => to_unsigned(16#000#, 10));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch47_reg(0) <= Sum15_out1;
        delayMatch47_reg(1) <= delayMatch47_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch47_process;

  From39_out1 <= delayMatch47_reg(1);

  Constant82_out1 <= to_unsigned(16#40#, 7);

  HwModeRegister34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant82_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Constant82_out1_1 <= Constant82_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister34_process;


  Constant78_out1 <= to_signed(16#0000#, 16);

  Relational_Operator34_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 21));
  Relational_Operator34_1_cast_1 <= resize(Constant78_out1, 21);
  
  Relational_Operator34_relop1 <= '1' WHEN Relational_Operator34_1_cast = Relational_Operator34_1_cast_1 ELSE
      '0';

  HwModeRegister35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator34_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator34_out1 <= Relational_Operator34_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister35_process;


  
  Multiply27_out1 <= Constant82_out1_1 WHEN Relational_Operator34_out1 = '1' ELSE
      to_unsigned(16#00#, 7);

  PipelineRegister17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply27_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply27_out1_1 <= Multiply27_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister17_process;


  Constant83_out1 <= to_unsigned(16#79#, 7);

  HwModeRegister36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant83_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Constant83_out1_1 <= Constant83_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister36_process;


  Constant79_out1 <= to_signed(16#4000#, 16);

  Relational_Operator35_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25));
  Relational_Operator35_1_cast_1 <= resize(Constant79_out1, 25);
  
  Relational_Operator35_relop1 <= '1' WHEN Relational_Operator35_1_cast = Relational_Operator35_1_cast_1 ELSE
      '0';

  HwModeRegister37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator35_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator35_out1 <= Relational_Operator35_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister37_process;


  
  Multiply28_out1 <= Constant83_out1_1 WHEN Relational_Operator35_out1 = '1' ELSE
      to_unsigned(16#00#, 7);

  PipelineRegister18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply28_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply28_out1_1 <= Multiply28_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister18_process;


  Constant84_out1 <= to_unsigned(16#24#, 7);

  HwModeRegister38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant84_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Constant84_out1_1 <= Constant84_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister38_process;


  Constant80_out1 <= to_signed(16#4000#, 16);

  Relational_Operator36_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  Relational_Operator36_1_cast_1 <= resize(Constant80_out1, 24);
  
  Relational_Operator36_relop1 <= '1' WHEN Relational_Operator36_1_cast = Relational_Operator36_1_cast_1 ELSE
      '0';

  HwModeRegister39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator36_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator36_out1 <= Relational_Operator36_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister39_process;


  
  Multiply29_out1 <= Constant84_out1_1 WHEN Relational_Operator36_out1 = '1' ELSE
      to_unsigned(16#00#, 7);

  PipelineRegister19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply29_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply29_out1_1 <= Multiply29_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister19_process;


  Constant85_out1 <= to_unsigned(16#30#, 7);

  HwModeRegister42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Constant85_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Constant85_out1_1 <= Constant85_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister42_process;


  Constant81_out1 <= to_signed(16#6000#, 16);

  Relational_Operator37_1_cast <= signed(resize(Sum15_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  Relational_Operator37_1_cast_1 <= resize(Constant81_out1, 24);
  
  Relational_Operator37_relop1 <= '1' WHEN Relational_Operator37_1_cast = Relational_Operator37_1_cast_1 ELSE
      '0';

  HwModeRegister43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Relational_Operator37_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Relational_Operator37_out1 <= Relational_Operator37_relop1;
      END IF;
    END IF;
  END PROCESS HwModeRegister43_process;


  
  Multiply30_out1 <= Constant85_out1_1 WHEN Relational_Operator37_out1 = '1' ELSE
      to_unsigned(16#00#, 7);

  PipelineRegister21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Multiply30_out1_1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Multiply30_out1_1 <= Multiply30_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister21_process;


  
  Multiport_Switch1_out1 <= Multiply27_out1_1 WHEN From39_out1 = to_unsigned(16#000#, 10) ELSE
      Multiply28_out1_1 WHEN From39_out1 = to_unsigned(16#001#, 10) ELSE
      Multiply29_out1_1 WHEN From39_out1 = to_unsigned(16#002#, 10) ELSE
      Multiply30_out1_1;

  delayMatch65_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch65_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch65_reg(0) <= Multiport_Switch1_out1;
        delayMatch65_reg(1 TO 21) <= delayMatch65_reg(0 TO 20);
      END IF;
    END IF;
  END PROCESS delayMatch65_process;

  Multiport_Switch1_out1_1 <= delayMatch65_reg(21);

  HEX4 <= std_logic_vector(Multiport_Switch1_out1_1);

  kconst_30 <= to_signed(16#5540#, 16);

  HwModeRegister76_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_31 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_31 <= kconst_30;
      END IF;
    END IF;
  END PROCESS HwModeRegister76_process;


  Constant27_out1 <= to_signed(16#6000#, 16);

  Sum17_add_cast <= resize(Multiply4_out1_1, 95);
  Sum17_add_cast_1 <= resize(Constant27_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 95);
  Sum17_out1 <= Sum17_add_cast + Sum17_add_cast_1;

  Data_Type_Conversion25_out1 <= Sum17_out1(77 DOWNTO 62);

  HwModeRegister77_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Data_Type_Conversion25_out1_1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Data_Type_Conversion25_out1_1 <= Data_Type_Conversion25_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister77_process;


  Gain26_out1 <= kconst_31 * Data_Type_Conversion25_out1_1;

  PipelineRegister38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain26_out1_1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain26_out1_1 <= Gain26_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister38_process;


  Data_Type_Conversion28_out1 <= unsigned(Gain26_out1_1(28 DOWNTO 19));

  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reduced_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reduced_reg(0) <= Logical_Operator27_out1;
        reduced_reg(1 TO 23) <= reduced_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS reduced_1_process;

  Logical_Operator27_out1_1 <= reduced_reg(23);

  delayMatch49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch49_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch49_reg(0) <= Logical_Operator27_out1;
        delayMatch49_reg(1 TO 21) <= delayMatch49_reg(0 TO 20);
      END IF;
    END IF;
  END PROCESS delayMatch49_process;

  From18_out1 <= delayMatch49_reg(21);

  delayMatch67_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subsystem11_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subsystem11_out1_1 <= Subsystem11_out1;
      END IF;
    END IF;
  END PROCESS delayMatch67_process;


  delayMatch50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch50_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch50_reg(0) <= Logical_Operator27_out1;
        delayMatch50_reg(1 TO 21) <= delayMatch50_reg(0 TO 20);
      END IF;
    END IF;
  END PROCESS delayMatch50_process;

  From51_out1 <= delayMatch50_reg(21);

  delayMatch68_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subsystem12_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subsystem12_out1_1 <= Subsystem12_out1;
      END IF;
    END IF;
  END PROCESS delayMatch68_process;


  delayMatch51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch51_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch51_reg(0) <= Logical_Operator27_out1;
        delayMatch51_reg(1 TO 21) <= delayMatch51_reg(0 TO 20);
      END IF;
    END IF;
  END PROCESS delayMatch51_process;

  From57_out1 <= delayMatch51_reg(21);

  delayMatch69_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Subsystem13_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Subsystem13_out1_1 <= Subsystem13_out1;
      END IF;
    END IF;
  END PROCESS delayMatch69_process;


  ce_out <= clk_enable;

  kconst_32 <= to_unsigned(16#D2D587#, 24);

  HwModeRegister64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      kconst_33 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        kconst_33 <= kconst_32;
      END IF;
    END IF;
  END PROCESS HwModeRegister64_process;


  Unit_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay3_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay3_out1 <= Subsystem3_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay3_process;


  Logical_Operator3_out1 <=  NOT Unit_Delay3_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 999945
  HDL_Counter3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter3_out1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Subsystem3_out1 = '1' THEN 
          IF HDL_Counter3_out1 >= to_unsigned(16#0F4209#, 24) THEN 
            HDL_Counter3_out1 <= to_unsigned(16#000000#, 24);
          ELSE 
            HDL_Counter3_out1 <= HDL_Counter3_out1 + to_unsigned(16#000001#, 24);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter3_process;


  HwModeRegister65_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter3_out1_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter3_out1_1 <= HDL_Counter3_out1;
      END IF;
    END IF;
  END PROCESS HwModeRegister65_process;


  Gain15_out1 <= kconst_33 * HDL_Counter3_out1_1;

  PipelineRegister32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Gain15_out1_1 <= to_unsigned(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Gain15_out1_1 <= Gain15_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister32_process;


  Data_Type_Conversion15_out1 <= signed(Gain15_out1_1(44 DOWNTO 29));

  CLK_1 <= DAC_Control_out1_1;

  Sync_n <= DAC_Control_out2_1;

  Blank_n <= DAC_Control_out3_1;

  Phase_A <= Logical_Operator8_out1_1;

  Phase_A_1 <= Logical_Operator10_out1_1;

  Phase_B <= Logical_Operator24_out1_1;

  Phase_B_1 <= Logical_Operator18_out1_1;

  Phase_C <= Logical_Operator51_out1_1;

  Phase_C_1 <= Logical_Operator38_out1_1;

  PhaseB_Analog <= Subsystem9_out1;

  PhaseC_Tri_Analog <= Subsystem10_out1;

  LEDG0 <= Constant22_out1;

  LEDG1 <= Constant23_out1;

  LEDG2 <= Constant24_out1;

  PhaseA_Analog <= Subsystem8_out1;

  Sample_Pulse <= Logical_Operator27_out1_1;

  PhaseA_PWM <= Subsystem11_out1_1;

  PhaseB_PWM <= Subsystem12_out1_1;

  PhaseC_PWM <= Subsystem13_out1_1;

END rtl;

