-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ThreeSines_DrSaher\Sin13.vhd
-- Created: 2020-02-04 20:32:36
-- 
-- Generated by MATLAB 9.4 and HDL Coder 3.12
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Sin13
-- Source Path: ThreeSines_DrSaher/Sines /Sin13
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Sin13 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        angle                             :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        sin                               :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
        );
END Sin13;


ARCHITECTURE rtl OF Sin13 IS

  -- Signals
  SIGNAL x0                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y0                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL angle_signed                     : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL quad_correction_before_th        : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL quad_correction_before_sub_temp  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL quad_correction_before_add_temp  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL negate                           : std_logic;  -- ufix1
  SIGNAL z0                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z0_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x1                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y1                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z1                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x1_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y1_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z1_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter2_c                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter2_c_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x2                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y2                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z2                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x2_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y2_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z2_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter3_c                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter3_c_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x3                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y3                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z3                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x3_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y3_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z3_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter4_c                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter4_c_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x4                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y4                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z4                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x4_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y4_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z4_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter5_c                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter5_c_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x5                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y5                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z5                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x5_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y5_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z5_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter6_c                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter6_c_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x6                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y6                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z6                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x6_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y6_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z6_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter7_c                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter7_c_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x7                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y7                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z7                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x7_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y7_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z7_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter8_c                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter8_c_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x8                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y8                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z8                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x8_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y8_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z8_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter9_c                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter9_c_1                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x9                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y9                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z9                               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x9_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y9_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z9_p                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter10_c                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter10_c_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x10                              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y10                              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z10                              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x10_p                            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y10_p                            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z10_p                            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter11_c                  : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL kernel_iter11_c_1                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x11                              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y11                              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z11                              : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL x11_p                            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL y11_p                            : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL negate_reg_reg                   : std_logic_vector(0 TO 11);  -- ufix1 [12]
  SIGNAL negate_p                         : std_logic;  -- ufix1
  SIGNAL quad_correction_after_cast       : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL quad_correction_after_cast_1     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL quad_correction_after_cast_2     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL quad_correction_after_cast_3     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL xout                             : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL yout                             : signed(15 DOWNTO 0);  -- sfix16_En14

BEGIN
  -- CORDIC implementation for Sin

  x0 <= to_signed(16#26DD#, 16);

  y0 <= to_signed(16#0000#, 16);

  angle_signed <= signed(angle);

  -- CORDIC Quad Correction Before
  quad_correction_before_sub_temp <= angle_signed - to_signed(16#3244#, 16);
  quad_correction_before_add_temp <= angle_signed + to_signed(16#3244#, 16);
  
  quad_correction_before_th <= angle_signed - to_signed(16#3244#, 16) WHEN (angle_signed > to_signed(16#1922#, 16)) AND (quad_correction_before_sub_temp <= to_signed(16#1922#, 16)) ELSE
      angle_signed - to_signed(16#6488#, 16) WHEN angle_signed > to_signed(16#1922#, 16) ELSE
      angle_signed + to_signed(16#3244#, 16) WHEN (angle_signed < to_signed(-16#1922#, 16)) AND (quad_correction_before_add_temp >= to_signed(-16#1922#, 16)) ELSE
      angle_signed + to_signed(16#6488#, 16) WHEN angle_signed < to_signed(-16#1922#, 16) ELSE
      angle_signed;
  
  negate <= '1' WHEN (angle_signed > to_signed(16#1922#, 16)) AND (quad_correction_before_sub_temp <= to_signed(16#1922#, 16)) ELSE
      '0' WHEN angle_signed > to_signed(16#1922#, 16) ELSE
      '1' WHEN (angle_signed < to_signed(-16#1922#, 16)) AND (quad_correction_before_add_temp >= to_signed(-16#1922#, 16)) ELSE
      '0' WHEN angle_signed < to_signed(-16#1922#, 16) ELSE
      '0';
  z0 <= quad_correction_before_th(13 DOWNTO 0) & '0' & '0';

  -- Pipeline registers
  z0_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z0_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z0_p <= z0;
      END IF;
    END IF;
  END PROCESS z0_reg_process;


  -- CORDIC kernel iteration stage 1
  
  x1 <= x0 + y0 WHEN z0_p < to_signed(16#0000#, 16) ELSE
      x0 - y0;
  
  y1 <= y0 - x0 WHEN z0_p < to_signed(16#0000#, 16) ELSE
      y0 + x0;
  
  z1 <= z0_p + to_signed(16#3244#, 16) WHEN z0_p < to_signed(16#0000#, 16) ELSE
      z0_p - to_signed(16#3244#, 16);

  -- Pipeline registers
  x_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x1_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x1_p <= x1;
      END IF;
    END IF;
  END PROCESS x_reg_process;


  y_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y1_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y1_p <= y1;
      END IF;
    END IF;
  END PROCESS y_reg_process;


  z_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z1_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z1_p <= z1;
      END IF;
    END IF;
  END PROCESS z_reg_process;


  -- CORDIC kernel iteration stage 2
  kernel_iter2_c <= SHIFT_RIGHT(y1_p, 1);
  kernel_iter2_c_1 <= SHIFT_RIGHT(x1_p, 1);
  
  x2 <= x1_p + kernel_iter2_c WHEN z1_p < to_signed(16#0000#, 16) ELSE
      x1_p - kernel_iter2_c;
  
  y2 <= y1_p - kernel_iter2_c_1 WHEN z1_p < to_signed(16#0000#, 16) ELSE
      y1_p + kernel_iter2_c_1;
  
  z2 <= z1_p + to_signed(16#1DAC#, 16) WHEN z1_p < to_signed(16#0000#, 16) ELSE
      z1_p - to_signed(16#1DAC#, 16);

  -- Pipeline registers
  x_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x2_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x2_p <= x2;
      END IF;
    END IF;
  END PROCESS x_reg_1_process;


  y_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y2_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y2_p <= y2;
      END IF;
    END IF;
  END PROCESS y_reg_1_process;


  z_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z2_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z2_p <= z2;
      END IF;
    END IF;
  END PROCESS z_reg_1_process;


  -- CORDIC kernel iteration stage 3
  kernel_iter3_c <= SHIFT_RIGHT(y2_p, 2);
  kernel_iter3_c_1 <= SHIFT_RIGHT(x2_p, 2);
  
  x3 <= x2_p + kernel_iter3_c WHEN z2_p < to_signed(16#0000#, 16) ELSE
      x2_p - kernel_iter3_c;
  
  y3 <= y2_p - kernel_iter3_c_1 WHEN z2_p < to_signed(16#0000#, 16) ELSE
      y2_p + kernel_iter3_c_1;
  
  z3 <= z2_p + to_signed(16#0FAE#, 16) WHEN z2_p < to_signed(16#0000#, 16) ELSE
      z2_p - to_signed(16#0FAE#, 16);

  -- Pipeline registers
  x_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x3_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x3_p <= x3;
      END IF;
    END IF;
  END PROCESS x_reg_2_process;


  y_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y3_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y3_p <= y3;
      END IF;
    END IF;
  END PROCESS y_reg_2_process;


  z_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z3_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z3_p <= z3;
      END IF;
    END IF;
  END PROCESS z_reg_2_process;


  -- CORDIC kernel iteration stage 4
  kernel_iter4_c <= SHIFT_RIGHT(y3_p, 3);
  kernel_iter4_c_1 <= SHIFT_RIGHT(x3_p, 3);
  
  x4 <= x3_p + kernel_iter4_c WHEN z3_p < to_signed(16#0000#, 16) ELSE
      x3_p - kernel_iter4_c;
  
  y4 <= y3_p - kernel_iter4_c_1 WHEN z3_p < to_signed(16#0000#, 16) ELSE
      y3_p + kernel_iter4_c_1;
  
  z4 <= z3_p + to_signed(16#07F5#, 16) WHEN z3_p < to_signed(16#0000#, 16) ELSE
      z3_p - to_signed(16#07F5#, 16);

  -- Pipeline registers
  x_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x4_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x4_p <= x4;
      END IF;
    END IF;
  END PROCESS x_reg_3_process;


  y_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y4_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y4_p <= y4;
      END IF;
    END IF;
  END PROCESS y_reg_3_process;


  z_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z4_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z4_p <= z4;
      END IF;
    END IF;
  END PROCESS z_reg_3_process;


  -- CORDIC kernel iteration stage 5
  kernel_iter5_c <= SHIFT_RIGHT(y4_p, 4);
  kernel_iter5_c_1 <= SHIFT_RIGHT(x4_p, 4);
  
  x5 <= x4_p + kernel_iter5_c WHEN z4_p < to_signed(16#0000#, 16) ELSE
      x4_p - kernel_iter5_c;
  
  y5 <= y4_p - kernel_iter5_c_1 WHEN z4_p < to_signed(16#0000#, 16) ELSE
      y4_p + kernel_iter5_c_1;
  
  z5 <= z4_p + to_signed(16#03FF#, 16) WHEN z4_p < to_signed(16#0000#, 16) ELSE
      z4_p - to_signed(16#03FF#, 16);

  -- Pipeline registers
  x_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x5_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x5_p <= x5;
      END IF;
    END IF;
  END PROCESS x_reg_4_process;


  y_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y5_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y5_p <= y5;
      END IF;
    END IF;
  END PROCESS y_reg_4_process;


  z_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z5_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z5_p <= z5;
      END IF;
    END IF;
  END PROCESS z_reg_4_process;


  -- CORDIC kernel iteration stage 6
  kernel_iter6_c <= SHIFT_RIGHT(y5_p, 5);
  kernel_iter6_c_1 <= SHIFT_RIGHT(x5_p, 5);
  
  x6 <= x5_p + kernel_iter6_c WHEN z5_p < to_signed(16#0000#, 16) ELSE
      x5_p - kernel_iter6_c;
  
  y6 <= y5_p - kernel_iter6_c_1 WHEN z5_p < to_signed(16#0000#, 16) ELSE
      y5_p + kernel_iter6_c_1;
  
  z6 <= z5_p + to_signed(16#0200#, 16) WHEN z5_p < to_signed(16#0000#, 16) ELSE
      z5_p - to_signed(16#0200#, 16);

  -- Pipeline registers
  x_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x6_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x6_p <= x6;
      END IF;
    END IF;
  END PROCESS x_reg_5_process;


  y_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y6_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y6_p <= y6;
      END IF;
    END IF;
  END PROCESS y_reg_5_process;


  z_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z6_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z6_p <= z6;
      END IF;
    END IF;
  END PROCESS z_reg_5_process;


  -- CORDIC kernel iteration stage 7
  kernel_iter7_c <= SHIFT_RIGHT(y6_p, 6);
  kernel_iter7_c_1 <= SHIFT_RIGHT(x6_p, 6);
  
  x7 <= x6_p + kernel_iter7_c WHEN z6_p < to_signed(16#0000#, 16) ELSE
      x6_p - kernel_iter7_c;
  
  y7 <= y6_p - kernel_iter7_c_1 WHEN z6_p < to_signed(16#0000#, 16) ELSE
      y6_p + kernel_iter7_c_1;
  
  z7 <= z6_p + to_signed(16#0100#, 16) WHEN z6_p < to_signed(16#0000#, 16) ELSE
      z6_p - to_signed(16#0100#, 16);

  -- Pipeline registers
  x_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x7_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x7_p <= x7;
      END IF;
    END IF;
  END PROCESS x_reg_6_process;


  y_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y7_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y7_p <= y7;
      END IF;
    END IF;
  END PROCESS y_reg_6_process;


  z_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z7_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z7_p <= z7;
      END IF;
    END IF;
  END PROCESS z_reg_6_process;


  -- CORDIC kernel iteration stage 8
  kernel_iter8_c <= SHIFT_RIGHT(y7_p, 7);
  kernel_iter8_c_1 <= SHIFT_RIGHT(x7_p, 7);
  
  x8 <= x7_p + kernel_iter8_c WHEN z7_p < to_signed(16#0000#, 16) ELSE
      x7_p - kernel_iter8_c;
  
  y8 <= y7_p - kernel_iter8_c_1 WHEN z7_p < to_signed(16#0000#, 16) ELSE
      y7_p + kernel_iter8_c_1;
  
  z8 <= z7_p + to_signed(16#0080#, 16) WHEN z7_p < to_signed(16#0000#, 16) ELSE
      z7_p - to_signed(16#0080#, 16);

  -- Pipeline registers
  x_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x8_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x8_p <= x8;
      END IF;
    END IF;
  END PROCESS x_reg_7_process;


  y_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y8_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y8_p <= y8;
      END IF;
    END IF;
  END PROCESS y_reg_7_process;


  z_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z8_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z8_p <= z8;
      END IF;
    END IF;
  END PROCESS z_reg_7_process;


  -- CORDIC kernel iteration stage 9
  kernel_iter9_c <= SHIFT_RIGHT(y8_p, 8);
  kernel_iter9_c_1 <= SHIFT_RIGHT(x8_p, 8);
  
  x9 <= x8_p + kernel_iter9_c WHEN z8_p < to_signed(16#0000#, 16) ELSE
      x8_p - kernel_iter9_c;
  
  y9 <= y8_p - kernel_iter9_c_1 WHEN z8_p < to_signed(16#0000#, 16) ELSE
      y8_p + kernel_iter9_c_1;
  
  z9 <= z8_p + to_signed(16#0040#, 16) WHEN z8_p < to_signed(16#0000#, 16) ELSE
      z8_p - to_signed(16#0040#, 16);

  -- Pipeline registers
  x_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x9_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x9_p <= x9;
      END IF;
    END IF;
  END PROCESS x_reg_8_process;


  y_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y9_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y9_p <= y9;
      END IF;
    END IF;
  END PROCESS y_reg_8_process;


  z_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z9_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z9_p <= z9;
      END IF;
    END IF;
  END PROCESS z_reg_8_process;


  -- CORDIC kernel iteration stage 10
  kernel_iter10_c <= SHIFT_RIGHT(y9_p, 9);
  kernel_iter10_c_1 <= SHIFT_RIGHT(x9_p, 9);
  
  x10 <= x9_p + kernel_iter10_c WHEN z9_p < to_signed(16#0000#, 16) ELSE
      x9_p - kernel_iter10_c;
  
  y10 <= y9_p - kernel_iter10_c_1 WHEN z9_p < to_signed(16#0000#, 16) ELSE
      y9_p + kernel_iter10_c_1;
  
  z10 <= z9_p + to_signed(16#0020#, 16) WHEN z9_p < to_signed(16#0000#, 16) ELSE
      z9_p - to_signed(16#0020#, 16);

  -- Pipeline registers
  x_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x10_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x10_p <= x10;
      END IF;
    END IF;
  END PROCESS x_reg_9_process;


  y_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y10_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y10_p <= y10;
      END IF;
    END IF;
  END PROCESS y_reg_9_process;


  z_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      z10_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        z10_p <= z10;
      END IF;
    END IF;
  END PROCESS z_reg_9_process;


  -- CORDIC kernel iteration stage 11
  kernel_iter11_c <= SHIFT_RIGHT(y10_p, 10);
  kernel_iter11_c_1 <= SHIFT_RIGHT(x10_p, 10);
  
  x11 <= x10_p + kernel_iter11_c WHEN z10_p < to_signed(16#0000#, 16) ELSE
      x10_p - kernel_iter11_c;
  
  y11 <= y10_p - kernel_iter11_c_1 WHEN z10_p < to_signed(16#0000#, 16) ELSE
      y10_p + kernel_iter11_c_1;
  
  z11 <= z10_p + to_signed(16#0010#, 16) WHEN z10_p < to_signed(16#0000#, 16) ELSE
      z10_p - to_signed(16#0010#, 16);

  -- Pipeline registers
  x_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      x11_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        x11_p <= x11;
      END IF;
    END IF;
  END PROCESS x_reg_10_process;


  y_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y11_p <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        y11_p <= y11;
      END IF;
    END IF;
  END PROCESS y_reg_10_process;


  negate_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      negate_reg_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        negate_reg_reg(0) <= negate;
        negate_reg_reg(1 TO 11) <= negate_reg_reg(0 TO 10);
      END IF;
    END IF;
  END PROCESS negate_reg_process;

  negate_p <= negate_reg_reg(11);

  -- CORDIC Quad Correction After
  quad_correction_after_cast <= resize(x11_p, 17);
  quad_correction_after_cast_1 <=  - (quad_correction_after_cast);
  quad_correction_after_cast_2 <= resize(y11_p, 17);
  quad_correction_after_cast_3 <=  - (quad_correction_after_cast_2);
  
  xout <= quad_correction_after_cast_1(15 DOWNTO 0) WHEN negate_p /= '0' ELSE
      x11_p;
  
  yout <= quad_correction_after_cast_3(15 DOWNTO 0) WHEN negate_p /= '0' ELSE
      y11_p;

  sin <= std_logic_vector(yout);

END rtl;

